/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/abort-controller/dist/abort-controller.js":
/*!****************************************************************!*\
  !*** ./node_modules/abort-controller/dist/abort-controller.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar eventTargetShim = __webpack_require__(/*! event-target-shim */ \"./node_modules/event-target-shim/dist/event-target-shim.js\");\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nclass AbortSignal extends eventTargetShim.EventTarget {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    constructor() {\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\neventTargetShim.defineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */\nfunction createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    eventTargetShim.EventTarget.call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */\nfunction abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({ type: \"abort\" });\n}\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    });\n}\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nclass AbortController {\n    /**\n     * Initialize this controller.\n     */\n    constructor() {\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */\nconst signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    });\n}\n\nexports.AbortController = AbortController;\nexports.AbortSignal = AbortSignal;\nexports[\"default\"] = AbortController;\n\nmodule.exports = AbortController\nmodule.exports.AbortController = module.exports[\"default\"] = AbortController\nmodule.exports.AbortSignal = AbortSignal\n//# sourceMappingURL=abort-controller.js.map\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/abort-controller/dist/abort-controller.js?");

/***/ }),

/***/ "./node_modules/assert-options/dist/src/assert.js":
/*!********************************************************!*\
  !*** ./node_modules/assert-options/dist/src/assert.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertOptions = exports.createAssert = void 0;\nconst handler_1 = __webpack_require__(/*! ./handler */ \"./node_modules/assert-options/dist/src/handler.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/assert-options/dist/src/types.js\");\n/**\n * Creates an options-assert function that uses specified error handler.\n */\nfunction createAssert(errHandler) {\n    return function (options, defaults) {\n        if (options !== null && options !== undefined && typeof options !== 'object') {\n            return errHandler.handle(types_1.OptionsError.invalidOptionsParam, { options, defaults });\n        }\n        const isArray = Array.isArray(defaults);\n        if (!isArray && (!defaults || typeof defaults !== 'object')) {\n            return errHandler.handle(types_1.OptionsError.invalidDefaultsParam, { options, defaults });\n        }\n        if (options) {\n            for (const key of Object.keys(options)) {\n                if ((isArray && defaults.indexOf(key) === -1) || (!isArray && !(key in defaults))) {\n                    return errHandler.handle(types_1.OptionsError.optionNotRecognized, { options, defaults, key });\n                }\n            }\n        }\n        else {\n            options = {};\n        }\n        if (!isArray) {\n            const defs = defaults;\n            for (const d of Object.keys(defs)) {\n                if (options[d] === undefined && defs[d] !== undefined) {\n                    options[d] = defs[d];\n                }\n            }\n        }\n        return options;\n    };\n}\nexports.createAssert = createAssert;\n/**\n * Default options-assert function.\n */\nexports.assertOptions = createAssert(new handler_1.DefaultErrorHandler());\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/assert-options/dist/src/assert.js?");

/***/ }),

/***/ "./node_modules/assert-options/dist/src/handler.js":
/*!*********************************************************!*\
  !*** ./node_modules/assert-options/dist/src/handler.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultErrorHandler = void 0;\n/**\n * Protocol for handling options-related issues.\n */\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/assert-options/dist/src/types.js\");\n/**\n * Default handler for options-related issues.\n */\nclass DefaultErrorHandler {\n    handle(err, ctx) {\n        switch (err) {\n            case types_1.OptionsError.invalidOptionsParam:\n                throw new TypeError(`Invalid \"options\" parameter: ${JSON.stringify(ctx.options)}`);\n            case types_1.OptionsError.invalidDefaultsParam:\n                throw new TypeError(`Invalid \"defaults\" parameter: ${JSON.stringify(ctx.defaults)}`);\n            case types_1.OptionsError.optionNotRecognized:\n                throw new Error(`Option \"${ctx.key}\" is not recognized.`);\n            // istanbul ignore next:\n            default:\n                return ctx.options; // this will never happen\n        }\n    }\n}\nexports.DefaultErrorHandler = DefaultErrorHandler;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/assert-options/dist/src/handler.js?");

/***/ }),

/***/ "./node_modules/assert-options/dist/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/assert-options/dist/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultErrorHandler = exports.OptionsError = exports.createAssert = exports.assertOptions = void 0;\nvar assert_1 = __webpack_require__(/*! ./assert */ \"./node_modules/assert-options/dist/src/assert.js\");\nObject.defineProperty(exports, \"assertOptions\", ({ enumerable: true, get: function () { return assert_1.assertOptions; } }));\nObject.defineProperty(exports, \"createAssert\", ({ enumerable: true, get: function () { return assert_1.createAssert; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"./node_modules/assert-options/dist/src/types.js\");\nObject.defineProperty(exports, \"OptionsError\", ({ enumerable: true, get: function () { return types_1.OptionsError; } }));\nvar handler_1 = __webpack_require__(/*! ./handler */ \"./node_modules/assert-options/dist/src/handler.js\");\nObject.defineProperty(exports, \"DefaultErrorHandler\", ({ enumerable: true, get: function () { return handler_1.DefaultErrorHandler; } }));\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/assert-options/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/assert-options/dist/src/types.js":
/*!*******************************************************!*\
  !*** ./node_modules/assert-options/dist/src/types.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OptionsError = void 0;\n/**\n * All errors that can occur inside an assert function.\n */\nvar OptionsError;\n(function (OptionsError) {\n    OptionsError[OptionsError[\"invalidOptionsParam\"] = 0] = \"invalidOptionsParam\";\n    OptionsError[OptionsError[\"invalidDefaultsParam\"] = 1] = \"invalidDefaultsParam\";\n    OptionsError[OptionsError[\"optionNotRecognized\"] = 2] = \"optionNotRecognized\";\n})(OptionsError = exports.OptionsError || (exports.OptionsError = {}));\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/assert-options/dist/src/types.js?");

/***/ }),

/***/ "./node_modules/buffer-alloc-unsafe/index.js":
/*!***************************************************!*\
  !*** ./node_modules/buffer-alloc-unsafe/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("function allocUnsafe (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n\n  if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n\n  if (Buffer.allocUnsafe) {\n    return Buffer.allocUnsafe(size)\n  } else {\n    return new Buffer(size)\n  }\n}\n\nmodule.exports = allocUnsafe\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/buffer-alloc-unsafe/index.js?");

/***/ }),

/***/ "./node_modules/buffer-alloc/index.js":
/*!********************************************!*\
  !*** ./node_modules/buffer-alloc/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var bufferFill = __webpack_require__(/*! buffer-fill */ \"./node_modules/buffer-fill/index.js\")\nvar allocUnsafe = __webpack_require__(/*! buffer-alloc-unsafe */ \"./node_modules/buffer-alloc-unsafe/index.js\")\n\nmodule.exports = function alloc (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n\n  if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n\n  if (Buffer.alloc) {\n    return Buffer.alloc(size, fill, encoding)\n  }\n\n  var buffer = allocUnsafe(size)\n\n  if (size === 0) {\n    return buffer\n  }\n\n  if (fill === undefined) {\n    return bufferFill(buffer, 0)\n  }\n\n  if (typeof encoding !== 'string') {\n    encoding = undefined\n  }\n\n  return bufferFill(buffer, fill, encoding)\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/buffer-alloc/index.js?");

/***/ }),

/***/ "./node_modules/buffer-fill/index.js":
/*!*******************************************!*\
  !*** ./node_modules/buffer-fill/index.js ***!
  \*******************************************/
/***/ ((module) => {

eval("/* Node.js 6.4.0 and up has full support */\nvar hasFullSupport = (function () {\n  try {\n    if (!Buffer.isEncoding('latin1')) {\n      return false\n    }\n\n    var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4)\n\n    buf.fill('ab', 'ucs2')\n\n    return (buf.toString('hex') === '61006200')\n  } catch (_) {\n    return false\n  }\n}())\n\nfunction isSingleByte (val) {\n  return (val.length === 1 && val.charCodeAt(0) < 256)\n}\n\nfunction fillWithNumber (buffer, val, start, end) {\n  if (start < 0 || end > buffer.length) {\n    throw new RangeError('Out of range index')\n  }\n\n  start = start >>> 0\n  end = end === undefined ? buffer.length : end >>> 0\n\n  if (end > start) {\n    buffer.fill(val, start, end)\n  }\n\n  return buffer\n}\n\nfunction fillWithBuffer (buffer, val, start, end) {\n  if (start < 0 || end > buffer.length) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return buffer\n  }\n\n  start = start >>> 0\n  end = end === undefined ? buffer.length : end >>> 0\n\n  var pos = start\n  var len = val.length\n  while (pos <= (end - len)) {\n    val.copy(buffer, pos)\n    pos += len\n  }\n\n  if (pos !== end) {\n    val.copy(buffer, pos, 0, end - pos)\n  }\n\n  return buffer\n}\n\nfunction fill (buffer, val, start, end, encoding) {\n  if (hasFullSupport) {\n    return buffer.fill(val, start, end, encoding)\n  }\n\n  if (typeof val === 'number') {\n    return fillWithNumber(buffer, val, start, end)\n  }\n\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = buffer.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = buffer.length\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n\n    if (encoding === 'latin1') {\n      encoding = 'binary'\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n\n    if (val === '') {\n      return fillWithNumber(buffer, 0, start, end)\n    }\n\n    if (isSingleByte(val)) {\n      return fillWithNumber(buffer, val.charCodeAt(0), start, end)\n    }\n\n    val = new Buffer(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    return fillWithBuffer(buffer, val, start, end)\n  }\n\n  // Other values (e.g. undefined, boolean, object) results in zero-fill\n  return fillWithNumber(buffer, 0, start, end)\n}\n\nmodule.exports = fill\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/buffer-fill/index.js?");

/***/ }),

/***/ "./node_modules/dotenv/lib/main.js":
/*!*****************************************!*\
  !*** ./node_modules/dotenv/lib/main.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\")\nconst path = __webpack_require__(/*! path */ \"path\")\nconst os = __webpack_require__(/*! os */ \"os\")\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\")\nconst packageJson = __webpack_require__(/*! ../package.json */ \"./node_modules/dotenv/package.json\")\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    let processEnv = process.env\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv\n    }\n\n    DotenvModule.populate(processEnv, parsed, options)\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  const vaultPath = _vaultPath(options)\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.slice(0, 12)\n  const authTag = ciphertext.slice(-16)\n  ciphertext = ciphertext.slice(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\n      throw new Error(msg)\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\n      throw new Error(msg)\n    } else {\n      console.error('Error: ', error.code)\n      console.error('Error: ', error.message)\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/dotenv/lib/main.js?");

/***/ }),

/***/ "./node_modules/event-target-shim/dist/event-target-shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/event-target-shim/dist/event-target-shim.js ***!
  \******************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap();\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap();\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event);\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    );\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            );\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    });\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true });\n\n    // Define accessors\n    const keys = Object.keys(event);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this));\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype);\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event);\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value;\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    });\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            );\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nfunction wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nfunction isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nfunction setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nfunction setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nfunction setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap();\n\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next;\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n\n                node = node.next;\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    );\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        };\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node;\n            node = node.next;\n        }\n\n        // Add it.\n        prev.next = newNode;\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this);\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n\n        let prev = null;\n        let node = listeners.get(eventName);\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return\n            }\n\n            prev = node;\n            node = node.next;\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            );\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err);\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent);\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n\n        return !wrappedEvent.defaultPrevented\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);\n}\n\nexports.defineEventAttribute = defineEventAttribute;\nexports.EventTarget = EventTarget;\nexports[\"default\"] = EventTarget;\n\nmodule.exports = EventTarget\nmodule.exports.EventTarget = module.exports[\"default\"] = EventTarget\nmodule.exports.defineEventAttribute = defineEventAttribute\n//# sourceMappingURL=event-target-shim.js.map\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/event-target-shim/dist/event-target-shim.js?");

/***/ }),

/***/ "./node_modules/has-flag/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-flag/index.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (flag, argv) => {\n\targv = argv || process.argv;\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst pos = argv.indexOf(prefix + flag);\n\tconst terminatorPos = argv.indexOf('--');\n\treturn pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/has-flag/index.js?");

/***/ }),

/***/ "./node_modules/p-timeout/index.js":
/*!*****************************************!*\
  !*** ./node_modules/p-timeout/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst pTimeout = (promise, milliseconds, fallback, options) => {\n\tlet timer;\n\tconst cancelablePromise = new Promise((resolve, reject) => {\n\t\tif (typeof milliseconds !== 'number' || milliseconds < 0) {\n\t\t\tthrow new TypeError('Expected `milliseconds` to be a positive number');\n\t\t}\n\n\t\tif (milliseconds === Infinity) {\n\t\t\tresolve(promise);\n\t\t\treturn;\n\t\t}\n\n\t\toptions = {\n\t\t\tcustomTimers: {setTimeout, clearTimeout},\n\t\t\t...options\n\t\t};\n\n\t\ttimer = options.customTimers.setTimeout.call(undefined, () => {\n\t\t\tif (typeof fallback === 'function') {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(fallback());\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;\n\t\t\tconst timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n\t\t\tif (typeof promise.cancel === 'function') {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\n\t\t\treject(timeoutError);\n\t\t}, milliseconds);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tresolve(await promise);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t} finally {\n\t\t\t\toptions.customTimers.clearTimeout.call(undefined, timer);\n\t\t\t}\n\t\t})();\n\t});\n\n\tcancelablePromise.clear = () => {\n\t\tclearTimeout(timer);\n\t\ttimer = undefined;\n\t};\n\n\treturn cancelablePromise;\n};\n\nmodule.exports = pTimeout;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = pTimeout;\n\nmodule.exports.TimeoutError = TimeoutError;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/p-timeout/index.js?");

/***/ }),

/***/ "./node_modules/pg-cloudflare/dist/empty.js":
/*!**************************************************!*\
  !*** ./node_modules/pg-cloudflare/dist/empty.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// This is an empty module that is served up when outside of a workerd environment\n// See the `exports` field in package.json\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\n//# sourceMappingURL=empty.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-cloudflare/dist/empty.js?");

/***/ }),

/***/ "./node_modules/pg-connection-string/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-connection-string/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // Check for empty host in URL\n\n  const config = {}\n  let result\n  let dummyHost = false\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1')\n  }\n\n  try {\n    result = new URL(str, 'postgres://base')\n  } catch (e) {\n    // The URL is invalid so try again with a dummy host\n    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')\n    dummyHost = true\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1]\n  }\n\n  config.user = config.user || decodeURIComponent(result.username)\n  config.password = config.password || decodeURIComponent(result.password)\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.searchParams.get('db')\n    config.client_encoding = result.searchParams.get('encoding')\n    return config\n  }\n  const hostname = dummyHost ? '' : result.hostname\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname)\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port\n  }\n\n  const pathname = result.pathname.slice(1) || null\n  config.database = pathname ? decodeURI(pathname) : null\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? __webpack_require__(/*! fs */ \"fs\") : null\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-connection-string/index.js?");

/***/ }),

/***/ "./node_modules/pg-int8/index.js":
/*!***************************************!*\
  !*** ./node_modules/pg-int8/index.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// selected so (BASE - 1) * 0x100000000 + 0xffffffff is a safe integer\nvar BASE = 1000000;\n\nfunction readInt8(buffer) {\n\tvar high = buffer.readInt32BE(0);\n\tvar low = buffer.readUInt32BE(4);\n\tvar sign = '';\n\n\tif (high < 0) {\n\t\thigh = ~high + (low === 0);\n\t\tlow = (~low + 1) >>> 0;\n\t\tsign = '-';\n\t}\n\n\tvar result = '';\n\tvar carry;\n\tvar t;\n\tvar digits;\n\tvar pad;\n\tvar l;\n\tvar i;\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\tt = 0x100000000 * carry + low;\n\t\tdigits = '' + t % BASE;\n\n\t\treturn sign + digits + result;\n\t}\n}\n\nmodule.exports = readInt8;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-int8/index.js?");

/***/ }),

/***/ "./node_modules/pg-minify/lib/error.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-minify/lib/error.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {EOL} = __webpack_require__(/*! os */ \"os\");\r\nconst {addInspection, messageGap} = __webpack_require__(/*! ./utils */ \"./node_modules/pg-minify/lib/utils.js\");\r\n\r\nconst parsingErrorCode = {\r\n    unclosedMLC: 0, // Unclosed multi-line comment.\r\n    unclosedText: 1, // Unclosed text block.\r\n    unclosedQI: 2, // Unclosed quoted identifier.\r\n    multiLineQI: 3 // Multi-line quoted identifiers are not supported.\r\n};\r\n\r\nObject.freeze(parsingErrorCode);\r\n\r\nconst errorMessages = [\r\n    {name: 'unclosedMLC', message: 'Unclosed multi-line comment.'},\r\n    {name: 'unclosedText', message: 'Unclosed text block.'},\r\n    {name: 'unclosedQI', message: 'Unclosed quoted identifier.'},\r\n    {name: 'multiLineQI', message: 'Multi-line quoted identifiers are not supported.'}\r\n];\r\n\r\nclass SQLParsingError extends Error {\r\n    constructor(code, position) {\r\n        const err = errorMessages[code].message;\r\n        const message = `Error parsing SQL at {line:${position.line},col:${position.column}}: ${err}`;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.error = err;\r\n        this.code = code;\r\n        this.position = position;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\nSQLParsingError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = messageGap(level + 1);\r\n    const lines = [\r\n        `SQLParsingError {`,\r\n        `${gap}code: parsingErrorCode.${errorMessages[this.code].name}`,\r\n        `${gap}error: \"${this.error}\"`,\r\n        `${gap}position: {line: ${this.position.line}, col: ${this.position.column}}`,\r\n        `${messageGap(level)}}`\r\n    ];\r\n    return lines.join(EOL);\r\n};\r\n\r\naddInspection(SQLParsingError.prototype, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    SQLParsingError,\r\n    parsingErrorCode\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-minify/lib/error.js?");

/***/ }),

/***/ "./node_modules/pg-minify/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-minify/lib/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parser = __webpack_require__(/*! ./parser */ \"./node_modules/pg-minify/lib/parser.js\");\r\nconst error = __webpack_require__(/*! ./error */ \"./node_modules/pg-minify/lib/error.js\");\r\n\r\nparser.SQLParsingError = error.SQLParsingError;\r\nparser.parsingErrorCode = error.parsingErrorCode;\r\n\r\nmodule.exports = parser;\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-minify/lib/index.js?");

/***/ }),

/***/ "./node_modules/pg-minify/lib/parser.js":
/*!**********************************************!*\
  !*** ./node_modules/pg-minify/lib/parser.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {parsingErrorCode, SQLParsingError} = __webpack_require__(/*! ./error */ \"./node_modules/pg-minify/lib/error.js\");\r\nconst {getIndexPos} = __webpack_require__(/*! ./utils */ \"./node_modules/pg-minify/lib/utils.js\");\r\n\r\n// symbols that need no spaces around them:\r\nconst compressors = '.,;:()[]=<>+-*/|!?@#';\r\n\r\n////////////////////////////////////////////\r\n// Parses and minimizes a PostgreSQL script.\r\nfunction minify(sql, options) {\r\n\r\n    if (typeof sql !== 'string') {\r\n        throw new TypeError('Input SQL must be a text string.');\r\n    }\r\n\r\n    if (!sql.length) {\r\n        return '';\r\n    }\r\n\r\n    sql = sql.replace(/\\r\\n/g, '\\n');\r\n\r\n    options = options || {};\r\n\r\n    let idx = 0, // current index\r\n        result = '', // resulting sql\r\n        space = false; // add a space on the next step\r\n\r\n    const len = sql.length;\r\n\r\n    do {\r\n        const s = sql[idx], // current symbol;\r\n            s1 = sql[idx + 1]; // next symbol;\r\n\r\n        if (isGap(s)) {\r\n            while (++idx < len && isGap(sql[idx])) ;\r\n            if (idx < len) {\r\n                space = true;\r\n            }\r\n            idx--;\r\n            continue;\r\n        }\r\n\r\n        if (s === '-' && s1 === '-') {\r\n            const lb = sql.indexOf('\\n', idx + 2);\r\n            if (lb < 0) {\r\n                break;\r\n            }\r\n            idx = lb - 1;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (s === '/' && s1 === '*') {\r\n            let c = idx + 1, open = 0, close = 0, lastOpen, lastClose;\r\n            while (++c < len - 1 && close <= open) {\r\n                if (sql[c] === '/' && sql[c + 1] === '*') {\r\n                    lastOpen = c;\r\n                    open++;\r\n                    c++;\r\n                } else {\r\n                    if (sql[c] === '*' && sql[c + 1] === '/') {\r\n                        lastClose = c;\r\n                        close++;\r\n                        c++;\r\n                    }\r\n                }\r\n            }\r\n            if (close <= open) {\r\n                idx = lastOpen;\r\n                throwError(parsingErrorCode.unclosedMLC);\r\n            }\r\n            if (sql[idx + 2] === '!' && !options.removeAll) {\r\n                if (options.compress) {\r\n                    space = false;\r\n                }\r\n                addSpace();\r\n                result += sql.substring(idx, lastClose + 2)\r\n                    .replace(/\\n/g, '\\r\\n');\r\n            }\r\n            idx = lastClose + 1;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        let closeIdx, text;\r\n\r\n        if (s === '\"') {\r\n            closeIdx = sql.indexOf('\"', idx + 1);\r\n            if (closeIdx < 0) {\r\n                throwError(parsingErrorCode.unclosedQI);\r\n            }\r\n            text = sql.substring(idx, closeIdx + 1);\r\n            if (text.indexOf('\\n') > 0) {\r\n                throwError(parsingErrorCode.multiLineQI);\r\n            }\r\n            if (options.compress) {\r\n                space = false;\r\n            }\r\n            addSpace();\r\n            result += text;\r\n            idx = closeIdx;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (s === `'`) {\r\n            closeIdx = idx;\r\n            do {\r\n                closeIdx = sql.indexOf(`'`, closeIdx + 1);\r\n                if (closeIdx > 0) {\r\n                    let i = closeIdx;\r\n                    while (sql[--i] === '\\\\') ;\r\n                    if ((closeIdx - i) % 2) {\r\n                        let step = closeIdx;\r\n                        while (++step < len && sql[step] === `'`) ;\r\n                        if ((step - closeIdx) % 2) {\r\n                            closeIdx = step - 1;\r\n                            break;\r\n                        }\r\n                        closeIdx = step === len ? -1 : step;\r\n                    }\r\n                }\r\n            } while (closeIdx > 0);\r\n            if (closeIdx < 0) {\r\n                throwError(parsingErrorCode.unclosedText);\r\n            }\r\n            if (options.compress) {\r\n                space = false;\r\n            }\r\n            addSpace();\r\n            text = sql.substring(idx, closeIdx + 1);\r\n            const hasLB = text.indexOf('\\n') > 0;\r\n            if (hasLB) {\r\n                text = text.split('\\n').map(m => {\r\n                    return m.replace(/^\\s+|\\s+$/g, '');\r\n                }).join('\\\\n');\r\n            }\r\n            const hasTabs = text.indexOf('\\t') > 0;\r\n            if (hasLB || hasTabs) {\r\n                const prev = idx ? sql[idx - 1] : '';\r\n                if (prev !== 'E' && prev !== 'e') {\r\n                    const r = result ? result[result.length - 1] : '';\r\n                    if (r && r !== ' ' && compressors.indexOf(r) < 0) {\r\n                        result += ' ';\r\n                    }\r\n                    result += 'E';\r\n                }\r\n                if (hasTabs) {\r\n                    text = text.replace(/\\t/g, '\\\\t');\r\n                }\r\n            }\r\n            result += text;\r\n            idx = closeIdx;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (options.compress && compressors.indexOf(s) >= 0) {\r\n            space = false;\r\n            skipGaps();\r\n        }\r\n\r\n        addSpace();\r\n        result += s;\r\n\r\n    } while (++idx < len);\r\n\r\n    return result;\r\n\r\n    function skipGaps() {\r\n        if (options.compress) {\r\n            while (idx < len - 1 && isGap(sql[idx + 1]) && idx++) ;\r\n        }\r\n    }\r\n\r\n    function addSpace() {\r\n        if (space) {\r\n            if (result.length) {\r\n                result += ' ';\r\n            }\r\n            space = false;\r\n        }\r\n    }\r\n\r\n    function throwError(code) {\r\n        const position = getIndexPos(sql, idx);\r\n        throw new SQLParsingError(code, position);\r\n    }\r\n}\r\n\r\n////////////////////////////////////\r\n// Identifies a gap / empty symbol.\r\nfunction isGap(s) {\r\n    return s === ' ' || s === '\\t' || s === '\\r' || s === '\\n';\r\n}\r\n\r\nmodule.exports = minify;\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-minify/lib/parser.js?");

/***/ }),

/***/ "./node_modules/pg-minify/lib/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-minify/lib/utils.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {inspect} = __webpack_require__(/*! util */ \"util\");\r\n\r\n/////////////////////////////////////////////////////////////\r\n// Returns {line, column} of an index within multi-line text.\r\nfunction getIndexPos(text, index) {\r\n    let lineIdx = 0, colIdx = index, pos = 0;\r\n    do {\r\n        pos = text.indexOf('\\n', pos);\r\n        if (pos === -1 || index < pos + 1) {\r\n            break;\r\n        }\r\n        lineIdx++;\r\n        pos++;\r\n        colIdx = index - pos;\r\n    } while (pos < index);\r\n    return {\r\n        line: lineIdx + 1,\r\n        column: colIdx + 1\r\n    };\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output.\r\nfunction messageGap(level) {\r\n    return ' '.repeat(level * 4);\r\n}\r\n\r\n////////////////////////////////////////////////////\r\n// Type inspection\r\nfunction addInspection(type, cb) {\r\n    type[inspect.custom] = cb;\r\n}\r\n\r\nmodule.exports = {\r\n    getIndexPos,\r\n    messageGap,\r\n    addInspection\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-minify/lib/utils.js?");

/***/ }),

/***/ "./node_modules/pg-pool/index.js":
/*!***************************************!*\
  !*** ./node_modules/pg-pool/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter)\n\nconst NOOP = function () {}\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate)\n\n  return i === -1 ? undefined : list.splice(i, 1)[0]\n}\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client\n    this.idleListener = idleListener\n    this.timeoutId = timeoutId\n  }\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback\n  }\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.')\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return { callback: callback, result: undefined }\n  }\n  let rej\n  let res\n  const cb = function (err, client) {\n    err ? rej(err) : res(client)\n  }\n  const result = new Promise(function (resolve, reject) {\n    res = resolve\n    rej = reject\n  }).catch(err => {\n    // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n    // application that created the query\n    Error.captureStackTrace(err);\n    throw err;\n  })\n  return { callback: cb, result: result }\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client\n\n    client.removeListener('error', idleListener)\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err)\n    })\n    pool._remove(client)\n    // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n    pool.emit('error', err, client)\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super()\n    this.options = Object.assign({}, options)\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password,\n      })\n    }\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10\n    this.options.maxUses = this.options.maxUses || Infinity\n    this.options.allowExitOnIdle = this.options.allowExitOnIdle || false\n    this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0\n    this.log = this.options.log || function () {}\n    this.Client = this.options.Client || Client || (__webpack_require__(/*! pg */ \"./node_modules/pg/lib/index.js\").Client)\n    this.Promise = this.options.Promise || global.Promise\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000\n    }\n\n    this._clients = []\n    this._idle = []\n    this._expired = new WeakSet()\n    this._pendingQueue = []\n    this._endCallback = undefined\n    this.ending = false\n    this.ended = false\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue')\n    if (this.ended) {\n      this.log('pulse queue ended')\n      return\n    }\n    if (this.ending) {\n      this.log('pulse queue on ending')\n      if (this._idle.length) {\n        this._idle.slice().map((item) => {\n          this._remove(item.client)\n        })\n      }\n      if (!this._clients.length) {\n        this.ended = true\n        this._endCallback()\n      }\n      return\n    }\n\n    // if we don't have any waiting, do nothing\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests')\n      return\n    }\n    // if we don't have any idle clients and we have no more room do nothing\n    if (!this._idle.length && this._isFull()) {\n      return\n    }\n    const pendingItem = this._pendingQueue.shift()\n    if (this._idle.length) {\n      const idleItem = this._idle.pop()\n      clearTimeout(idleItem.timeoutId)\n      const client = idleItem.client\n      client.ref && client.ref()\n      const idleListener = idleItem.idleListener\n\n      return this._acquireClient(client, pendingItem, idleListener, false)\n    }\n    if (!this._isFull()) {\n      return this.newClient(pendingItem)\n    }\n    throw new Error('unexpected condition')\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, (item) => item.client === client)\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId)\n    }\n\n    this._clients = this._clients.filter((c) => c !== client)\n    client.end()\n    this.emit('remove', client)\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n\n    const response = promisify(this.Promise, cb)\n    const result = response.result\n\n    // if we don't have to connect a new client, don't do so\n    if (this._isFull() || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue())\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback))\n        return result\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid)\n        response.callback(err, res, done)\n      }\n\n      const pendingItem = new PendingItem(queueCallback)\n\n      // set connection timeout on checking out an existing client\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, (i) => i.callback === queueCallback)\n        pendingItem.timedOut = true\n        response.callback(new Error('timeout exceeded when trying to connect'))\n      }, this.options.connectionTimeoutMillis)\n\n      this._pendingQueue.push(pendingItem)\n      return result\n    }\n\n    this.newClient(new PendingItem(response.callback))\n\n    return result\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options)\n    this._clients.push(client)\n    const idleListener = makeIdleListener(this, client)\n\n    this.log('checking client timeout')\n\n    // connection timeout logic\n    let tid\n    let timeoutHit = false\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout')\n        timeoutHit = true\n        // force kill the node driver, and let libpq do its teardown\n        client.connection ? client.connection.stream.destroy() : client.end()\n      }, this.options.connectionTimeoutMillis)\n    }\n\n    this.log('connecting new client')\n    client.connect((err) => {\n      if (tid) {\n        clearTimeout(tid)\n      }\n      client.on('error', idleListener)\n      if (err) {\n        this.log('client failed to connect', err)\n        // remove the dead client from our list of clients\n        this._clients = this._clients.filter((c) => c !== client)\n        if (timeoutHit) {\n          err.message = 'Connection terminated due to connection timeout'\n        }\n\n        // this client won’t be released, so move on immediately\n        this._pulseQueue()\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP)\n        }\n      } else {\n        this.log('new client connected')\n\n        if (this.options.maxLifetimeSeconds !== 0) {\n          const maxLifetimeTimeout = setTimeout(() => {\n            this.log('ending client due to expired lifetime')\n            this._expired.add(client)\n            const idleIndex = this._idle.findIndex((idleItem) => idleItem.client === client)\n            if (idleIndex !== -1) {\n              this._acquireClient(\n                client,\n                new PendingItem((err, client, clientRelease) => clientRelease()),\n                idleListener,\n                false\n              )\n            }\n          }, this.options.maxLifetimeSeconds * 1000)\n\n          maxLifetimeTimeout.unref()\n          client.once('end', () => clearTimeout(maxLifetimeTimeout))\n        }\n\n        return this._acquireClient(client, pendingItem, idleListener, true)\n      }\n    })\n  }\n\n  // acquire a client for a pending work item\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client)\n    }\n\n    this.emit('acquire', client)\n\n    client.release = this._releaseOnce(client, idleListener)\n\n    client.removeListener('error', idleListener)\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, (err) => {\n          if (err) {\n            client.release(err)\n            return pendingItem.callback(err, undefined, NOOP)\n          }\n\n          pendingItem.callback(undefined, client, client.release)\n        })\n      } else {\n        pendingItem.callback(undefined, client, client.release)\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release)\n      } else {\n        client.release()\n      }\n    }\n  }\n\n  // returns a function that wraps _release and throws if called more than once\n  _releaseOnce(client, idleListener) {\n    let released = false\n\n    return (err) => {\n      if (released) {\n        throwOnDoubleRelease()\n      }\n\n      released = true\n      this._release(client, idleListener, err)\n    }\n  }\n\n  // release a client back to the poll, include an error\n  // to remove it from the pool\n  _release(client, idleListener, err) {\n    client.on('error', idleListener)\n\n    client._poolUseCount = (client._poolUseCount || 0) + 1\n\n    this.emit('release', err, client)\n\n    // TODO(bmc): expose a proper, public interface _queryable and _ending\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client')\n      }\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    const isExpired = this._expired.has(client)\n    if (isExpired) {\n      this.log('remove expired client')\n      this._expired.delete(client)\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    // idle timeout\n    let tid\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client')\n        this._remove(client)\n      }, this.options.idleTimeoutMillis)\n\n      if (this.options.allowExitOnIdle) {\n        // allow Node to exit if this is all that's left\n        tid.unref()\n      }\n    }\n\n    if (this.options.allowExitOnIdle) {\n      client.unref()\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid))\n    this._pulseQueue()\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text)\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'))\n      })\n      return response.result\n    }\n\n    // allow plain text query without values\n    if (typeof values === 'function') {\n      cb = values\n      values = undefined\n    }\n    const response = promisify(this.Promise, cb)\n    cb = response.callback\n\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err)\n      }\n\n      let clientReleased = false\n      const onError = (err) => {\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        cb(err)\n      }\n\n      client.once('error', onError)\n      this.log('dispatching query')\n      try {\n        client.query(text, values, (err, res) => {\n          this.log('query dispatched')\n          client.removeListener('error', onError)\n          if (clientReleased) {\n            return\n          }\n          clientReleased = true\n          client.release(err)\n          if (err) {\n            return cb(err)\n          }\n          return cb(undefined, res)\n        })\n      } catch (err) {\n        client.release(err)\n        return cb(err)\n      }\n    })\n    return response.result\n  }\n\n  end(cb) {\n    this.log('ending')\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n    this.ending = true\n    const promised = promisify(this.Promise, cb)\n    this._endCallback = promised.callback\n    this._pulseQueue()\n    return promised.result\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length\n  }\n\n  get idleCount() {\n    return this._idle.length\n  }\n\n  get expiredCount() {\n    return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0)\n  }\n\n  get totalCount() {\n    return this._clients.length\n  }\n}\nmodule.exports = Pool\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-pool/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/assert.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-promise/lib/assert.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {assertOptions} = __webpack_require__(/*! assert-options */ \"./node_modules/assert-options/dist/src/index.js\");\r\n\r\n// this to allow override options-related errors globally (for pg-promise)\r\nglobal.pgPromiseAssert = assertOptions;\r\n\r\nmodule.exports = {\r\n    assert() {\r\n        return global.pgPromiseAssert.apply(null, [...arguments]);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/assert.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/connect.js":
/*!************************************************!*\
  !*** ./node_modules/pg-promise/lib/connect.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Events} = __webpack_require__(/*! ./events */ \"./node_modules/pg-promise/lib/events.js\");\r\nconst {ColorConsole} = __webpack_require__(/*! ./utils/color */ \"./node_modules/pg-promise/lib/utils/color.js\");\r\n\r\nconst npm = {\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    text: __webpack_require__(/*! ./text */ \"./node_modules/pg-promise/lib/text.js\"),\r\n    formatting: __webpack_require__(/*! ./formatting */ \"./node_modules/pg-promise/lib/formatting.js\")\r\n};\r\n\r\nfunction poolConnect(ctx, db, config) {\r\n    return config.promise((resolve, reject) => {\r\n        const p = db.$pool;\r\n        if (p.ending) {\r\n            db.$destroy();\r\n            const err = new Error(npm.text.poolDestroyed);\r\n            Events.error(ctx.options, err, {\r\n                dc: ctx.dc\r\n            });\r\n            reject(err);\r\n            return;\r\n        }\r\n        p.connect((err, client) => {\r\n            if (err) {\r\n                Events.error(ctx.options, err, {\r\n                    cn: npm.utils.getSafeConnection(ctx.cn),\r\n                    dc: ctx.dc\r\n                });\r\n                reject(err);\r\n            } else {\r\n                if ('$useCount' in client) {\r\n                    // Make sure useCount drops to 1, if it ever reaches maximum integer number;\r\n                    // We do not drop it to zero, to avoid rerun of initialization queries that\r\n                    // usually check for useCount === 0;\r\n                    // istanbul ignore if\r\n                    if (client.$useCount >= Number.MAX_SAFE_INTEGER) {\r\n                        client.$useCount = 1; // resetting; cannot auto-test this\r\n                    } else {\r\n                        client.$useCount = ++client.$useCount;\r\n                    }\r\n                } else {\r\n                    Object.defineProperty(client, '$useCount', {\r\n                        value: 0,\r\n                        configurable: false,\r\n                        enumerable: false,\r\n                        writable: true\r\n                    });\r\n                    setSchema(client, ctx);\r\n                }\r\n                setCtx(client, ctx);\r\n                const end = lockClientEnd(client);\r\n                client.on('error', onError);\r\n                resolve({\r\n                    client,\r\n                    useCount: client.$useCount,\r\n                    release(kill) {\r\n                        client.end = end;\r\n                        client.release(kill || client.$connectionError);\r\n                        Events.disconnect(ctx, client);\r\n                        client.removeListener('error', onError);\r\n                    }\r\n                });\r\n                Events.connect(ctx, client, client.$useCount);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction directConnect(ctx, config) {\r\n    return config.promise((resolve, reject) => {\r\n        const client = new config.pgp.pg.Client(ctx.cn);\r\n        client.connect(err => {\r\n            if (err) {\r\n                Events.error(ctx.options, err, {\r\n                    cn: npm.utils.getSafeConnection(ctx.cn),\r\n                    dc: ctx.dc\r\n                });\r\n                reject(err);\r\n            } else {\r\n                setSchema(client, ctx);\r\n                setCtx(client, ctx);\r\n                const end = lockClientEnd(client);\r\n                client.on('error', onError);\r\n                resolve({\r\n                    client,\r\n                    useCount: 0,\r\n                    release() {\r\n                        client.end = end;\r\n                        const p = config.promise((res, rej) => client.end().then(res).catch(rej));\r\n                        Events.disconnect(ctx, client);\r\n                        client.removeListener('error', onError);\r\n                        return p;\r\n                    }\r\n                });\r\n                Events.connect(ctx, client, 0);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// this event only happens when the connection is lost physically,\r\n// which cannot be tested automatically; removing from coverage:\r\n// istanbul ignore next\r\nfunction onError(err) {\r\n    const ctx = this.$ctx;\r\n    const cn = npm.utils.getSafeConnection(ctx.cn);\r\n    Events.error(ctx.options, err, {cn, dc: ctx.dc});\r\n    if (ctx.cnOptions && typeof ctx.cnOptions.onLost === 'function' && !ctx.notified) {\r\n        try {\r\n            ctx.cnOptions.onLost.call(this, err, {\r\n                cn,\r\n                dc: ctx.dc,\r\n                start: ctx.start,\r\n                client: this\r\n            });\r\n        } catch (e) {\r\n            ColorConsole.error(e && e.stack || e);\r\n        }\r\n        ctx.notified = true;\r\n    }\r\n}\r\n\r\nfunction lockClientEnd(client) {\r\n    const end = client.end;\r\n    client.end = doNotCall => {\r\n        // This call can happen only in the following two cases:\r\n        // 1. the client made the call directly, against the library's documentation (invalid code)\r\n        // 2. connection with the server broke, and the pool is terminating all clients forcefully.\r\n        ColorConsole.error(`${npm.text.clientEnd}\\n${npm.utils.getLocalStack(1, 3)}\\n`);\r\n        if (!doNotCall) {\r\n            end.call(client);\r\n        }\r\n    };\r\n    return end;\r\n}\r\n\r\nfunction setCtx(client, ctx) {\r\n    Object.defineProperty(client, '$ctx', {\r\n        value: ctx,\r\n        writable: true\r\n    });\r\n}\r\n\r\nfunction setSchema(client, ctx) {\r\n    let s = ctx.options.schema;\r\n    if (!s) {\r\n        return;\r\n    }\r\n    if (typeof s === 'function') {\r\n        s = s.call(ctx.dc, ctx.dc);\r\n    }\r\n    if (Array.isArray(s)) {\r\n        s = s.filter(a => a && typeof a === 'string');\r\n    }\r\n    if (typeof s === 'string' || (Array.isArray(s) && s.length)) {\r\n        client.query(npm.formatting.as.format('SET search_path TO $1:name', [s]), err => {\r\n            // istanbul ignore if;\r\n            if (err) {\r\n                // This is unlikely to ever happen, unless the connection is created faulty,\r\n                // and fails on the very first query, which is impossible to test automatically.\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = config => ({\r\n    pool: (ctx, db) => poolConnect(ctx, db, config),\r\n    direct: ctx => directConnect(ctx, config)\r\n});\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/connect.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/context.js":
/*!************************************************!*\
  !*** ./node_modules/pg-promise/lib/context.js ***!
  \************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/**\r\n * @class ConnectionContext\r\n * @private\r\n * @summary Internal connection context.\r\n *\r\n * @param {object} cc\r\n * Connection Context.\r\n *\r\n * @param {object} cc.cn\r\n * Connection details\r\n *\r\n * @param {*} cc.dc\r\n * Database Context\r\n *\r\n * @param {object} cc.options\r\n * Library's Initialization Options\r\n *\r\n * @param {object} cc.db\r\n * Database Session we're attached to, if any.\r\n *\r\n * @param {number} cc.level\r\n * Task Level\r\n *\r\n * @param {number} cc.txLevel\r\n * Transaction Level\r\n *\r\n * @param {object} cc.parentCtx\r\n * Connection Context of the parent operation, if any.\r\n *\r\n */\r\nclass ConnectionContext {\r\n\r\n    constructor(cc) {\r\n        this.cn = cc.cn; // connection details;\r\n        this.dc = cc.dc; // database context;\r\n        this.options = cc.options; // library options;\r\n        this.db = cc.db; // database session;\r\n        this.level = cc.level; // task level;\r\n        this.txLevel = cc.txLevel; // transaction level;\r\n        this.parentCtx = null; // parent context\r\n        this.taskCtx = null; // task context\r\n        this.start = null; // Date/Time when connected\r\n        this.txCount = 0;\r\n    }\r\n\r\n    connect(db) {\r\n        this.db = db;\r\n        this.start = new Date();\r\n    }\r\n\r\n    disconnect(kill) {\r\n        if (this.db) {\r\n            const p = this.db.release(kill);\r\n            this.db = null;\r\n            return p;\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        const obj = new ConnectionContext(this);\r\n        obj.parent = this;\r\n        obj.parentCtx = this.taskCtx;\r\n        return obj;\r\n    }\r\n\r\n    get nextTxCount() {\r\n        let txCurrent = this, txTop = this;\r\n        while (txCurrent.parent) {\r\n            txCurrent = txCurrent.parent;\r\n            if (txCurrent.taskCtx && txCurrent.taskCtx.isTX) {\r\n                txTop = txCurrent;\r\n            }\r\n        }\r\n        return txTop.txCount++;\r\n    }\r\n}\r\n\r\n/**\r\n * Connection Context\r\n * @module context\r\n * @author Vitaly Tomilov\r\n * @private\r\n */\r\nmodule.exports = {ConnectionContext};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/context.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/database-pool.js":
/*!******************************************************!*\
  !*** ./node_modules/pg-promise/lib/database-pool.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColorConsole} = __webpack_require__(/*! ./utils/color */ \"./node_modules/pg-promise/lib/utils/color.js\");\r\n\r\nconst npm = {\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\r\nclass DatabasePool {\r\n\r\n    /**\r\n     * Global instance of the database pool repository.\r\n     *\r\n     * @returns {{dbMap: {}, dbs: Array}}\r\n     */\r\n    static get instance() {\r\n        const s = Symbol.for('pgPromiseDatabasePool');\r\n        let scope = global[s];\r\n        if (!scope) {\r\n            scope = {\r\n                dbMap: {}, // map of used database context keys (connection + dc)\r\n                dbs: [] // all database objects\r\n            };\r\n            global[s] = scope;\r\n        }\r\n        return scope;\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.register\r\n     * @static\r\n     * @description\r\n     *  - Registers each database object, to make sure no duplicates connections are used,\r\n     *    and if they are, produce a warning;\r\n     *  - Registers each Pool object, to be able to release them all when requested.\r\n     *\r\n     * @param {Database} db - The new Database object being registered.\r\n     */\r\n    static register(db) {\r\n        const cnKey = DatabasePool.createContextKey(db);\r\n        npm.utils.addReadProp(db, '$cnKey', cnKey, true);\r\n        const {dbMap, dbs} = DatabasePool.instance;\r\n        if (cnKey in dbMap) {\r\n            dbMap[cnKey]++;\r\n            /* istanbul ignore if */\r\n            if (!db.$config.options.noWarnings) {\r\n                ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\r\n            }\r\n        } else {\r\n            dbMap[cnKey] = 1;\r\n        }\r\n        dbs.push(db);\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.unregister\r\n     * @static\r\n     * @param db\r\n     */\r\n    static unregister(db) {\r\n        const cnKey = db.$cnKey;\r\n        const {dbMap} = DatabasePool.instance;\r\n        if (!--dbMap[cnKey]) {\r\n            delete dbMap[cnKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.shutDown\r\n     * @static\r\n     */\r\n    static shutDown() {\r\n        const {instance} = DatabasePool;\r\n        instance.dbs.forEach(db => {\r\n            db.$destroy();\r\n        });\r\n        instance.dbs.length = 0;\r\n        instance.dbMap = {};\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.createContextKey\r\n     * @static\r\n     * @description\r\n     * For connections that are objects it reorders the keys alphabetically,\r\n     * and then serializes the result into a JSON string.\r\n     *\r\n     * @param {Database} db - Database instance.\r\n     */\r\n    static createContextKey(db) {\r\n        let cn = db.$cn;\r\n        if (typeof cn === 'object') {\r\n            const obj = {}, keys = Object.keys(cn).sort();\r\n            keys.forEach(name => {\r\n                obj[name] = cn[name];\r\n            });\r\n            cn = obj;\r\n        }\r\n        return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\r\n    }\r\n}\r\n\r\nmodule.exports = {DatabasePool};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/database-pool.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/database.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-promise/lib/database.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Events} = __webpack_require__(/*! ./events */ \"./node_modules/pg-promise/lib/events.js\");\r\nconst {assert} = __webpack_require__(/*! ./assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\nconst {resultQuery, multiResultQuery, streamQuery} = __webpack_require__(/*! ./special-query */ \"./node_modules/pg-promise/lib/special-query.js\");\r\nconst {ConnectionContext} = __webpack_require__(/*! ./context */ \"./node_modules/pg-promise/lib/context.js\");\r\nconst {DatabasePool} = __webpack_require__(/*! ./database-pool */ \"./node_modules/pg-promise/lib/database-pool.js\");\r\nconst {queryResult} = __webpack_require__(/*! ./query-result */ \"./node_modules/pg-promise/lib/query-result.js\");\r\n\r\nconst npm = {\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    pubUtils: __webpack_require__(/*! ./utils/public */ \"./node_modules/pg-promise/lib/utils/public.js\"),\r\n    connect: __webpack_require__(/*! ./connect */ \"./node_modules/pg-promise/lib/connect.js\"),\r\n    query: __webpack_require__(/*! ./query */ \"./node_modules/pg-promise/lib/query.js\"),\r\n    task: __webpack_require__(/*! ./task */ \"./node_modules/pg-promise/lib/task.js\"),\r\n    text: __webpack_require__(/*! ./text */ \"./node_modules/pg-promise/lib/text.js\")\r\n};\r\n\r\n/**\r\n * @class Database\r\n * @description\r\n *\r\n * Represents the database protocol, extensible via event {@link event:extend extend}.\r\n * This type is not available directly, it can only be created via the library's base call.\r\n *\r\n * **IMPORTANT:**\r\n *\r\n * For any given connection, you should only create a single {@link Database} object in a separate module,\r\n * to be shared in your application (see the code example below). If instead you keep creating the {@link Database}\r\n * object dynamically, your application will suffer from loss in performance, and will be getting a warning in a\r\n * development environment (when `NODE_ENV` = `development`):\r\n *\r\n * `WARNING: Creating a duplicate database object for the same connection.`\r\n *\r\n * If you ever see this warning, rectify your {@link Database} object initialization, so there is only one object\r\n * per connection details. See the example provided below.\r\n *\r\n * See also: property `noWarnings` in {@link module:pg-promise Initialization Options}.\r\n *\r\n * Note however, that in special cases you may need to re-create the database object, if its connection pool has been\r\n * shut-down externally. And in this case the library won't be showing any warning.\r\n *\r\n * @param {string|object} cn\r\n * Database connection details, which can be:\r\n *\r\n * - a configuration object\r\n * - a connection string\r\n *\r\n * For details see {@link https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax Connection Syntax}.\r\n *\r\n * The value can be accessed from the database object via property {@link Database.$cn $cn}.\r\n *\r\n * @param {*} [dc]\r\n * Database Context.\r\n *\r\n * Any object or value to be propagated through the protocol, to allow implementations and event handling\r\n * that depend on the database context.\r\n *\r\n * This is mainly to facilitate the use of multiple databases which may need separate protocol extensions,\r\n * or different implementations within a single task / transaction callback, depending on the database context.\r\n *\r\n * This parameter also adds uniqueness to the connection context that's used in combination with the connection\r\n * parameters, i.e. use of unique database context will prevent getting the warning about creating a duplicate\r\n * Database object.\r\n *\r\n * The value can be accessed from the database object via property {@link Database#$dc $dc}.\r\n *\r\n * @returns {Database}\r\n *\r\n * @see\r\n *\r\n * {@link Database#query query},\r\n * {@link Database#none none},\r\n * {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone},\r\n * {@link Database#many many},\r\n * {@link Database#manyOrNone manyOrNone},\r\n * {@link Database#any any},\r\n * {@link Database#func func},\r\n * {@link Database#proc proc},\r\n * {@link Database#result result},\r\n * {@link Database#multiResult multiResult},\r\n * {@link Database#multi multi},\r\n * {@link Database#map map},\r\n * {@link Database#each each},\r\n * {@link Database#stream stream},\r\n * {@link Database#task task},\r\n * {@link Database#taskIf taskIf},\r\n * {@link Database#tx tx},\r\n * {@link Database#txIf txIf},\r\n * {@link Database#connect connect},\r\n * {@link Database#$config $config},\r\n * {@link Database#$cn $cn},\r\n * {@link Database#$dc $dc},\r\n * {@link Database#$pool $pool},\r\n * {@link event:extend extend}\r\n *\r\n * @example\r\n * // Proper way to initialize and share the Database object\r\n *\r\n * // Loading and initializing the library:\r\n * const pgp = require('pg-promise')({\r\n *     // Initialization Options\r\n * });\r\n *\r\n * // Preparing the connection details:\r\n * const cn = 'postgres://username:password@host:port/database';\r\n *\r\n * // Creating a new database instance from the connection details:\r\n * const db = pgp(cn);\r\n *\r\n * // Exporting the database object for shared use:\r\n * module.exports = db;\r\n */\r\nfunction Database(cn, dc, config) {\r\n\r\n    const dbThis = this,\r\n        $p = config.promise,\r\n        poolConnection = typeof cn === 'string' ? {connectionString: cn} : cn,\r\n        pool = new config.pgp.pg.Pool(poolConnection),\r\n        endMethod = pool.end;\r\n\r\n    let destroyed;\r\n\r\n    pool.end = cb => {\r\n        const res = endMethod.call(pool, cb);\r\n        dbThis.$destroy();\r\n        return res;\r\n    };\r\n\r\n    pool.on('error', onError);\r\n\r\n    /**\r\n     * @method Database#connect\r\n     *\r\n     * @description\r\n     * Acquires a new or existing connection, depending on the current state of the connection pool, and parameter `direct`.\r\n     *\r\n     * This method creates a shared connection for executing a chain of queries against it. The connection must be released\r\n     * in the end of the chain by calling `done()` on the connection object.\r\n     *\r\n     * Method `done` takes one optional parameter - boolean `kill` flag, to signal the connection pool that you want it to kill\r\n     * the physical connection. This flag is ignored for direct connections, as they always close when released.\r\n     *\r\n     * It should not be used just for chaining queries on the same connection, methods {@link Database#task task} and\r\n     * {@link Database#tx tx} (for transactions) are to be used for that. This method is primarily for special cases, like\r\n     * `LISTEN` notifications.\r\n     *\r\n     * **NOTE:** Even though this method exposes a {@link external:Client Client} object via property `client`,\r\n     * you cannot call `client.end()` directly, or it will print an error into the console:\r\n     * `Abnormal client.end() call, due to invalid code or failed server connection.`\r\n     * You should only call method `done()` to release the connection.\r\n     *\r\n     * @param {object} [options]\r\n     * Connection Options.\r\n     *\r\n     * @param {boolean} [options.direct=false]\r\n     * Creates a new connection directly, as a stand-alone {@link external:Client Client} object, bypassing the connection pool.\r\n     *\r\n     * By default, all connections are acquired from the connection pool. But if you set this option, the library will instead\r\n     * create a new {@link external:Client Client} object directly (separately from the pool), and then call its `connect` method.\r\n     *\r\n     * Note that specifically for direct connections, method `done` returns a {@link external:Promise Promise}, because those connections\r\n     * are closed physically, which may take time.\r\n     *\r\n     * **WARNING:**\r\n     *\r\n     * Do not use this option for regular query execution, because it exclusively occupies one physical channel, and it cannot scale.\r\n     * This option is only suitable for global connection usage, such as event listeners.\r\n     *\r\n     * @param {function} [options.onLost]\r\n     * Notification callback of the lost/broken connection, called with the following parameters:\r\n     *  - `err` - the original connectivity error\r\n     *  - `e` - error context object, which contains:\r\n     *    - `cn` - safe connection string/config (with the password hashed);\r\n     *    - `dc` - Database Context, as was used during {@link Database} construction;\r\n     *    - `start` - Date/Time (`Date` type) when the connection was established;\r\n     *    - `client` - {@link external:Client Client} object that has lost the connection.\r\n     *\r\n     * The notification is mostly valuable with `direct: true`, to be able to re-connect direct/permanent connections by calling\r\n     * method {@link Database#connect connect} again.\r\n     *\r\n     * You do not need to call `done` on lost connections, as it happens automatically. However, if you had event listeners\r\n     * set up on the connection's `client` object, you should remove them to avoid leaks:\r\n     *\r\n     * ```js\r\n     * function onLostConnection(err, e) {\r\n     *     e.client.removeListener('my-event', myHandler);\r\n     * }\r\n     * ```\r\n     *\r\n     * For a complete example see $[Robust Listeners].\r\n     *\r\n     * @returns {external:Promise}\r\n     * A promise object that represents the connection result:\r\n     *  - resolves with the complete {@link Database} protocol, extended with:\r\n     *    - property `client` of type {@link external:Client Client} that represents the open connection\r\n     *    - method `done` that must be called in the end, in order to release the connection (returns a {@link external:Promise Promise}\r\n     *      in case of direct connections)\r\n     *    - methods `batch`, `page` and `sequence`, same as inside a {@link Task}\r\n     *  - rejects with a connection-related error when it fails to connect.\r\n     *\r\n     * @see\r\n     * {@link Database#task Database.task},\r\n     * {@link Database#taskIf Database.taskIf},\r\n     * {@link Database#tx Database.tx},\r\n     * {@link Database#txIf Database.txIf}\r\n     *\r\n     * @example\r\n     *\r\n     * let sco; // shared connection object;\r\n     *\r\n     * db.connect()\r\n     *     .then(obj => {\r\n     *         // obj.client = new connected Client object;\r\n     *\r\n     *         sco = obj; // save the connection object;\r\n     *\r\n     *         // execute all the queries you need:\r\n     *         return sco.any('SELECT * FROM Users');\r\n     *     })\r\n     *     .then(data => {\r\n     *         // success\r\n     *     })\r\n     *     .catch(error => {\r\n     *         // error\r\n     *     })\r\n     *     .finally(() => {\r\n     *         // release the connection, if it was successful:\r\n     *         if (sco) {\r\n     *             // if you pass `true` into method done, i.e. done(true),\r\n     *             // it will make the pool kill the physical connection.\r\n     *             sco.done();\r\n     *         }\r\n     *     });\r\n     *\r\n     */\r\n    this.connect = function (options) {\r\n        options = options || {};\r\n        const ctx = createContext();\r\n        ctx.cnOptions = options;\r\n        const self = {\r\n            query(query, values, qrm) {\r\n                if (!ctx.db) {\r\n                    return $p.reject(new Error(npm.text.queryDisconnected));\r\n                }\r\n                return config.$npm.query.call(this, ctx, query, values, qrm);\r\n            },\r\n            done(kill) {\r\n                if (!ctx.db) {\r\n                    throw new Error(npm.text.looseQuery);\r\n                }\r\n                return ctx.disconnect(kill);\r\n            },\r\n            batch(values, opt) {\r\n                return config.$npm.spex.batch.call(this, values, opt);\r\n            },\r\n            page(source, opt) {\r\n                return config.$npm.spex.page.call(this, source, opt);\r\n            },\r\n            sequence(source, opt) {\r\n                return config.$npm.spex.sequence.call(this, source, opt);\r\n            }\r\n        };\r\n        const connection = options.direct ? config.$npm.connect.direct(ctx) : config.$npm.connect.pool(ctx, dbThis);\r\n        return connection\r\n            .then(db => {\r\n                ctx.connect(db);\r\n                self.client = db.client;\r\n                extend(ctx, self);\r\n                return self;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * @method Database#query\r\n     *\r\n     * @description\r\n     * Base query method that executes a generic query, expecting the return data according to parameter `qrm`.\r\n     *\r\n     * It performs the following steps:\r\n     *\r\n     *  1. Validates and formats the query via {@link formatting.format as.format}, according to the `query` and `values` passed in;\r\n     *  2. For a root-level query (against the {@link Database} object), it requests a new connection from the pool;\r\n     *  3. Executes the query;\r\n     *  4. For a root-level query (against the {@link Database} object), it releases the connection back to the pool;\r\n     *  5. Resolves/rejects, according to the data returned from the query and the value of `qrm`.\r\n     *\r\n     * Direct use of this method is not suitable for chaining queries, for performance reasons. It should be done\r\n     * through either task or transaction context, see $[Chaining Queries].\r\n     *\r\n     * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n     *\r\n     * @param {string|function|object} query\r\n     * Query to be executed, which can be any of the following types:\r\n     * - A non-empty query string\r\n     * - A function that returns a query string or another function, i.e. recursive resolution\r\n     *   is supported, passing in `values` as `this`, and as the first parameter.\r\n     * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n     * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n     * - {@link QueryFile} object\r\n     *\r\n     * @param {array|value|function} [values]\r\n     * Query formatting parameter(s), or a function that returns it.\r\n     *\r\n     * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n     * - a single value - to replace all `$1` occurrences\r\n     * - an array of values - to replace all `$1`, `$2`, ... variables\r\n     * - an object - to apply $[Named Parameters] formatting\r\n     *\r\n     * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n     * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n     * as an override for its internal `values`.\r\n     *\r\n     * @param {queryResult} [qrm=queryResult.any]\r\n     * {@link queryResult Query Result Mask}\r\n     *\r\n     * @returns {external:Promise}\r\n     * A promise object that represents the query result according to `qrm`.\r\n     */\r\n    this.query = function (query, values, qrm) {\r\n        const self = this, ctx = createContext();\r\n        return config.$npm.connect.pool(ctx, dbThis)\r\n            .then(db => {\r\n                ctx.connect(db);\r\n                return config.$npm.query.call(self, ctx, query, values, qrm);\r\n            })\r\n            .then(data => {\r\n                ctx.disconnect();\r\n                return data;\r\n            })\r\n            .catch(error => {\r\n                ctx.disconnect();\r\n                return $p.reject(error);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * @member {object} Database#$config\r\n     * @readonly\r\n     * @description\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * Properties available in the object:\r\n     * - `pgp` - instance of the entire library after initialization\r\n     * - `options` - the library's {@link module:pg-promise Initialization Options} object\r\n     * - `promiseLib` - instance of the promise library that's used\r\n     * - `promise` - generic promise interface that uses `promiseLib` via 4 basic methods:\r\n     *   - `promise((resolve, reject) => {})` - to create a new promise\r\n     *   - `promise.resolve(value)` - to resolve with a value\r\n     *   - `promise.reject(reason)` - to reject with a reason\r\n     *   - `promise.all(iterable)` - to resolve an iterable list of promises\r\n     * - `version` - this library's version\r\n     * - `$npm` _(hidden property)_ - internal module cache\r\n     *\r\n     * @example\r\n     *\r\n     * // Using the promise protocol as configured by pg-promise:\r\n     *\r\n     * const $p = db.$config.promise;\r\n     *\r\n     * const resolvedPromise = $p.resolve('some data');\r\n     * const rejectedPromise = $p.reject('some reason');\r\n     *\r\n     * const newPromise = $p((resolve, reject) => {\r\n     *     // call either resolve(data) or reject(reason) here\r\n     * });\r\n     */\r\n    npm.utils.addReadProp(this, '$config', config, true);\r\n\r\n    /**\r\n     * @member {string|object} Database#$cn\r\n     * @readonly\r\n     * @description\r\n     * Database connection, as was passed in during the object's construction.\r\n     *\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * @see Database\r\n     */\r\n    npm.utils.addReadProp(this, '$cn', cn, true);\r\n\r\n    /**\r\n     * @member {*} Database#$dc\r\n     * @readonly\r\n     * @description\r\n     * Database Context, as was passed in during the object's construction.\r\n     *\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * @see Database\r\n     */\r\n    npm.utils.addReadProp(this, '$dc', dc, true);\r\n\r\n    /**\r\n     * @member {external:pg-pool} Database#$pool\r\n     * @readonly\r\n     * @description\r\n     * A $[pg-pool] object associated with the database object, as each {@link Database} creates its own $[pg-pool] instance.\r\n     *\r\n     * This is a hidden property, primarily for integrating type {@link Database} with third-party libraries that support\r\n     * $[pg-pool] directly. Note however, that if you pass the pool object into a library that calls `pool.end()`, you will no longer be able\r\n     * to use this {@link Database} object, and each query method will be rejecting with {@link external:Error Error} =\r\n     * `Connection pool of the database object has been destroyed.`\r\n     *\r\n     * You can also use this object to shut down the pool, by calling `$pool.end()`.\r\n     *\r\n     * For more details see $[Library de-initialization].\r\n     *\r\n     * @see\r\n     * {@link Database}\r\n     * {@link module:pg-promise~end pgp.end}\r\n     *\r\n     * @example\r\n     *\r\n     * // Shutting down the connection pool of this database object,\r\n     * // after all queries have finished in a run-though process:\r\n     *\r\n     * .then(() => {}) // processing the data\r\n     * .catch() => {}) // handling the error\r\n     * .finally(db.$pool.end); // shutting down the pool\r\n     *\r\n     */\r\n    npm.utils.addReadProp(this, '$pool', pool, true);\r\n\r\n    /**\r\n     * @member {function} Database.$destroy\r\n     * @readonly\r\n     * @private\r\n     * @description\r\n     * Permanently shuts down the database object.\r\n     */\r\n    npm.utils.addReadProp(this, '$destroy', () => {\r\n        if (!destroyed) {\r\n            if (!pool.ending) {\r\n                endMethod.call(pool);\r\n            }\r\n            DatabasePool.unregister(dbThis);\r\n            pool.removeListener('error', onError);\r\n            destroyed = true;\r\n        }\r\n    }, true);\r\n\r\n    DatabasePool.register(this);\r\n\r\n    extend(createContext(), this); // extending root protocol;\r\n\r\n    function createContext() {\r\n        return new ConnectionContext({cn, dc, options: config.options});\r\n    }\r\n\r\n    // Optional value-transformation helper:\r\n    function transform(value, cb, thisArg) {\r\n        return typeof cb === 'function' ? value.then(data => cb.call(thisArg, data)) : value;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////\r\n    // Injects additional methods into an access object,\r\n    // extending the protocol's base method 'query'.\r\n    function extend(ctx, obj) {\r\n\r\n        /**\r\n         * @method Database#none\r\n         * @description\r\n         * Executes a query that expects no data to be returned. If the query returns any data,\r\n         * the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<null>}\r\n         * A promise object that represents the query result:\r\n         * - When no records are returned, it resolves with `null`.\r\n         * - When any data is returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No return data was expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.notEmpty queryResultErrorCode.notEmpty}\r\n         */\r\n        obj.none = function (query, values) {\r\n            return obj.query.call(this, query, values, queryResult.none);\r\n        };\r\n\r\n        /**\r\n         * @method Database#one\r\n         * @description\r\n         * Executes a query that expects exactly 1 row to be returned. When 0 or more than 1 rows are returned,\r\n         * the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When 1 row is returned, it resolves with that row as a single object.\r\n         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No data returned from the query.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}\r\n         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `Multiple rows were not expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}\r\n         * - Resolves with the new value, if transformation callback `cb` was specified.\r\n         *\r\n         * @see\r\n         * {@link Database#oneOrNone oneOrNone}\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation:\r\n         * db.one('INSERT INTO Events VALUES($1) RETURNING id', [123], event => event.id)\r\n         *     .then(data => {\r\n         *         // data = a new event id, rather than an object with it\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation + conversion:\r\n         * db.one('SELECT count(*) FROM Users', [], c => +c.count)\r\n         *     .then(count => {\r\n         *         // count = a proper integer value, rather than an object with a string\r\n         *     });\r\n         *\r\n         */\r\n        obj.one = function (query, values, cb, thisArg) {\r\n            const v = obj.query.call(this, query, values, queryResult.one);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database#many\r\n         * @description\r\n         * Executes a query that expects one or more rows to be returned. When the query returns no rows, the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No data returned from the query.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}\r\n         */\r\n        obj.many = function (query, values) {\r\n            return obj.query.call(this, query, values, queryResult.many);\r\n        };\r\n\r\n        /**\r\n         * @method Database#oneOrNone\r\n         * @description\r\n         * Executes a query that expects 0 or 1 rows to be returned. It resolves with the row-object when 1 row is returned,\r\n         * or with `null` when nothing is returned. When the query returns more than 1 row, the method rejects.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with `null`.\r\n         * - When 1 row is returned, it resolves with that row as a single object.\r\n         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `Multiple rows were not expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}\r\n         * - Resolves with the new value, if transformation callback `cb` was specified.\r\n         *\r\n         * @see\r\n         * {@link Database#one one},\r\n         * {@link Database#none none},\r\n         * {@link Database#manyOrNone manyOrNone}\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation:\r\n         * db.oneOrNone('SELECT id FROM Events WHERE type = $1', ['entry'], e => e && e.id)\r\n         *     .then(data => {\r\n         *         // data = the event id or null (rather than object or null)\r\n         *     });\r\n         *\r\n         */\r\n        obj.oneOrNone = function (query, values, cb, thisArg) {\r\n            const v = obj.query.call(this, query, values, queryResult.one | queryResult.none);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database#manyOrNone\r\n         * @description\r\n         * Executes a query that can return any number of rows.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<Array>}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with an empty array.\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         *\r\n         * @see\r\n         * {@link Database#any any},\r\n         * {@link Database#many many},\r\n         * {@link Database#none none}\r\n         *\r\n         */\r\n        obj.manyOrNone = function (query, values) {\r\n            return obj.query.call(this, query, values, queryResult.many | queryResult.none);\r\n        };\r\n\r\n        /**\r\n         * @method Database#any\r\n         * @description\r\n         * Executes a query that can return any number of rows.\r\n         * This is simply a shorter alias for method {@link Database#manyOrNone manyOrNone}.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<Array>}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with an empty array.\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         *\r\n         * @see\r\n         * {@link Database#manyOrNone manyOrNone},\r\n         * {@link Database#map map},\r\n         * {@link Database#each each}\r\n         *\r\n         */\r\n        obj.any = function (query, values) {\r\n            return obj.query.call(this, query, values, queryResult.any);\r\n        };\r\n\r\n        /**\r\n         * @method Database#result\r\n         * @description\r\n         * Executes a query without any expectation for the return data, and resolves with the\r\n         * original $[Result] object when successful.\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - resolves with the original $[Result] object (by default);\r\n         * - resolves with the new value, if transformation callback `cb` was specified.\r\n         *\r\n         * @example\r\n         *\r\n         * // use of value transformation:\r\n         * // deleting rows and returning the number of rows deleted\r\n         * db.result('DELETE FROM Events WHERE id = $1', [123], r => r.rowCount)\r\n         *     .then(data => {\r\n         *         // data = number of rows that were deleted\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // use of value transformation:\r\n         * // getting only column details from a table\r\n         * db.result('SELECT * FROM Users LIMIT 0', null, r => r.fields)\r\n         *     .then(data => {\r\n         *         // data = array of column descriptors\r\n         *     });\r\n         *\r\n         */\r\n        obj.result = function (query, values, cb, thisArg) {\r\n            const v = obj.query.call(this, query, values, resultQuery);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database#multiResult\r\n         * @description\r\n         * Executes a multi-query string, without any expectation for the return data, and resolves with an array\r\n         * of the original $[Result] objects when successful.\r\n         *\r\n         * The operation is atomic, i.e. all queries are executed in a single transaction, unless there are explicit\r\n         * `BEGIN/COMMIT` commands included in the query string to divide it into multiple transactions.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Multi-query string to be executed, which can be any of the following types:\r\n         * - A non-empty string that can contain any number of queries\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<external:Result[]>}\r\n         *\r\n         * @see {@link Database#multi multi}\r\n         *\r\n         */\r\n        obj.multiResult = function (query, values) {\r\n            return obj.query.call(this, query, values, multiResultQuery);\r\n        };\r\n\r\n        /**\r\n         * @method Database#multi\r\n         * @description\r\n         * Executes a multi-query string, without any expectation for the return data, and resolves with an array\r\n         * of arrays of rows when successful.\r\n         *\r\n         * The operation is atomic, i.e. all queries are executed in a single transaction, unless there are explicit\r\n         * `BEGIN/COMMIT` commands included in the query string to divide it into multiple transactions.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Multi-query string to be executed, which can be any of the following types:\r\n         * - A non-empty string that can contain any number of queries\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise<Array<Array>>}\r\n         *\r\n         * @see {@link Database#multiResult multiResult}\r\n         *\r\n         * @example\r\n         *\r\n         * // Get data from 2 tables in a single request:\r\n         * const [users, products] = await db.multi('SELECT * FROM users;SELECT * FROM products');\r\n         *\r\n         */\r\n        obj.multi = function (query, values) {\r\n            return obj.query.call(this, query, values, multiResultQuery)\r\n                .then(data => data.map(a => a.rows));\r\n        };\r\n\r\n        /**\r\n         * @method Database#stream\r\n         * @description\r\n         * Custom data streaming, with the help of $[pg-query-stream].\r\n         *\r\n         * This method doesn't work with the $[Native Bindings], and if option `pgNative`\r\n         * is set, it will reject with `Streaming doesn't work with Native Bindings.`\r\n         *\r\n         * @param {QueryStream} qs\r\n         * Stream object of type $[QueryStream].\r\n         *\r\n         * @param {Database.streamInitCB} initCB\r\n         * Stream initialization callback.\r\n         *\r\n         * It is invoked with the same `this` context as the calling method.\r\n         *\r\n         * @returns {external:Promise}\r\n         * Result of the streaming operation.\r\n         *\r\n         * Once the streaming has finished successfully, the method resolves with\r\n         * `{processed, duration}`:\r\n         * - `processed` - total number of rows processed;\r\n         * - `duration` - streaming duration, in milliseconds.\r\n         *\r\n         * Possible rejections messages:\r\n         * - `Invalid or missing stream object.`\r\n         * - `Invalid stream state.`\r\n         * - `Invalid or missing stream initialization callback.`\r\n         */\r\n        obj.stream = function (qs, init) {\r\n            return obj.query.call(this, qs, init, streamQuery);\r\n        };\r\n\r\n        /**\r\n         * @method Database#func\r\n         * @description\r\n         * Executes a database function that returns a table, abbreviating the full syntax\r\n         * of `query('SELECT * FROM $1:alias($2:csv)', [funcName, values], qrm)`.\r\n         *\r\n         * @param {string} funcName\r\n         * Name of the function to be executed.\r\n         * When it is not same-case, or contains extended symbols, it is double-quoted, as per the `:alias` filter,\r\n         * which also supports `.`, to auto-split into a composite name.\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Parameters for the function - one value | array of values | function returning value(s).\r\n         *\r\n         * @param {queryResult} [qrm=queryResult.any] - {@link queryResult Query Result Mask}.\r\n         *\r\n         * @returns {external:Promise}\r\n         *\r\n         * A promise object as returned from method {@link Database#query query}, according to parameter `qrm`.\r\n         *\r\n         * @see\r\n         * {@link Database#query query},\r\n         * {@link Database#proc proc}\r\n         */\r\n        obj.func = function (funcName, values, qrm) {\r\n            return obj.query.call(this, {entity: funcName, type: 'func'}, values, qrm);\r\n        };\r\n\r\n        /**\r\n         * @method Database#proc\r\n         * @description\r\n         * Executes a stored procedure by name, abbreviating the full syntax of\r\n         * `oneOrNone('CALL $1:alias($2:csv)', [procName, values], cb, thisArg)`.\r\n         *\r\n         * **NOTE:** This method uses the new `CALL` syntax that requires PostgreSQL v11 or later.\r\n         *\r\n         * @param {string} procName\r\n         * Name of the stored procedure to be executed.\r\n         * When it is not same-case, or contains extended symbols, it is double-quoted, as per the `:alias` filter,\r\n         * which also supports `.`, to auto-split into a composite SQL name.\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Parameters for the procedure - one value | array of values | function returning value(s).\r\n         *\r\n         * @param {function} [cb]\r\n         * Value-transformation callback, to allow in-line value change.\r\n         * When specified, the returned value replaces the original one.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * When the procedure takes output parameters, a single object is returned, with\r\n         * properties for the output values. Otherwise, the method resolves with `null`.\r\n         * And if the value-transformation callback is provided, it overrides the result.\r\n         *\r\n         * @see\r\n         * {@link Database#func func}\r\n         */\r\n        obj.proc = function (procName, values, cb, thisArg) {\r\n            const v = obj.query.call(this, {\r\n                entity: procName,\r\n                type: 'proc'\r\n            }, values, queryResult.one | queryResult.none);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database#map\r\n         * @description\r\n         * Creates a new array with the results of calling a provided function on every element in the array of rows\r\n         * resolved by method {@link Database#any any}.\r\n         *\r\n         * It is a convenience method, to reduce the following code:\r\n         *\r\n         * ```js\r\n         * db.any(query, values)\r\n         *     .then(data => {\r\n         *         return data.map((row, index, data) => {\r\n         *              // return a new element\r\n         *         });\r\n         *     });\r\n         * ```\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} values\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} cb\r\n         * Function that produces an element of the new array, taking three arguments:\r\n         * - `row` - the current row object being processed in the array\r\n         * - `index` - the index of the current row being processed in the array\r\n         * - `data` - the original array of rows resolved by method {@link Database#any any}\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the callback.\r\n         *\r\n         * @returns {external:Promise<Array>}\r\n         * Resolves with the new array of values returned from the callback.\r\n         *\r\n         * @see\r\n         * {@link Database#any any},\r\n         * {@link Database#each each},\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map Array.map}\r\n         *\r\n         * @example\r\n         *\r\n         * db.map('SELECT id FROM Users WHERE status = $1', ['active'], row => row.id)\r\n         *     .then(data => {\r\n         *         // data = array of active user id-s\r\n         *     })\r\n         *     .catch(error => {\r\n         *        // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * db.tx(t => {\r\n         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], row => {\r\n         *        return t.none('UPDATE Events SET checked = $1 WHERE userId = $2', [true, row.id]);\r\n         *     }).then(t.batch);\r\n         * })\r\n         *     .then(data => {\r\n         *         // success\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // Build a list of active users, each with the list of user events:\r\n         * db.task(t => {\r\n         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], user => {\r\n         *         return t.any('SELECT * FROM Events WHERE userId = $1', user.id)\r\n         *             .then(events=> {\r\n         *                 user.events = events;\r\n         *                 return user;\r\n         *             });\r\n         *     }).then(t.batch);\r\n         * })\r\n         *     .then(data => {\r\n         *         // success\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.map = function (query, values, cb, thisArg) {\r\n            return obj.any.call(this, query, values)\r\n                .then(data => data.map(cb, thisArg));\r\n        };\r\n\r\n        /**\r\n         * @method Database#each\r\n         * @description\r\n         * Executes a provided function once per array element, for an array of rows resolved by method {@link Database#any any}.\r\n         *\r\n         * It is a convenience method to reduce the following code:\r\n         *\r\n         * ```js\r\n         * db.any(query, values)\r\n         *     .then(data => {\r\n         *         data.forEach((row, index, data) => {\r\n         *              // process the row\r\n         *         });\r\n         *         return data;\r\n         *     });\r\n         * ```\r\n         *\r\n         * When receiving a multi-query result, only the last result is processed, ignoring the rest.\r\n         *\r\n         * @param {string|function|object} query\r\n         * Query to be executed, which can be any of the following types:\r\n         * - A non-empty query string\r\n         * - A function that returns a query string or another function, i.e. recursive resolution\r\n         *   is supported, passing in `values` as `this`, and as the first parameter.\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value|function} [values]\r\n         * Query formatting parameter(s), or a function that returns it.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} cb\r\n         * Function to execute for each row, taking three arguments:\r\n         * - `row` - the current row object being processed in the array\r\n         * - `index` - the index of the current row being processed in the array\r\n         * - `data` - the array of rows resolved by method {@link Database#any any}\r\n         *\r\n         * @param {*} [thisArg]\r\n         * Value to use as `this` when executing the callback.\r\n         *\r\n         * @returns {external:Promise<Array<Object>>}\r\n         * Resolves with the original array of rows.\r\n         *\r\n         * @see\r\n         * {@link Database#any any},\r\n         * {@link Database#map map},\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach Array.forEach}\r\n         *\r\n         * @example\r\n         *\r\n         * db.each('SELECT id, code, name FROM Events', [], row => {\r\n         *     row.code = parseInt(row.code);\r\n         * })\r\n         *     .then(data => {\r\n         *         // data = array of events, with 'code' converted into integer\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.each = function (query, values, cb, thisArg) {\r\n            return obj.any.call(this, query, values)\r\n                .then(data => {\r\n                    data.forEach(cb, thisArg);\r\n                    return data;\r\n                });\r\n        };\r\n\r\n        /**\r\n         * @method Database#task\r\n         * @description\r\n         * Executes a callback function with automatically managed connection.\r\n         *\r\n         * When invoked on the root {@link Database} object, the method allocates the connection from the pool,\r\n         * executes the callback, and once finished - releases the connection back to the pool.\r\n         * However, when invoked inside another task or transaction, the method reuses the parent connection.\r\n         *\r\n         * This method should be used whenever executing more than one query at once, so the allocated connection\r\n         * is reused between all queries, and released only after the task has finished (see $[Chaining Queries]).\r\n         *\r\n         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods\r\n         * {@link Task#batch batch}, {@link Task#page page}, {@link Task#sequence sequence}, plus property {@link Task#ctx ctx} -\r\n         * the task context object. See class {@link Task} for more details.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the task (see $[tags]).\r\n         *\r\n         * @param {function} cb\r\n         * Task callback function, to return the result that will determine either success or failure for the operation.\r\n         *\r\n         * The function can be either the first of the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#taskIf taskIf},\r\n         * {@link Database#tx tx},\r\n         * $[tags],\r\n         * $[Chaining Queries]\r\n         *\r\n         * @example\r\n         *\r\n         * db.task('my-task', t => {\r\n         *         // t.ctx = task context object\r\n         *\r\n         *         return t.one('SELECT id FROM Users WHERE name = $1', 'John')\r\n         *             .then(user => {\r\n         *                 return t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *             });\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using an ES7 syntax for the callback:\r\n         * db.task('my-task', async t {\r\n         *         // t.ctx = task context object\r\n         *\r\n         *         const user = await t.one('SELECT id FROM Users WHERE name = $1', 'John');\r\n         *         return t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.task = function () {\r\n            const args = npm.pubUtils.taskArgs(arguments);\r\n            assert(args.options, ['tag']);\r\n            return taskProcessor.call(this, args, false);\r\n        };\r\n\r\n        /**\r\n         * @method Database#taskIf\r\n         * @description\r\n         * Executes a conditional task that results in an actual new {@link Database#task task}, if either condition is met or\r\n         * when it is necessary (on the top level), or else it reuses the current connection context.\r\n         *\r\n         * The default condition is `not in task or transaction`, to start a task only if currently not inside another task or transaction,\r\n         * which is the same as calling the following:\r\n         *\r\n         * ```js\r\n         * db.taskIf({cnd: t => !t.ctx}, cb => {})\r\n         * ```\r\n         *\r\n         * It can be useful, if you want to simplify/reduce the task + log events footprint, by creating new tasks only when necessary.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the task/transaction (see $[tags]).\r\n         *\r\n         * @param {boolean|function} [options.cnd]\r\n         * Condition for creating a ({@link Database#task task}), if it is met.\r\n         * It can be either a simple boolean, or a callback function that takes the task context as `this` and as the first parameter.\r\n         *\r\n         * Default condition (when it is not specified):\r\n         *\r\n         * ```js\r\n         * {cnd: t => !t.ctx}\r\n         * ```\r\n         *\r\n         * @param {function} cb\r\n         * Task callback function, to return the result that will determine either success or failure for the operation.\r\n         *\r\n         * The function can be either the first or the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#task Database.task},\r\n         * {@link Database#tx Database.tx},\r\n         * {@link Database#txIf Database.txIf},\r\n         * {@link TaskContext}\r\n         *\r\n         */\r\n        obj.taskIf = function () {\r\n            const args = npm.pubUtils.taskArgs(arguments);\r\n            assert(args.options, ['tag', 'cnd']);\r\n            try {\r\n                let cnd = args.options.cnd;\r\n                if ('cnd' in args.options) {\r\n                    cnd = typeof cnd === 'function' ? cnd.call(obj, obj) : !!cnd;\r\n                } else {\r\n                    cnd = !obj.ctx; // create task, if it is the top level\r\n                }\r\n                // reusable only if condition fails, and not top-level:\r\n                args.options.reusable = !cnd && !!obj.ctx;\r\n            } catch (e) {\r\n                return $p.reject(e);\r\n            }\r\n            return taskProcessor.call(this, args, false);\r\n        };\r\n\r\n        /**\r\n         * @method Database#tx\r\n         * @description\r\n         * Executes a callback function as a transaction, with automatically managed connection.\r\n         *\r\n         * When invoked on the root {@link Database} object, the method allocates the connection from the pool,\r\n         * executes the callback, and once finished - releases the connection back to the pool.\r\n         * However, when invoked inside another task or transaction, the method reuses the parent connection.\r\n         *\r\n         * A transaction wraps a regular {@link Database#task task} into additional queries:\r\n         * - it executes `BEGIN` just before invoking the callback function\r\n         * - it executes `COMMIT`, if the callback didn't throw any error or return a rejected promise\r\n         * - it executes `ROLLBACK`, if the callback did throw an error or return a rejected promise\r\n         * - it executes corresponding `SAVEPOINT` commands when the method is called recursively.\r\n         *\r\n         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods\r\n         * {@link Task#batch batch}, {@link Task#page page}, {@link Task#sequence sequence}, plus property {@link Task#ctx ctx} -\r\n         * the transaction context object. See class {@link Task} for more details.\r\n         *\r\n         * Note that transactions should be chosen over tasks only where necessary, because unlike regular tasks,\r\n         * transactions are blocking operations.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the transaction (see $[tags]).\r\n         *\r\n         * @param {txMode.TransactionMode} [options.mode]\r\n         * Transaction Configuration Mode - extends the transaction-opening command with additional configuration.\r\n         *\r\n         * @param {function} cb\r\n         * Transaction callback function, to return the result that will determine either success or failure for the operation.\r\n         *\r\n         * The function can be either the first of the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#task Database.task},\r\n         * {@link Database#taskIf Database.taskIf},\r\n         * {@link TaskContext},\r\n         * $[tags],\r\n         * $[Chaining Queries]\r\n         *\r\n         * @example\r\n         *\r\n         * db.tx('my-transaction', t => {\r\n         *         // t.ctx = transaction context object\r\n         *\r\n         *         return t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25])\r\n         *             .then(user => {\r\n         *                 return t.batch([\r\n         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']),\r\n         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'login'])\r\n         *                 ]);\r\n         *             });\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using an ES7 syntax for the callback:\r\n         * db.tx('my-transaction', async t {\r\n         *         // t.ctx = transaction context object\r\n         *\r\n         *         const user = await t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25]);\r\n         *         return t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']);\r\n         *     })\r\n         *     .then(data => {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.tx = function () {\r\n            const args = npm.pubUtils.taskArgs(arguments);\r\n            assert(args.options, ['tag', 'mode']);\r\n            return taskProcessor.call(this, args, true);\r\n        };\r\n\r\n        /**\r\n         * @method Database#txIf\r\n         * @description\r\n         * Executes a conditional transaction that results in an actual transaction ({@link Database#tx tx}), if the condition is met,\r\n         * or else it executes a regular {@link Database#task task}.\r\n         *\r\n         * The default condition is `not in transaction`, to start a transaction only if currently not in transaction,\r\n         * or else start a task, which is the same as calling the following:\r\n         *\r\n         * ```js\r\n         * db.txIf({cnd: t => !t.ctx || !t.ctx.inTransaction}, cb => {})\r\n         * ```\r\n         *\r\n         * It is useful when you want to avoid $[Nested Transactions] - savepoints.\r\n         *\r\n         * @param {string|number|Object} [options]\r\n         * This parameter is optional, and presumed skipped when the first parameter is a function (`cb` parameter).\r\n         *\r\n         * When it is of type `string` or `number`, it is assumed to be option `tag` passed in directly. Otherwise,\r\n         * it is expected to be an object with options as listed below.\r\n         *\r\n         * @param {} [options.tag]\r\n         * Traceable context for the task/transaction (see $[tags]).\r\n         *\r\n         * @param {txMode.TransactionMode} [options.mode]\r\n         * Transaction Configuration Mode - extends the transaction-opening command with additional configuration.\r\n         *\r\n         * @param {boolean|function} [options.cnd]\r\n         * Condition for opening a transaction ({@link Database#tx tx}), if it is met, or a {@link Database#task task} when the condition is not met.\r\n         * It can be either a simple boolean, or a callback function that takes the task/tx context as `this` and as the first parameter.\r\n         *\r\n         * Default condition (when it is not specified):\r\n         *\r\n         * ```js\r\n         * {cnd: t => !t.ctx || !t.ctx.inTransaction}\r\n         * ```\r\n         *\r\n         * @param {boolean|function} [options.reusable=false]\r\n         * When `cnd` is/returns false, reuse context of the current task/transaction, if one exists.\r\n         * It can be either a simple boolean, or a callback function that takes the task/tx context as `this`\r\n         * and as the first parameter.\r\n         *\r\n         * By default, when `cnd` is/returns false, the method creates a new task. This option tells\r\n         * the method to reuse the current task/transaction context, and not create a new task.\r\n         *\r\n         * This option is ignored when executing against the top level of the protocol, because on\r\n         * that level, if no transaction is suddenly needed, a new task becomes necessary.\r\n         *\r\n         * @param {function} cb\r\n         * Transaction/task callback function, to return the result that will determine either\r\n         * success or failure for the operation.\r\n         *\r\n         * The function can be either the first or the second parameter passed into the method.\r\n         *\r\n         * It also can be an ES7 `async` function.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object with the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database#task Database.task},\r\n         * {@link Database#taskIf Database.taskIf},\r\n         * {@link Database#tx Database.tx},\r\n         * {@link TaskContext}\r\n         */\r\n        obj.txIf = function () {\r\n            const args = npm.pubUtils.taskArgs(arguments);\r\n            assert(args.options, ['tag', 'mode', 'cnd', 'reusable']);\r\n            try {\r\n                let cnd;\r\n                if ('cnd' in args.options) {\r\n                    cnd = args.options.cnd;\r\n                    cnd = typeof cnd === 'function' ? cnd.call(obj, obj) : !!cnd;\r\n                } else {\r\n                    cnd = !obj.ctx || !obj.ctx.inTransaction;\r\n                }\r\n                args.options.cnd = cnd;\r\n                const reusable = args.options.reusable;\r\n                args.options.reusable = !cnd && obj.ctx && typeof reusable === 'function' ? reusable.call(obj, obj) : !!reusable;\r\n            } catch (e) {\r\n                return $p.reject(e);\r\n            }\r\n            return taskProcessor.call(this, args, args.options.cnd);\r\n        };\r\n\r\n        // Task method;\r\n        // Resolves with result from the callback function;\r\n        function taskProcessor(params, isTX) {\r\n\r\n            if (typeof params.cb !== 'function') {\r\n                return $p.reject(new TypeError('Callback function is required.'));\r\n            }\r\n\r\n            if (params.options.reusable) {\r\n                return config.$npm.task.callback(obj.ctx, obj, params.cb, config);\r\n            }\r\n\r\n            const taskCtx = ctx.clone(); // task context object;\r\n            if (isTX) {\r\n                taskCtx.txLevel = taskCtx.txLevel >= 0 ? (taskCtx.txLevel + 1) : 0;\r\n            }\r\n            taskCtx.inTransaction = taskCtx.txLevel >= 0;\r\n            taskCtx.level = taskCtx.level >= 0 ? (taskCtx.level + 1) : 0;\r\n            taskCtx.cb = params.cb; // callback function;\r\n            taskCtx.mode = params.options.mode; // transaction mode;\r\n            if (this !== obj) {\r\n                taskCtx.context = this; // calling context object;\r\n            }\r\n\r\n            const tsk = new config.$npm.task.Task(taskCtx, params.options.tag, isTX, config);\r\n            taskCtx.taskCtx = tsk.ctx;\r\n            extend(taskCtx, tsk);\r\n\r\n            if (taskCtx.db) {\r\n                // reuse existing connection;\r\n                npm.utils.addReadProp(tsk.ctx, 'useCount', taskCtx.db.useCount);\r\n                addServerVersion(tsk.ctx, taskCtx.db.client);\r\n                return config.$npm.task.execute(taskCtx, tsk, isTX, config);\r\n            }\r\n\r\n            // connection required;\r\n            return config.$npm.connect.pool(taskCtx, dbThis)\r\n                .then(db => {\r\n                    taskCtx.connect(db);\r\n                    npm.utils.addReadProp(tsk.ctx, 'useCount', db.useCount);\r\n                    addServerVersion(tsk.ctx, db.client);\r\n                    return config.$npm.task.execute(taskCtx, tsk, isTX, config);\r\n                })\r\n                .then(data => {\r\n                    taskCtx.disconnect();\r\n                    return data;\r\n                })\r\n                .catch(error => {\r\n                    taskCtx.disconnect();\r\n                    return $p.reject(error);\r\n                });\r\n        }\r\n\r\n        function addServerVersion(target, client) {\r\n            // Exclude else-case from coverage, because it can only occur with Native Bindings.\r\n            // istanbul ignore else\r\n            if (client.serverVersion) {\r\n                npm.utils.addReadProp(target, 'serverVersion', client.serverVersion);\r\n            }\r\n        }\r\n\r\n        // extending the protocol;\r\n        Events.extend(ctx.options, obj, ctx.dc);\r\n    }\r\n\r\n}\r\n\r\n// this event only happens when the connection is lost physically,\r\n// which cannot be tested automatically; removing from coverage:\r\n// istanbul ignore next\r\nfunction onError(err) {\r\n    // this client was never seen by pg-promise, which\r\n    // can happen if it failed to initialize\r\n    if (!err.client.$ctx) {\r\n        return;\r\n    }\r\n    const ctx = err.client.$ctx;\r\n    Events.error(ctx.options, err, {\r\n        cn: npm.utils.getSafeConnection(ctx.cn),\r\n        dc: ctx.dc\r\n    });\r\n}\r\n\r\nmodule.exports = config => {\r\n    const npmLocal = config.$npm;\r\n    npmLocal.connect = npmLocal.connect || npm.connect(config);\r\n    npmLocal.query = npmLocal.query || npm.query(config);\r\n    npmLocal.task = npmLocal.task || npm.task(config);\r\n    return Database;\r\n};\r\n\r\n/**\r\n * @callback Database.streamInitCB\r\n * @description\r\n * Stream initialization callback, used by {@link Database#stream Database.stream}.\r\n *\r\n * @param {external:Stream} stream\r\n * Stream object to initialize streaming.\r\n *\r\n * @example\r\n * const QueryStream = require('pg-query-stream');\r\n * const JSONStream = require('JSONStream');\r\n *\r\n * // you can also use pgp.as.format(query, values, options)\r\n * // to format queries properly, via pg-promise;\r\n * const qs = new QueryStream('SELECT * FROM users');\r\n *\r\n * db.stream(qs, stream => {\r\n *         // initiate streaming into the console:\r\n *         stream.pipe(JSONStream.stringify()).pipe(process.stdout);\r\n *     })\r\n *     .then(data => {\r\n *         console.log('Total rows processed:', data.processed,\r\n *           'Duration in milliseconds:', data.duration);\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n */\r\n\r\n/**\r\n * @external Stream\r\n * @see https://nodejs.org/api/stream.html\r\n */\r\n\r\n/**\r\n * @external pg-pool\r\n * @alias pg-pool\r\n * @see https://github.com/brianc/node-pg-pool\r\n */\r\n\r\n/**\r\n * @external Result\r\n * @see https://node-postgres.com/api/result\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/database.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryResultError, queryResultErrorCode} = __webpack_require__(/*! ./query-result-error */ \"./node_modules/pg-promise/lib/errors/query-result-error.js\");\r\nconst {PreparedStatementError} = __webpack_require__(/*! ./prepared-statement-error */ \"./node_modules/pg-promise/lib/errors/prepared-statement-error.js\");\r\nconst {ParameterizedQueryError} = __webpack_require__(/*! ./parameterized-query-error */ \"./node_modules/pg-promise/lib/errors/parameterized-query-error.js\");\r\nconst {QueryFileError} = __webpack_require__(/*! ./query-file-error */ \"./node_modules/pg-promise/lib/errors/query-file-error.js\");\r\n\r\n/**\r\n * @namespace errors\r\n * @description\r\n * Error types namespace, available as `pgp.errors`, before and after initializing the library.\r\n *\r\n * @property {function} PreparedStatementError\r\n * {@link errors.PreparedStatementError PreparedStatementError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link PreparedStatement}.\r\n *\r\n * @property {function} ParameterizedQueryError\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link ParameterizedQuery}.\r\n *\r\n * @property {function} QueryFileError\r\n * {@link errors.QueryFileError QueryFileError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link QueryFile}.\r\n *\r\n * @property {function} QueryResultError\r\n * {@link errors.QueryResultError QueryResultError} class constructor.\r\n *\r\n * Represents all result-specific errors from query methods.\r\n *\r\n * @property {errors.queryResultErrorCode} queryResultErrorCode\r\n * Error codes `enum` used by class {@link errors.QueryResultError QueryResultError}.\r\n *\r\n */\r\n\r\nmodule.exports = {\r\n    QueryResultError,\r\n    queryResultErrorCode,\r\n    PreparedStatementError,\r\n    ParameterizedQueryError,\r\n    QueryFileError\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/errors/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/errors/parameterized-query-error.js":
/*!*************************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/parameterized-query-error.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryFileError} = __webpack_require__(/*! ./query-file-error */ \"./node_modules/pg-promise/lib/errors/query-file-error.js\");\r\n\r\nconst npm = {\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @class errors.ParameterizedQueryError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used\r\n * explicitly or implicitly (via a simple `{text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Parameterized Query object.\r\n *\r\n * @see ParameterizedQuery\r\n */\r\nclass ParameterizedQueryError extends Error {\r\n    constructor(error, pq) {\r\n        const isQueryFileError = error instanceof QueryFileError;\r\n        const message = isQueryFileError ? 'Failed to initialize \\'text\\' from a QueryFile.' : error;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        if (isQueryFileError) {\r\n            this.error = error;\r\n        }\r\n        this.result = pq;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.ParameterizedQueryError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nParameterizedQueryError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        gap2 = npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'ParameterizedQueryError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'result: {',\r\n            gap2 + 'text: ' + npm.utils.toJson(this.result.text),\r\n            gap2 + 'values: ' + npm.utils.toJson(this.result.values),\r\n            gap1 + '}'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(ParameterizedQueryError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {ParameterizedQueryError};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/errors/parameterized-query-error.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/errors/prepared-statement-error.js":
/*!************************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/prepared-statement-error.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryFileError} = __webpack_require__(/*! ./query-file-error */ \"./node_modules/pg-promise/lib/errors/query-file-error.js\");\r\n\r\nconst npm = {\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @class errors.PreparedStatementError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.PreparedStatementError PreparedStatementError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link PreparedStatement}, whether it is used\r\n * explicitly or implicitly (via a simple `{name, text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PreparedStatementError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link PreparedStatement} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Prepared Statement object.\r\n *\r\n * @see PreparedStatement\r\n */\r\nclass PreparedStatementError extends Error {\r\n    constructor(error, ps) {\r\n        const isQueryFileError = error instanceof QueryFileError;\r\n        const message = isQueryFileError ? 'Failed to initialize \\'text\\' from a QueryFile.' : error;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        if (isQueryFileError) {\r\n            this.error = error;\r\n        }\r\n        this.result = ps;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.PreparedStatementError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPreparedStatementError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        gap2 = npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'PreparedStatementError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'result: {',\r\n            gap2 + 'name: ' + npm.utils.toJson(this.result.name),\r\n            gap2 + 'text: ' + npm.utils.toJson(this.result.text),\r\n            gap2 + 'values: ' + npm.utils.toJson(this.result.values),\r\n            gap1 + '}'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(PreparedStatementError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {PreparedStatementError};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/errors/prepared-statement-error.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/errors/query-file-error.js":
/*!****************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/query-file-error.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    minify: __webpack_require__(/*! pg-minify */ \"./node_modules/pg-minify/lib/index.js\")\r\n};\r\n\r\n/**\r\n * @class errors.QueryFileError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.QueryFileError QueryFileError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors related to {@link QueryFile}.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryFileError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {string} file\r\n * File path/name that was passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {object} options\r\n * Set of options that was used by the {@link QueryFile} object.\r\n *\r\n * @property {SQLParsingError} error\r\n * Internal $[SQLParsingError] object.\r\n *\r\n * It is set only when the error was thrown by $[pg-minify] while parsing the SQL file.\r\n *\r\n * @see QueryFile\r\n *\r\n */\r\nclass QueryFileError extends Error {\r\n    constructor(error, qf) {\r\n        const isSqlError = error instanceof npm.minify.SQLParsingError;\r\n        const message = isSqlError ? 'Failed to parse the SQL.' : error.message;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        if (isSqlError) {\r\n            this.error = error;\r\n        }\r\n        this.file = qf.file;\r\n        this.options = qf.options;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.QueryFileError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFileError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'QueryFileError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'options: ' + npm.utils.toJson(this.options),\r\n            gap1 + 'file: \"' + this.file + '\"'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryFileError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {QueryFileError};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/errors/query-file-error.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/errors/query-result-error.js":
/*!******************************************************************!*\
  !*** ./node_modules/pg-promise/lib/errors/query-result-error.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    text: __webpack_require__(/*! ../text */ \"./node_modules/pg-promise/lib/text.js\")\r\n};\r\n\r\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\r\nconst queryResultErrorCode = {\r\n    /** No data returned from the query. */\r\n    noData: 0,\r\n\r\n    /** No return data was expected. */\r\n    notEmpty: 1,\r\n\r\n    /** Multiple rows were not expected. */\r\n    multiple: 2\r\n};\r\n\r\nconst errorMessages = [\r\n    {name: 'noData', message: npm.text.noData},\r\n    {name: 'notEmpty', message: npm.text.notEmpty},\r\n    {name: 'multiple', message: npm.text.multiple}\r\n];\r\n\r\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error(err, e) {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */\r\nclass QueryResultError extends Error {\r\n    constructor(code, result, query, values) {\r\n        const message = errorMessages[code].message;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.code = code;\r\n        this.result = result;\r\n        this.query = query;\r\n        this.values = values;\r\n        this.received = result.rows.length;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryResultError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'QueryResultError {',\r\n            gap1 + 'code: queryResultErrorCode.' + errorMessages[this.code].name,\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'received: ' + this.received,\r\n            gap1 + 'query: ' + (typeof this.query === 'string' ? '\"' + this.query + '\"' : npm.utils.toJson(this.query))\r\n        ];\r\n    if (this.values !== undefined) {\r\n        lines.push(gap1 + 'values: ' + npm.utils.toJson(this.values));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryResultError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    QueryResultError,\r\n    queryResultErrorCode\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/errors/query-result-error.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/events.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-promise/lib/events.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColorConsole} = __webpack_require__(/*! ./utils/color */ \"./node_modules/pg-promise/lib/utils/color.js\");\r\n\r\nconst npm = {\r\n    main: __webpack_require__(/*! ./ */ \"./node_modules/pg-promise/lib/index.js\"),\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/////////////////////////////////\r\n// Client notification helpers;\r\nclass Events {\r\n\r\n    /**\r\n     * @event connect\r\n     * @description\r\n     * Global notification of acquiring a new database connection from the connection pool, i.e. a virtual connection.\r\n     *\r\n     * However, for direct calls to method {@link Database#connect Database.connect} with parameter `{direct: true}`,\r\n     * this event represents a physical connection.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {{}} e Event Properties\r\n     *\r\n     * @param {external:Client} e.client\r\n     * $[pg.Client] object that represents the connection.\r\n     *\r\n     * @param {*} e.dc\r\n     * Database Context that was used when creating the database object (see {@link Database}).\r\n     *\r\n     * @param {number} e.useCount\r\n     * Number of times the connection has been previously used, starting with 0, for a freshly\r\n     * allocated physical connection.\r\n     *\r\n     * This parameter is always 0 for direct connections (created by calling {@link Database#connect Database.connect}\r\n     * with parameter `{direct: true}`).\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     connect(e) {\r\n     *         const cp = e.client.connectionParameters;\r\n     *         console.log('Connected to database:', cp.database);\r\n     *     }\r\n     *\r\n     * };\r\n     */\r\n    static connect(ctx, client, useCount) {\r\n        if (typeof ctx.options.connect === 'function') {\r\n            try {\r\n                ctx.options.connect({client, dc: ctx.dc, useCount});\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // cannot allow unhandled errors while connecting to the database,\r\n                // as it will break the connection logic;\r\n                Events.unexpected('connect', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event disconnect\r\n     * @description\r\n     * Global notification of releasing a database connection back to the connection pool, i.e. releasing the virtual connection.\r\n     *\r\n     * However, when releasing a direct connection (created by calling {@link Database#connect Database.connect} with parameter\r\n     * `{direct: true}`), this event represents a physical disconnection.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {{}} e Event Properties\r\n     *\r\n     * @param {external:Client} e.client - $[pg.Client] object that represents connection with the database.\r\n     *\r\n     * @param {*} e.dc - Database Context that was used when creating the database object (see {@link Database}).\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     disconnect(e) {\r\n     *        const cp = e.client.connectionParameters;\r\n     *        console.log('Disconnecting from database:', cp.database);\r\n     *     }\r\n     *\r\n     * };\r\n     */\r\n    static disconnect(ctx, client) {\r\n        if (typeof ctx.options.disconnect === 'function') {\r\n            try {\r\n                ctx.options.disconnect({client, dc: ctx.dc});\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // cannot allow unhandled errors while disconnecting from the database,\r\n                // as it will break the disconnection logic;\r\n                Events.unexpected('disconnect', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event query\r\n     * @description\r\n     *\r\n     * Global notification of a query that's about to execute.\r\n     *\r\n     * Notification happens just before the query execution. And if the handler throws an error, the query execution\r\n     * will be rejected with that error.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     query(e) {\r\n     *         console.log('QUERY:', e.query);\r\n     *     }\r\n     * };\r\n     */\r\n    static query(options, context) {\r\n        if (typeof options.query === 'function') {\r\n            try {\r\n                options.query(context);\r\n            } catch (e) {\r\n                // throwing an error during event 'query'\r\n                // will result in a reject for the request.\r\n                return e instanceof Error ? e : new npm.utils.InternalError(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event receive\r\n     * @description\r\n     * Global notification of any data received from the database, coming from a regular query or from a stream.\r\n     *\r\n     * The event is fired before the data reaches the client, and it serves two purposes:\r\n     *  - Providing selective data logging for debugging;\r\n     *  - Pre-processing data before it reaches the client.\r\n     *\r\n     * **NOTES:**\r\n     * - If you alter the size of `data` directly or through the `result` object, it may affect `QueryResultMask`\r\n     *   validation for regular queries, which is executed right after.\r\n     * - Any data pre-processing needs to be fast here, to avoid performance penalties.\r\n     * - If the event handler throws an error, the original request will be rejected with that error.\r\n     *\r\n     * For methods {@link Database#multi Database.multi} and {@link Database#multiResult Database.multiResult},\r\n     * this event is called for every result that's returned. And for method {@link Database#stream Database.stream},\r\n     * the event occurs for every record.\r\n     *\r\n     * @param {{}} e Event Properties\r\n     *\r\n     * @param {Array<Object>} e.data\r\n     * Array of received objects/rows.\r\n     *\r\n     * If any of those objects are modified during notification, the client will receive the modified data.\r\n     *\r\n     * @param {external:Result} e.result\r\n     * - Original $[Result] object, if the data is from a non-stream query, in which case `data = result.rows`.\r\n     *   For single-query requests, $[Result] object is extended with property `duration` - number of milliseconds\r\n     *   it took to send the query, execute it and get the result back.\r\n     * - It is `undefined` when the data comes from a stream (method {@link Database#stream Database.stream}).\r\n     *\r\n     * @param {EventContext} e.ctx\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * // Example below shows the fastest way to camelize all column names.\r\n     * // NOTE: The example does not do processing for nested JSON objects.\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     receive(e) {\r\n     *         camelizeColumns(e.data);\r\n     *     }\r\n     * };\r\n     *\r\n     * function camelizeColumns(data) {\r\n     *     const tmp = data[0];\r\n     *     for (const prop in tmp) {\r\n     *         const camel = pgp.utils.camelize(prop);\r\n     *         if (!(camel in tmp)) {\r\n     *             for (let i = 0; i < data.length; i++) {\r\n     *                 const d = data[i];\r\n     *                 d[camel] = d[prop];\r\n     *                 delete d[prop];\r\n     *             }\r\n     *         }\r\n     *     }\r\n     * }\r\n     */\r\n    static receive(options, data, result, ctx) {\r\n        if (typeof options.receive === 'function') {\r\n            try {\r\n                options.receive({data, result, ctx});\r\n            } catch (e) {\r\n                // throwing an error during event 'receive'\r\n                // will result in a reject for the request.\r\n                return e instanceof Error ? e : new npm.utils.InternalError(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event task\r\n     * @description\r\n     * Global notification of a task start / finish events, as executed via\r\n     * {@link Database#task Database.task} or {@link Database#taskIf Database.taskIf}.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     task(e) {\r\n     *         if (e.ctx.finish) {\r\n     *             // this is a task->finish event;\r\n     *             console.log('Duration:', e.ctx.duration);\r\n     *             if (e.ctx.success) {\r\n     *                 // e.ctx.result = resolved data;\r\n     *             } else {\r\n     *                 // e.ctx.result = error/rejection reason;\r\n     *             }\r\n     *         } else {\r\n     *             // this is a task->start event;\r\n     *             console.log('Start Time:', e.ctx.start);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     */\r\n    static task(options, context) {\r\n        if (typeof options.task === 'function') {\r\n            try {\r\n                options.task(context);\r\n            } catch (e) {\r\n                // silencing the error, to avoid breaking the task;\r\n                Events.unexpected('task', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event transact\r\n     * @description\r\n     * Global notification of a transaction start / finish events, as executed via {@link Database#tx Database.tx}\r\n     * or {@link Database#txIf Database.txIf}.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     transact(e) {\r\n     *         if (e.ctx.finish) {\r\n     *             // this is a transaction->finish event;\r\n     *             console.log('Duration:', e.ctx.duration);\r\n     *             if (e.ctx.success) {\r\n     *                 // e.ctx.result = resolved data;\r\n     *             } else {\r\n     *                 // e.ctx.result = error/rejection reason;\r\n     *             }\r\n     *         } else {\r\n     *             // this is a transaction->start event;\r\n     *             console.log('Start Time:', e.ctx.start);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     */\r\n    static transact(options, context) {\r\n        if (typeof options.transact === 'function') {\r\n            try {\r\n                options.transact(context);\r\n            } catch (e) {\r\n                // silencing the error, to avoid breaking the transaction;\r\n                Events.unexpected('transact', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event error\r\n     * @description\r\n     * Global notification of every error encountered by this library.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {*} err\r\n     * The error encountered, of the same value and type as it was reported.\r\n     *\r\n     * @param {EventContext} e\r\n     * Event Context Object.\r\n     *\r\n     * @example\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     error(err, e) {\r\n     *\r\n     *         if (e.cn) {\r\n     *             // this is a connection-related error\r\n     *             // cn = safe connection details passed into the library:\r\n     *             //      if password is present, it is masked by #\r\n     *         }\r\n     *\r\n     *         if (e.query) {\r\n     *             // query string is available\r\n     *             if (e.params) {\r\n     *                 // query parameters are available\r\n     *             }\r\n     *         }\r\n     *\r\n     *         if (e.ctx) {\r\n     *             // occurred inside a task or transaction\r\n     *         }\r\n     *       }\r\n     * };\r\n     *\r\n     */\r\n    static error(options, err, context) {\r\n        if (typeof options.error === 'function') {\r\n            try {\r\n                options.error(err, context);\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // throwing unhandled errors while handling an error\r\n                // notification is simply not acceptable.\r\n                Events.unexpected('error', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event extend\r\n     * @description\r\n     * Extends {@link Database} protocol with custom methods and properties.\r\n     *\r\n     * Override this event to extend the existing access layer with your own functions and\r\n     * properties best suited for your application.\r\n     *\r\n     * The extension thus becomes available across all access layers:\r\n     *\r\n     * - Within the root/default database protocol;\r\n     * - Inside transactions, including nested ones;\r\n     * - Inside tasks, including nested ones.\r\n     *\r\n     * All pre-defined methods and properties are read-only, so you will get an error,\r\n     * if you try overriding them.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {object} obj - Protocol object to be extended.\r\n     *\r\n     * @param {*} dc - Database Context that was used when creating the {@link Database} object.\r\n     *\r\n     * @see $[pg-promise-demo]\r\n     *\r\n     * @example\r\n     *\r\n     * // In the example below we extend the protocol with function `addImage`\r\n     * // that will insert one binary image and resolve with the new record id.\r\n     *\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     extend(obj, dc) {\r\n     *         // dc = database context;\r\n     *         obj.addImage = data => {\r\n     *             // adds a new image and resolves with its record id:\r\n     *             return obj.one('INSERT INTO images(data) VALUES($1) RETURNING id', data, a => a.id);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     * @example\r\n     *\r\n     * // It is best to extend the protocol by adding whole entity repositories to it as shown in the following example.\r\n     * // For a comprehensive example see https://github.com/vitaly-t/pg-promise-demo\r\n     *\r\n     * class UsersRepository {\r\n     *     constructor(rep, pgp) {\r\n     *         this.rep = rep;\r\n     *         this.pgp = pgp;\r\n     *     }\r\n     *\r\n     *     add(name) {\r\n     *         return this.rep.one('INSERT INTO users(name) VALUES($1) RETURNING id', name, a => a.id);\r\n     *     }\r\n     *\r\n     *     remove(id) {\r\n     *         return this.rep.none('DELETE FROM users WHERE id = $1', id);\r\n     *     }\r\n     * }\r\n     *\r\n     * // Overriding 'extend' event;\r\n     * const initOptions = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     extend(obj, dc) {\r\n     *         // dc = database context;\r\n     *         obj.users = new UsersRepository(obj, pgp);\r\n     *         // You can set different repositories based on `dc`\r\n     *     }\r\n     * };\r\n     *\r\n     * // Usage example:\r\n     * db.users.add('John', true)\r\n     *     .then(id => {\r\n     *         // user added successfully, id = new user's id\r\n     *     })\r\n     *     .catch(error => {\r\n     *         // failed to add the user;\r\n     *     });\r\n     *\r\n     */\r\n    static extend(options, obj, dc) {\r\n        if (typeof options.extend === 'function') {\r\n            try {\r\n                options.extend.call(obj, obj, dc);\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // the result of throwing unhandled errors while\r\n                // extending the protocol would be unpredictable.\r\n                Events.unexpected('extend', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @event unexpected\r\n     * @param {string} event - unhandled event name.\r\n     * @param {string|Error} e - unhandled error.\r\n     * @private\r\n     */\r\n    static unexpected(event, e) {\r\n        // If you should ever get here, your app is definitely broken, and you need to fix\r\n        // your event handler to prevent unhandled errors during event notifications.\r\n        //\r\n        // Console output is suppressed when running tests, to avoid polluting test output\r\n        // with error messages that are intentional and of no value to the test.\r\n\r\n        /* istanbul ignore if */\r\n        if (!npm.main.suppressErrors) {\r\n            const stack = e instanceof Error ? e.stack : new Error().stack;\r\n            ColorConsole.error(`Unexpected error in '${event}' event handler.\\n${stack}\\n`);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {Events};\r\n\r\n/**\r\n * @typedef EventContext\r\n * @description\r\n * This common type is used for the following events: {@link event:query query}, {@link event:receive receive},\r\n * {@link event:error error}, {@link event:task task} and {@link event:transact transact}.\r\n *\r\n * @property {string|object} cn\r\n *\r\n * Set only for event {@link event:error error}, and only when the error is connection-related.\r\n *\r\n * It is a safe copy of the connection string/object that was used when initializing `db` - the database instance.\r\n *\r\n * If the original connection contains a password, the safe copy contains it masked with symbol `#`, so the connection\r\n * can be logged safely, without exposing the password.\r\n *\r\n * @property {*} dc\r\n * Database Context that was used when creating the database object (see {@link Database}). It is set for all events.\r\n *\r\n * @property {string|object} query\r\n *\r\n * Query string/object that was passed into the query method. This property is only set during events {@link event:query query},\r\n * {@link event:receive receive} and {@link event:error error} (only when the error is query-related).\r\n *\r\n * @property {external:Client} client\r\n *\r\n * $[pg.Client] object that represents the connection. It is set for all events, except for event {@link event:error error}\r\n * when it is connection-related. Note that sometimes the value may be unset when the connection is lost.\r\n *\r\n * @property {*} params - Formatting parameters for the query.\r\n *\r\n * It is set only for events {@link event:query query}, {@link event:receive receive} and {@link event:error error}, and only\r\n * when it is needed for logging. This library takes an extra step in figuring out when formatting parameters are of any value\r\n * to the event logging:\r\n * - when an error occurs related to the query formatting, event {@link event:error error} is sent with the property set.\r\n * - when initialization parameter `pgFormat` is used, and all query formatting is done within the $[PG] library, events\r\n * {@link event:query query} and {@link event:receive receive} will have this property set also, since this library no longer\r\n * handles the query formatting.\r\n *\r\n * When this parameter is not set, it means one of the two things:\r\n * - there were no parameters passed into the query method;\r\n * - property `query` of this object already contains all the formatting values in it, so logging only the query is sufficient.\r\n *\r\n * @property {TaskContext} ctx\r\n * _Task/Transaction Context_ object.\r\n *\r\n * This property is always set for events {@link event:task task} and {@link event:transact transact}, while for events\r\n * {@link event:query query}, {@link event:receive receive} and {@link event:error error} it is only set when they occur\r\n * inside a task or transaction.\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/events.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/formatting.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-promise/lib/formatting.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assert} = __webpack_require__(/*! ./assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    pgUtils: __webpack_require__(/*! pg/lib/utils */ \"./node_modules/pg/lib/utils.js\"),\r\n    patterns: __webpack_require__(/*! ./patterns */ \"./node_modules/pg-promise/lib/patterns.js\"),\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n// Format Modification Flags;\r\nconst fmFlags = {\r\n    raw: 1, // Raw-Text variable\r\n    alias: 2, // SQL Alias\r\n    name: 4, // SQL Name/Identifier\r\n    json: 8, // JSON modifier\r\n    csv: 16, // CSV modifier\r\n    value: 32 // escaped, but without ''\r\n};\r\n\r\n// Format Modification Map;\r\nconst fmMap = {\r\n    '^': fmFlags.raw,\r\n    ':raw': fmFlags.raw,\r\n    ':alias': fmFlags.alias,\r\n    '~': fmFlags.name,\r\n    ':name': fmFlags.name,\r\n    ':json': fmFlags.json,\r\n    ':csv': fmFlags.csv,\r\n    ':list': fmFlags.csv,\r\n    ':value': fmFlags.value,\r\n    '#': fmFlags.value\r\n};\r\n\r\n// Global symbols for Custom Type Formatting:\r\nconst ctfSymbols = {\r\n    toPostgres: Symbol.for('ctf.toPostgres'),\r\n    rawType: Symbol.for('ctf.rawType')\r\n};\r\n\r\nconst maxVariable = 100000; // maximum supported variable is '$100000'\r\n\r\n////////////////////////////////////////////////////\r\n// Converts a single value into its Postgres format.\r\nfunction formatValue({value, fm, cc, options}) {\r\n\r\n    if (typeof value === 'function') {\r\n        return formatValue({value: resolveFunc(value, cc), fm, cc});\r\n    }\r\n\r\n    const ctf = getCTF(value); // Custom Type Formatting\r\n    if (ctf) {\r\n        fm |= ctf.rawType ? fmFlags.raw : 0;\r\n        return formatValue({value: resolveFunc(ctf.toPostgres, value), fm, cc});\r\n    }\r\n\r\n    const isRaw = !!(fm & fmFlags.raw);\r\n    fm &= ~fmFlags.raw;\r\n\r\n    switch (fm) {\r\n        case fmFlags.alias:\r\n            return $as.alias(value);\r\n        case fmFlags.name:\r\n            return $as.name(value);\r\n        case fmFlags.json:\r\n            return $as.json(value, isRaw);\r\n        case fmFlags.csv:\r\n            return $to.csv(value, options);\r\n        case fmFlags.value:\r\n            return $as.value(value);\r\n        default:\r\n            break;\r\n    }\r\n\r\n    if (isNull(value)) {\r\n        throwIfRaw(isRaw);\r\n        return 'null';\r\n    }\r\n\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return $to.text(value, isRaw);\r\n        case 'boolean':\r\n            return $to.bool(value);\r\n        case 'number':\r\n        case 'bigint':\r\n            return $to.number(value);\r\n        case 'symbol':\r\n            throw new TypeError(`Type Symbol has no meaning for PostgreSQL: ${value.toString()}`);\r\n        default:\r\n            if (value instanceof Date) {\r\n                return $to.date(value, isRaw);\r\n            }\r\n            if (Array.isArray(value)) {\r\n                return $to.array(value, options);\r\n            }\r\n            if (Buffer.isBuffer(value)) {\r\n                return $to.buffer(value, isRaw);\r\n            }\r\n            return $to.json(value, isRaw);\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Converts array of values into PostgreSQL Array Constructor: array[...], as per PostgreSQL documentation:\r\n// http://www.postgresql.org/docs/9.6/static/arrays.html\r\n//\r\n// Arrays of any depth/dimension are supported.\r\n//\r\n// Top-level empty arrays are formatted as literal '{}' to avoid the necessity of explicit type casting,\r\n// as the server cannot automatically infer the type of empty non-literal array.\r\nfunction formatArray(array, options) {\r\n    const loop = a => '[' + a.map(value => Array.isArray(value) ? loop(value) : formatValue({\r\n        value,\r\n        options\r\n    })).join() + ']';\r\n    const prefix = options && options.capSQL ? 'ARRAY' : 'array';\r\n    return array.length ? (prefix + loop(array)) : '\\'{}\\'';\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////\r\n// Formats array/object/value as a list of comma-separated values.\r\nfunction formatCSV(values, options) {\r\n    if (Array.isArray(values)) {\r\n        return values.map(value => formatValue({value, options})).join();\r\n    }\r\n    if (typeof values === 'object' && values !== null) {\r\n        return Object.keys(values).map(v => formatValue({value: values[v], options})).join();\r\n    }\r\n    return values === undefined ? '' : formatValue({value: values, options});\r\n}\r\n\r\n///////////////////////////////\r\n// Query formatting helpers;\r\nconst formatAs = {\r\n\r\n    object({query, obj, raw, options}) {\r\n        options = options && typeof options === 'object' ? options : {};\r\n        return query.replace(npm.patterns.namedParameters, name => {\r\n            const v = formatAs.stripName(name.replace(/^\\$[{(<[/]|[\\s})>\\]/]/g, ''), raw),\r\n                c = npm.utils.getIfHas(obj, v.name);\r\n            if (!c.valid) {\r\n                throw new Error(`Invalid property name '${v.name}'.`);\r\n            }\r\n            if (c.has) {\r\n                return formatValue({value: c.value, fm: v.fm, cc: c.target, options});\r\n            }\r\n            if (v.name === 'this') {\r\n                return formatValue({value: obj, fm: v.fm, options});\r\n            }\r\n            if ('def' in options) {\r\n                const d = options.def, value = typeof d === 'function' ? d.call(obj, v.name, obj) : d;\r\n                return formatValue({value, fm: v.fm, cc: obj, options});\r\n            }\r\n            if (options.partial) {\r\n                return name;\r\n            }\r\n            // property must exist as the object's own or inherited;\r\n            throw new Error(`Property '${v.name}' doesn't exist.`);\r\n        });\r\n    },\r\n\r\n    array({query, array, raw, options}) {\r\n        options = options && typeof options === 'object' ? options : {};\r\n        return query.replace(npm.patterns.multipleValues, name => {\r\n            const v = formatAs.stripName(name.substr(1), raw);\r\n            const idx = v.name - 1;\r\n            if (idx >= maxVariable) {\r\n                throw new RangeError(`Variable $${v.name} exceeds supported maximum of $${maxVariable}`);\r\n            }\r\n            if (idx < array.length) {\r\n                return formatValue({value: array[idx], fm: v.fm, options});\r\n            }\r\n            if ('def' in options) {\r\n                const d = options.def, value = typeof d === 'function' ? d.call(array, idx, array) : d;\r\n                return formatValue({value, fm: v.fm, options});\r\n            }\r\n            if (options.partial) {\r\n                return name;\r\n            }\r\n            throw new RangeError(`Variable $${v.name} out of range. Parameters array length: ${array.length}`);\r\n        });\r\n    },\r\n\r\n    value({query, value, raw, options}) {\r\n        return query.replace(npm.patterns.singleValue, name => {\r\n            const v = formatAs.stripName(name, raw);\r\n            return formatValue({value, fm: v.fm, options});\r\n        });\r\n    },\r\n\r\n    stripName(name, raw) {\r\n        const mod = name.match(npm.patterns.hasValidModifier);\r\n        if (mod) {\r\n            return {\r\n                name: name.substr(0, mod.index),\r\n                fm: fmMap[mod[0]] | (raw ? fmFlags.raw : 0)\r\n            };\r\n        }\r\n        return {\r\n            name,\r\n            fm: raw ? fmFlags.raw : null\r\n        };\r\n    }\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Simpler check for null/undefined;\r\nfunction isNull(value) {\r\n    return value === undefined || value === null;\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////\r\n// Checks if the value supports Custom Type Formatting,\r\n// to return {toPostgres, rawType}, if it does, or null otherwise.\r\nfunction getCTF(value) {\r\n    if (!isNull(value)) {\r\n        let toPostgres = value[ctfSymbols.toPostgres], rawType = !!value[ctfSymbols.rawType];\r\n        if (typeof toPostgres !== 'function') {\r\n            toPostgres = value.toPostgres;\r\n            rawType = !!value.rawType;\r\n        }\r\n        if (typeof toPostgres === 'function') {\r\n            if (toPostgres.constructor.name !== 'Function') {\r\n                throw new Error('CTF does not support asynchronous toPostgres functions.');\r\n            }\r\n            return {toPostgres, rawType};\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/////////////////////////////////////////\r\n// Wraps a text string in single quotes;\r\nfunction wrapText(text) {\r\n    return `'${text}'`;\r\n}\r\n\r\n////////////////////////////////////////////////\r\n// Replaces each single-quote symbol ' with two,\r\n// for compliance with PostgreSQL strings.\r\nfunction safeText(text) {\r\n    return text.replace(/'/g, '\\'\\'');\r\n}\r\n\r\n/////////////////////////////////////////////\r\n// Throws an exception, if flag 'raw' is set.\r\nfunction throwIfRaw(raw) {\r\n    if (raw) {\r\n        throw new TypeError('Values null/undefined cannot be used as raw text.');\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n// Recursively resolves parameter-function, with an optional Calling Context.\r\nfunction resolveFunc(value, cc) {\r\n    while (typeof value === 'function') {\r\n        if (value.constructor.name !== 'Function') {\r\n            // Constructor name for asynchronous functions have different names:\r\n            // - 'GeneratorFunction' for ES6 generators\r\n            // - 'AsyncFunction' for ES7 async functions\r\n            throw new Error('Cannot use asynchronous functions with query formatting.');\r\n        }\r\n        value = value.call(cc, cc);\r\n    }\r\n    return value;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n// It implements two types of formatting, depending on the 'values' passed:\r\n//\r\n// 1. format '$1, $2, etc', when 'values' is of type string, boolean, number, date,\r\n//    function or null (or an array of the same types, plus undefined values);\r\n// 2. format $*propName*, when 'values' is an object (not null and not Date),\r\n//    and where * is any of the supported open-close pairs: {}, (), [], <>, //\r\n//\r\nfunction formatQuery(query, values, raw, options) {\r\n    if (typeof query !== 'string') {\r\n        throw new TypeError('Parameter \\'query\\' must be a text string.');\r\n    }\r\n    const ctf = getCTF(values);\r\n    if (ctf) {\r\n        // Custom Type Formatting\r\n        return formatQuery(query, resolveFunc(ctf.toPostgres, values), raw || ctf.rawType, options);\r\n    }\r\n    if (typeof values === 'object' && values !== null) {\r\n        if (Array.isArray(values)) {\r\n            // $1, $2,... formatting to be applied;\r\n            return formatAs.array({query, array: values, raw, options});\r\n        }\r\n        if (!(values instanceof Date || values instanceof Buffer)) {\r\n            // $*propName* formatting to be applied;\r\n            return formatAs.object({query, obj: values, raw, options});\r\n        }\r\n    }\r\n    // $1 formatting to be applied, if values != undefined;\r\n    return values === undefined ? query : formatAs.value({query, value: values, raw, options});\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n// Formats a function or stored procedure call query;\r\nfunction formatEntity(entity, values, {capSQL, type}) {\r\n    let prefix = type === 'func' ? 'select * from' : 'call';\r\n    if (capSQL) {\r\n        prefix = prefix.toUpperCase();\r\n    }\r\n    return `${prefix} ${$as.alias(entity)}(${formatCSV(values, {capSQL})})`;\r\n}\r\n\r\nfunction formatSqlName(name) {\r\n    return `\"${name.replace(/\"/g, '\"\"')}\"`;\r\n}\r\n\r\n/**\r\n * @namespace formatting\r\n * @description\r\n * Namespace for all query-formatting functions, available from `pgp.as` before and after initializing the library.\r\n *\r\n * @property {formatting.ctf} ctf\r\n * Namespace for symbols used by $[Custom Type Formatting].\r\n *\r\n * @property {function} alias\r\n * {@link formatting.alias alias} - formats an SQL alias.\r\n *\r\n * @property {function} name\r\n * {@link formatting.name name} - formats an SQL Name/Identifier.\r\n *\r\n * @property {function} text\r\n * {@link formatting.text text} - formats a text string.\r\n *\r\n * @property {function} number\r\n * {@link formatting.number number} - formats a number.\r\n *\r\n * @property {function} buffer\r\n * {@link formatting.buffer buffer} - formats a `Buffer` object.\r\n *\r\n * @property {function} value\r\n * {@link formatting.value value} - formats text as an open value.\r\n *\r\n * @property {function} json\r\n * {@link formatting.json json} - formats any value as JSON.\r\n *\r\n * @property {function} array\r\n * {@link formatting.array array} - formats an array of any depth.\r\n *\r\n * @property {function} csv\r\n * {@link formatting.csv csv} - formats an array as a list of comma-separated values.\r\n *\r\n * @property {function} func\r\n * {@link formatting.func func} - formats the value returned from a function.\r\n *\r\n * @property {function} format\r\n * {@link formatting.format format} - formats a query, according to parameters.\r\n *\r\n */\r\nconst $as = {\r\n\r\n    /**\r\n     * @namespace formatting.ctf\r\n     * @description\r\n     * Namespace for ES6 symbols used by $[Custom Type Formatting], available from `pgp.as.ctf` before and after initializing the library.\r\n     *\r\n     * It was added to avoid explicit/enumerable extension of types that need to be used as formatting parameters, to keep their type signature intact.\r\n     *\r\n     * @property {external:Symbol} toPostgres\r\n     * Property name for the $[Custom Type Formatting] callback function `toPostgres`.\r\n     *\r\n     * @property {external:Symbol} rawType\r\n     * Property name for the $[Custom Type Formatting] flag `rawType`.\r\n     *\r\n     * @example\r\n     * const ctf = pgp.as.ctf; // Custom Type Formatting symbols\r\n     *\r\n     * class MyType {\r\n     *     constructor() {\r\n     *         this[ctf.rawType] = true; // set it only when toPostgres returns a pre-formatted result\r\n     *     }\r\n     *\r\n     *     [ctf.toPostgres](self) {\r\n     *         // self = this\r\n     *\r\n     *         // return the custom/actual value here\r\n     *     }\r\n     * }\r\n     *\r\n     * const a = new MyType();\r\n     *\r\n     * const s = pgp.as.format('$1', a); // will be custom-formatted\r\n     */\r\n    ctf: ctfSymbols,\r\n\r\n    /**\r\n     * @method formatting.text\r\n     * @description\r\n     * Converts a value into PostgreSQL text presentation, escaped as required.\r\n     *\r\n     * Escaping the result means:\r\n     *  1. Every single-quote (apostrophe) is replaced with two\r\n     *  2. The resulting text is wrapped in apostrophes\r\n     *\r\n     * @param {value|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * If the `value` resolves as `null` or `undefined`, while `raw`=`true`,\r\n     * it will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the resulting text.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * - `null` string, if the `value` resolves as `null` or `undefined`\r\n     * - escaped result of `value.toString()`, if the `value` isn't a string\r\n     * - escaped string version, if `value` is a string.\r\n     *\r\n     *  The result is not escaped, if `raw` was passed in as `true`.\r\n     */\r\n    text(value, raw) {\r\n        value = resolveFunc(value);\r\n        if (isNull(value)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (typeof value !== 'string') {\r\n            value = value.toString();\r\n        }\r\n        return $to.text(value, raw);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.name\r\n     * @description\r\n     * Properly escapes an sql name or identifier, fixing double-quote symbols and wrapping the result in double quotes.\r\n     *\r\n     * Implements a safe way to format $[SQL Names] that neutralizes SQL Injection.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:name` or `~`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {string|function|array|object} name\r\n     * SQL name or identifier, or a function that returns it.\r\n     *\r\n     * The name must be at least 1 character long.\r\n     *\r\n     * If `name` doesn't resolve into a non-empty string, it throws {@link external:TypeError TypeError} = `Invalid sql name: ...`\r\n     *\r\n     * If the `name` contains only a single `*` (trailing spaces are ignored), then `name` is returned exactly as is (unescaped).\r\n     *\r\n     * - If `name` is an Array, it is formatted as a comma-separated list of $[SQL Names]\r\n     * - If `name` is a non-Array object, its keys are formatted as a comma-separated list of $[SQL Names]\r\n     *\r\n     * Passing in an empty array/object will throw {@link external:Error Error} = `Cannot retrieve sql names from an empty array/object.`\r\n     *\r\n     * @returns {string}\r\n     * The SQL Name/Identifier, properly escaped for compliance with the PostgreSQL standard for $[SQL Names] and identifiers.\r\n     *\r\n     * @see\r\n     * {@link formatting.alias alias},\r\n     * {@link formatting.format format}\r\n     *\r\n     * @example\r\n     *\r\n     * // automatically list object properties as sql names:\r\n     * format('INSERT INTO table(${this~}) VALUES(${one}, ${two})', {\r\n     *     one: 1,\r\n     *     two: 2\r\n     * });\r\n     * //=> INSERT INTO table(\"one\",\"two\") VALUES(1, 2)\r\n     *\r\n     */\r\n    name(name) {\r\n        name = resolveFunc(name);\r\n        if (name) {\r\n            if (typeof name === 'string') {\r\n                return /^\\s*\\*(\\s*)$/.test(name) ? name : formatSqlName(name);\r\n            }\r\n            if (typeof name === 'object') {\r\n                const keys = Array.isArray(name) ? name : Object.keys(name);\r\n                if (!keys.length) {\r\n                    throw new Error('Cannot retrieve sql names from an empty array/object.');\r\n                }\r\n                return keys.map(value => {\r\n                    if (!value || typeof value !== 'string') {\r\n                        throw new Error(`Invalid sql name: ${npm.utils.toJson(value)}`);\r\n                    }\r\n                    return formatSqlName(value);\r\n                }).join();\r\n            }\r\n        }\r\n        throw new TypeError(`Invalid sql name: ${npm.utils.toJson(name)}`);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.alias\r\n     * @description\r\n     * Simpler (non-verbose) version of method {@link formatting.name name}, to handle only a regular string-identifier\r\n     * that's mostly used as an SQL alias, i.e. it doesn't support `*` or an array/object of names, which in the context of\r\n     * an SQL alias would be incorrect. However, it supports `.` as name-separator, for simpler escaping of composite names.\r\n     *\r\n     * The surrounding double quotes are not added when the alias uses a simple syntax:\r\n     *  - it is a same-case single word, without spaces\r\n     *  - it can contain underscores, and can even start with them\r\n     *  - it can contain digits and `$`, but cannot start with those\r\n     *\r\n     * The method will automatically split the string with `.`, to support composite SQL names.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:alias`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {string|function} name\r\n     * SQL alias name, or a function that returns it.\r\n     *\r\n     * The name must be at least 1 character long. And it can contain `.`, to split into multiple SQL names.\r\n     *\r\n     * If `name` doesn't resolve into a non-empty string, it throws {@link external:TypeError TypeError} = `Invalid sql alias: ...`\r\n     *\r\n     * @returns {string}\r\n     * The SQL alias, properly escaped for compliance with the PostgreSQL standard for $[SQL Names] and identifiers.\r\n     *\r\n     * @see\r\n     * {@link formatting.name name},\r\n     * {@link formatting.format format}\r\n     *\r\n     */\r\n    alias(name) {\r\n        name = resolveFunc(name);\r\n        if (name && typeof name === 'string') {\r\n            return name.split('.')\r\n                .filter(f => f)\r\n                .map(a => {\r\n                    const m = a.match(/^([a-z_][a-z0-9_$]*|[A-Z_][A-Z0-9_$]*)$/);\r\n                    if (m && m[0] === a) {\r\n                        return a;\r\n                    }\r\n                    return `\"${a.replace(/\"/g, '\"\"')}\"`;\r\n                }).join('.');\r\n        }\r\n        throw new TypeError(`Invalid sql alias: ${npm.utils.toJson(name)}`);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.value\r\n     * @description\r\n     * Represents an open value, one to be formatted according to its type, properly escaped, but without surrounding quotes for text types.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:value` or `#`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {value|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * If `value` resolves as `null` or `undefined`, it will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`\r\n     *\r\n     * @returns {string}\r\n     * Formatted and properly escaped string, but without surrounding quotes for text types.\r\n     *\r\n     * @see {@link formatting.format format}\r\n     *\r\n     */\r\n    value(value) {\r\n        value = resolveFunc(value);\r\n        if (isNull(value)) {\r\n            throw new TypeError('Open values cannot be null or undefined.');\r\n        }\r\n        return safeText(formatValue({value, fm: fmFlags.raw}));\r\n    },\r\n\r\n    /**\r\n     * @method formatting.buffer\r\n     * @description\r\n     * Converts an object of type `Buffer` into a hex string compatible with PostgreSQL type `bytea`.\r\n     *\r\n     * @param {Buffer|function} obj\r\n     * Object to be converted, or a function that returns one.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to wrap the resulting string in quotes.\r\n     *\r\n     * The generated hex string doesn't need to be escaped.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    buffer(obj, raw) {\r\n        obj = resolveFunc(obj);\r\n        if (isNull(obj)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (obj instanceof Buffer) {\r\n            return $to.buffer(obj, raw);\r\n        }\r\n        throw new TypeError(`${wrapText(obj)} is not a Buffer object.`);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.bool\r\n     * @description\r\n     * Converts a truthy value into PostgreSQL boolean presentation.\r\n     *\r\n     * @param {boolean|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    bool(value) {\r\n        value = resolveFunc(value);\r\n        if (isNull(value)) {\r\n            return 'null';\r\n        }\r\n        return $to.bool(value);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.date\r\n     * @description\r\n     * Converts a `Date`-type value into PostgreSQL date/time presentation,\r\n     * wrapped in quotes (unless flag `raw` is set).\r\n     *\r\n     * @param {Date|function} d\r\n     * Date object to be converted, or a function that returns one.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the value.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    date(d, raw) {\r\n        d = resolveFunc(d);\r\n        if (isNull(d)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (d instanceof Date) {\r\n            return $to.date(d, raw);\r\n        }\r\n        throw new TypeError(`${wrapText(d)} is not a Date object.`);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.number\r\n     * @description\r\n     * Converts a numeric value into its PostgreSQL number presentation, with support\r\n     * for special values of `NaN`, `+Infinity` and `-Infinity`.\r\n     *\r\n     * @param {number|bigint|function} num\r\n     * Number to be converted, or a function that returns one.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    number(num) {\r\n        num = resolveFunc(num);\r\n        if (isNull(num)) {\r\n            return 'null';\r\n        }\r\n        const t = typeof num;\r\n        if (t !== 'number' && t !== 'bigint') {\r\n            throw new TypeError(`${wrapText(num)} is not a number.`);\r\n        }\r\n        return $to.number(num);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.array\r\n     * @description\r\n     * Converts an array of values into its PostgreSQL presentation as an Array-Type constructor string: `array[]`.\r\n     *\r\n     * Top-level empty arrays are formatted as literal `{}`, to avoid the necessity of explicit type casting,\r\n     * as the server cannot automatically infer type of empty non-literal array.\r\n     *\r\n     * @param {Array|function} arr\r\n     * Array to be converted, or a function that returns one.\r\n     *\r\n     * @param {{}} [options]\r\n     * Array-Formatting Options.\r\n     *\r\n     * @param {boolean} [options.capSQL=false]\r\n     * When `true`, outputs `ARRAY` instead of `array`.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    array(arr, options) {\r\n        options = assert(options, ['capSQL']);\r\n        arr = resolveFunc(arr);\r\n        if (isNull(arr)) {\r\n            return 'null';\r\n        }\r\n        if (Array.isArray(arr)) {\r\n            return $to.array(arr, options);\r\n        }\r\n        throw new TypeError(`${wrapText(arr)} is not an Array object.`);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.csv\r\n     * @description\r\n     * Converts a single value or an array of values into a CSV (comma-separated values) string, with all values formatted\r\n     * according to their JavaScript type.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:csv` or its alias `:list`.\r\n     *\r\n     * When `values` is an object that's not `null` or `Array`, its properties are enumerated for the actual values.\r\n     *\r\n     * @param {Array|Object|value|function} values\r\n     * Value(s) to be converted, or a function that returns it.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * @see {@link formatting.format format}\r\n     */\r\n    csv(values) {\r\n        return $to.csv(values);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.json\r\n     * @description\r\n     * Converts any value into JSON (includes `BigInt` support), and returns it as a valid string,\r\n     * with single-quote symbols fixed, unless flag `raw` is set.\r\n     *\r\n     * When formatting a query, a variable makes use of this method via modifier `:json`. See method {@link formatting.format format}.\r\n     *\r\n     * @param {*} data\r\n     * Object/value to be converted, or a function that returns it.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the result.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * @see {@link formatting.format format}\r\n     */\r\n    json(data, raw) {\r\n        data = resolveFunc(data);\r\n        if (isNull(data)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        return $to.json(data, raw);\r\n    },\r\n\r\n    /**\r\n     * @method formatting.func\r\n     * @description\r\n     * Calls the function to get the actual value, and then formats the result according to its type + `raw` flag.\r\n     *\r\n     * @param {function} func\r\n     * Function to be called, with support for nesting.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the result.\r\n     *\r\n     * @param {*} [cc]\r\n     * Calling Context: `this` + the only value to be passed into the function on all nested levels.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    func(func, raw, cc) {\r\n        if (isNull(func)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (typeof func !== 'function') {\r\n            throw new TypeError(`${wrapText(func)} is not a function.`);\r\n        }\r\n        const fm = raw ? fmFlags.raw : null;\r\n        return formatValue({value: resolveFunc(func, cc), fm, cc});\r\n    },\r\n\r\n    /**\r\n     * @method formatting.format\r\n     * @description\r\n     * Replaces variables in a string according to the type of `values`:\r\n     *\r\n     * - Replaces `$1` occurrences when `values` is of type `string`, `boolean`, `number`, `bigint`, `Date`, `Buffer` or when it is `null`.\r\n     *\r\n     * - Replaces variables `$1`, `$2`, ...`$100000` when `values` is an array of parameters. It throws a {@link external:RangeError RangeError}\r\n     * when the values or variables are out of range.\r\n     *\r\n     * - Replaces `$*propName*`, where `*` is any of `{}`, `()`, `[]`, `<>`, `//`, when `values` is an object that's not a\r\n     * `Date`, `Buffer`, {@link QueryFile} or `null`. Special property name `this` refers to the formatting object itself,\r\n     *   to be injected as a JSON string. When referencing a property that doesn't exist in the formatting object, it throws\r\n     *   {@link external:Error Error} = `Property 'PropName' doesn't exist`, unless option `partial` is used.\r\n     *\r\n     * - Supports $[Nested Named Parameters] of any depth.\r\n     *\r\n     * By default, each variable is automatically formatted according to its type, unless it is a special variable:\r\n     *\r\n     * - Raw-text variables end with `:raw` or symbol `^`, and prevent escaping the text. Such variables are not\r\n     *   allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`\r\n     *   - `$1:raw`, `$2:raw`,..., and `$*propName:raw*` (see `*` above)\r\n     *   - `$1^`, `$2^`,..., and `$*propName^*` (see `*` above)\r\n     *\r\n     * - Open-value variables end with `:value` or symbol `#`, to be escaped, but not wrapped in quotes. Such variables are\r\n     *   not allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`\r\n     *   - `$1:value`, `$2:value`,..., and `$*propName:value*` (see `*` above)\r\n     *   - `$1#`, `$2#`,..., and `$*propName#*` (see `*` above)\r\n     *\r\n     * - SQL name variables end with `:name` or symbol `~` (tilde), and provide proper escaping for SQL names/identifiers:\r\n     *   - `$1:name`, `$2:name`,..., and `$*propName:name*` (see `*` above)\r\n     *   - `$1~`, `$2~`,..., and `$*propName~*` (see `*` above)\r\n     *\r\n     * - Modifier `:alias` - non-verbose $[SQL Names] escaping.\r\n     *\r\n     * - JSON override ends with `:json` to format the value of any type as a JSON string\r\n     *\r\n     * - CSV override ends with `:csv` or `:list` to format an array as a properly escaped comma-separated list of values.\r\n     *\r\n     * @param {string|QueryFile|object} query\r\n     * A query string, a {@link QueryFile} or any object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n     *\r\n     * @param {array|object|value} [values]\r\n     * Formatting parameter(s) / variable value(s).\r\n     *\r\n     * @param {{}} [options]\r\n     * Formatting Options.\r\n     *\r\n     * @param {boolean} [options.capSQL=false]\r\n     * Formats reserved SQL words capitalized. Presently, this only concerns arrays, to output `ARRAY` when required.\r\n     *\r\n     * @param {boolean} [options.partial=false]\r\n     * Indicates that we intend to do only a partial replacement, i.e. throw no error when encountering a variable or\r\n     * property name that's missing within the formatting parameters.\r\n     *\r\n     * **NOTE:** This option has no meaning when option `def` is used.\r\n     *\r\n     * @param {*} [options.def]\r\n     * Sets default value for every variable that's missing, consequently preventing errors when encountering a variable\r\n     * or property name that's missing within the formatting parameters.\r\n     *\r\n     * It can also be set to a function, to be called with two parameters that depend on the type of formatting being used,\r\n     * and to return the actual default value:\r\n     *\r\n     * - For $[Named Parameters] formatting:\r\n     *   - `name` - name of the property missing in the formatting object\r\n     *   - `obj` - the formatting object, and is the same as `this` context\r\n     *\r\n     * - For $[Index Variables] formatting:\r\n     *   - `index` - element's index (starts with 1) that's outside of the input array\r\n     *   - `arr` - the formatting/input array, and is the same as `this` context\r\n     *\r\n     *   You can tell which type of call it is by checking the type of the first parameter.\r\n     *\r\n     * @returns {string}\r\n     * Formatted query string.\r\n     *\r\n     * The function will throw an error, if any occurs during formatting.\r\n     */\r\n    format(query, values, options) {\r\n        options = assert(options, ['capSQL', 'partial', 'def']);\r\n        const ctf = getCTF(query);\r\n        if (ctf) {\r\n            query = ctf.toPostgres.call(query, query);\r\n        }\r\n        return formatQuery(query, values, false, options);\r\n    }\r\n};\r\n\r\n/* Pre-parsed type formatting */\r\nconst $to = {\r\n    array(arr, options) {\r\n        return formatArray(arr, options);\r\n    },\r\n    csv(values, options) {\r\n        return formatCSV(resolveFunc(values), options);\r\n    },\r\n    bool(value) {\r\n        return value ? 'true' : 'false';\r\n    },\r\n    buffer(obj, raw) {\r\n        const s = `\\\\x${obj.toString('hex')}`;\r\n        return raw ? s : wrapText(s);\r\n    },\r\n    date(d, raw) {\r\n        const s = npm.pgUtils.prepareValue(d);\r\n        return raw ? s : wrapText(s);\r\n    },\r\n    json(data, raw) {\r\n        const s = npm.utils.toJson(data);\r\n        return raw ? s : wrapText(safeText(s));\r\n    },\r\n    number(num) {\r\n        if (typeof num === 'bigint' || Number.isFinite(num)) {\r\n            return num.toString();\r\n        }\r\n        // Converting NaN/+Infinity/-Infinity according to Postgres documentation:\r\n        // http://www.postgresql.org/docs/9.6/static/datatype-numeric.html#DATATYPE-FLOAT\r\n        //\r\n        // NOTE: strings for 'NaN'/'+Infinity'/'-Infinity' are not case-sensitive.\r\n        if (num === Number.POSITIVE_INFINITY) {\r\n            return wrapText('+Infinity');\r\n        }\r\n        if (num === Number.NEGATIVE_INFINITY) {\r\n            return wrapText('-Infinity');\r\n        }\r\n        return wrapText('NaN');\r\n    },\r\n    text(value, raw) {\r\n        return raw ? value : wrapText(safeText(value));\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    formatQuery,\r\n    formatEntity,\r\n    resolveFunc,\r\n    as: $as\r\n};\r\n\r\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\r\n\r\n/**\r\n * @external RangeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\r\n */\r\n\r\n/**\r\n * @external Symbol\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/formatting.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/column-set.js":
/*!***********************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/column-set.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = __webpack_require__(/*! ../inner-state */ \"./node_modules/pg-promise/lib/inner-state.js\");\r\nconst {assert} = __webpack_require__(/*! ../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\nconst {TableName} = __webpack_require__(/*! ./table-name */ \"./node_modules/pg-promise/lib/helpers/table-name.js\");\r\nconst {Column} = __webpack_require__(/*! ./column */ \"./node_modules/pg-promise/lib/helpers/column.js\");\r\n\r\nconst npm = {\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    formatting: __webpack_require__(/*! ../formatting */ \"./node_modules/pg-promise/lib/formatting.js\")\r\n};\r\n\r\n/**\r\n * @class helpers.ColumnSet\r\n * @description\r\n * Performance-optimized, read-only structure with query-formatting columns.\r\n *\r\n * In order to avail from performance optimization provided by this class, it should be created\r\n * only once, statically, and then reused.\r\n *\r\n * @param {object|helpers.Column|array} columns\r\n * Columns information object, depending on the type:\r\n *\r\n * - When it is a simple object, its properties are enumerated to represent both column names and property names\r\n *   within the source objects. See also option `inherit` that's applicable in this case.\r\n *\r\n * - When it is a single {@link helpers.Column Column} object, property {@link helpers.ColumnSet#columns columns} is initialized with\r\n *   just a single column. It is not a unique situation when only a single column is required for an update operation.\r\n *\r\n * - When it is an array, each element is assumed to represent details for a column. If the element is already of type {@link helpers.Column Column},\r\n *   it is used directly; otherwise the element is passed into {@link helpers.Column Column} constructor for initialization.\r\n *   On any duplicate column name (case-sensitive) it will throw {@link external:Error Error} = `Duplicate column name \"name\".`\r\n *\r\n * - When it is none of the above, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'columns' specified.`\r\n *\r\n * @param {object} [options]\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [options.table]\r\n * Table details.\r\n *\r\n * When it is a non-null value, and not a {@link helpers.TableName TableName} object, a new {@link helpers.TableName TableName} is constructed from the value.\r\n *\r\n * It can be used as the default for methods {@link helpers.insert insert} and {@link helpers.update update} when their parameter\r\n * `table` is omitted, and for logging purposes.\r\n *\r\n * @param {boolean} [options.inherit = false]\r\n * Use inherited properties in addition to the object's own properties.\r\n *\r\n * By default, only the object's own properties are enumerated for column names.\r\n *\r\n * @returns {helpers.ColumnSet}\r\n *\r\n * @see\r\n *\r\n * {@link helpers.ColumnSet#columns columns},\r\n * {@link helpers.ColumnSet#names names},\r\n * {@link helpers.ColumnSet#table table},\r\n * {@link helpers.ColumnSet#variables variables} |\r\n * {@link helpers.ColumnSet#assign assign},\r\n * {@link helpers.ColumnSet#assignColumns assignColumns},\r\n * {@link helpers.ColumnSet#extend extend},\r\n * {@link helpers.ColumnSet#merge merge},\r\n * {@link helpers.ColumnSet#prepare prepare}\r\n *\r\n * @example\r\n *\r\n * // A complex insert/update object scenario for table 'purchases' in schema 'fiscal'.\r\n * // For a good performance, you should declare such objects once and then reuse them.\r\n * //\r\n * // Column Requirements:\r\n * //\r\n * // 1. Property 'id' is only to be used for a WHERE condition in updates\r\n * // 2. Property 'list' needs to be formatted as a csv\r\n * // 3. Property 'code' is to be used as raw text, and to be defaulted to 0 when the\r\n * //    property is missing in the source object\r\n * // 4. Property 'log' is a JSON object with 'log-entry' for the column name\r\n * // 5. Property 'data' requires SQL type casting '::int[]'\r\n * // 6. Property 'amount' needs to be set to 100, if it is 0\r\n * // 7. Property 'total' must be skipped during updates, if 'amount' was 0, plus its\r\n * //    column name is 'total-val'\r\n *\r\n * const cs = new pgp.helpers.ColumnSet([\r\n *     '?id', // ColumnConfig equivalent: {name: 'id', cnd: true}\r\n *     'list:csv', // ColumnConfig equivalent: {name: 'list', mod: ':csv'}\r\n *     {\r\n *         name: 'code',\r\n *         mod: '^', // format as raw text\r\n *         def: 0 // default to 0 when the property doesn't exist\r\n *     },\r\n *     {\r\n *         name: 'log-entry',\r\n *         prop: 'log',\r\n *         mod: ':json' // format as JSON\r\n *     },\r\n *     {\r\n *         name: 'data',\r\n *         cast: 'int[]' // use SQL type casting '::int[]'\r\n *     },\r\n *     {\r\n *         name: 'amount',\r\n *         init(col) {\r\n *             // set to 100, if the value is 0:\r\n *             return col.value === 0 ? 100 : col.value;\r\n *         }\r\n *     },\r\n *     {\r\n *         name: 'total-val',\r\n *         prop: 'total',\r\n *         skip(col) {\r\n *             // skip from updates, if 'amount' is 0:\r\n *             return col.source.amount === 0;\r\n *         }\r\n *     }\r\n * ], {table: {table: 'purchases', schema: 'fiscal'}});\r\n *\r\n * // Alternatively, you could take the table declaration out:\r\n * // const table = new pgp.helpers.TableName('purchases', 'fiscal');\r\n *\r\n * console.log(cs); // console output for the object:\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"fiscal\".\"purchases\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"id\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"list\"\r\n * //            mod: \":csv\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"code\"\r\n * //            mod: \"^\"\r\n * //            def: 0\r\n * //        }\r\n * //        Column {\r\n * //            name: \"log-entry\"\r\n * //            prop: \"log\"\r\n * //            mod: \":json\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"data\"\r\n * //            cast: \"int[]\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"amount\"\r\n * //            init: [Function]\r\n * //        }\r\n * //        Column {\r\n * //            name: \"total-val\"\r\n * //            prop: \"total\"\r\n * //            skip: [Function]\r\n * //        }\r\n * //    ]\r\n * // }\r\n */\r\nclass ColumnSet extends InnerState {\r\n\r\n    constructor(columns, opt) {\r\n        super();\r\n\r\n        if (!columns || typeof columns !== 'object') {\r\n            throw new TypeError('Invalid parameter \\'columns\\' specified.');\r\n        }\r\n\r\n        opt = assert(opt, ['table', 'inherit']);\r\n\r\n        if (!npm.utils.isNull(opt.table)) {\r\n            this.table = (opt.table instanceof TableName) ? opt.table : new TableName(opt.table);\r\n        }\r\n\r\n        /**\r\n         * @name helpers.ColumnSet#table\r\n         * @type {helpers.TableName}\r\n         * @readonly\r\n         * @description\r\n         * Destination table. It can be specified for two purposes:\r\n         *\r\n         * - **primary:** to be used as the default table when it is omitted during a call into methods {@link helpers.insert insert} and {@link helpers.update update}\r\n         * - **secondary:** to be automatically written into the console (for logging purposes).\r\n         */\r\n\r\n\r\n        /**\r\n         * @name helpers.ColumnSet#columns\r\n         * @type helpers.Column[]\r\n         * @readonly\r\n         * @description\r\n         * Array of {@link helpers.Column Column} objects.\r\n         */\r\n        if (Array.isArray(columns)) {\r\n            const colNames = {};\r\n            this.columns = columns.map(c => {\r\n                const col = (c instanceof Column) ? c : new Column(c);\r\n                if (col.name in colNames) {\r\n                    throw new Error(`Duplicate column name \"${col.name}\".`);\r\n                }\r\n                colNames[col.name] = true;\r\n                return col;\r\n            });\r\n        } else {\r\n            if (columns instanceof Column) {\r\n                this.columns = [columns];\r\n            } else {\r\n                this.columns = [];\r\n                for (const name in columns) {\r\n                    if (opt.inherit || Object.prototype.hasOwnProperty.call(columns, name)) {\r\n                        this.columns.push(new Column(name));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Object.freeze(this.columns);\r\n        Object.freeze(this);\r\n\r\n        this.extendState({\r\n            names: undefined,\r\n            variables: undefined,\r\n            updates: undefined,\r\n            isSimple: true\r\n        });\r\n\r\n        for (let i = 0; i < this.columns.length; i++) {\r\n            const c = this.columns[i];\r\n            // ColumnSet is simple when the source objects require no preparation,\r\n            // and should be used directly:\r\n            if (c.prop || c.init || 'def' in c) {\r\n                this._inner.isSimple = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name helpers.ColumnSet#names\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Returns a string - comma-separated list of all column names, properly escaped.\r\n     *\r\n     * @example\r\n     * const cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);\r\n     * console.log(cs.names);\r\n     * //=> \"id\",\"cells\",\"doc\"\r\n     */\r\n    get names() {\r\n        const _i = this._inner;\r\n        if (!_i.names) {\r\n            _i.names = this.columns.map(c => c.escapedName).join();\r\n        }\r\n        return _i.names;\r\n    }\r\n\r\n    /**\r\n     * @name helpers.ColumnSet#variables\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Returns a string - formatting template for all column values.\r\n     *\r\n     * @see {@link helpers.ColumnSet#assign assign}\r\n     *\r\n     * @example\r\n     * const cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);\r\n     * console.log(cs.variables);\r\n     * //=> ${id^},${cells}::int[],${doc:json}\r\n     */\r\n    get variables() {\r\n        const _i = this._inner;\r\n        if (!_i.variables) {\r\n            _i.variables = this.columns.map(c => c.variable + c.castText).join();\r\n        }\r\n        return _i.variables;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @method helpers.ColumnSet#assign\r\n * @description\r\n * Returns a formatting template of SET assignments, either generic or for a single object.\r\n *\r\n * The method is optimized to cache the output string when there are no columns that can be skipped dynamically.\r\n *\r\n * This method is primarily for internal use, that's why it does not validate the input.\r\n *\r\n * @param {object} [options]\r\n * Assignment/formatting options.\r\n *\r\n * @param {object} [options.source]\r\n * Source - a single object that contains values for columns.\r\n *\r\n * The object is only necessary to correctly apply the logic of skipping columns dynamically, based on the source data\r\n * and the rules defined in the {@link helpers.ColumnSet ColumnSet}. If, however, you do not care about that, then you do not need to specify any object.\r\n *\r\n * Note that even if you do not specify the object, the columns marked as conditional (`cnd: true`) will always be skipped.\r\n *\r\n * @param {string} [options.prefix]\r\n * In cases where needed, an alias prefix to be added before each column.\r\n *\r\n * @returns {string}\r\n * Comma-separated list of variable-to-column assignments.\r\n *\r\n * @see {@link helpers.ColumnSet#variables variables}\r\n *\r\n * @example\r\n *\r\n * const cs = new pgp.helpers.ColumnSet([\r\n *     '?first', // = {name: 'first', cnd: true}\r\n *     'second:json',\r\n *     {name: 'third', mod: ':raw', cast: 'text'}\r\n * ]);\r\n *\r\n * cs.assign();\r\n * //=> \"second\"=${second:json},\"third\"=${third:raw}::text\r\n *\r\n * cs.assign({prefix: 'a b c'});\r\n * //=> \"a b c\".\"second\"=${second:json},\"a b c\".\"third\"=${third:raw}::text\r\n */\r\nColumnSet.prototype.assign = function (options) {\r\n    const _i = this._inner;\r\n    const hasPrefix = options && options.prefix && typeof options.prefix === 'string';\r\n    if (_i.updates && !hasPrefix) {\r\n        return _i.updates;\r\n    }\r\n    let dynamic = hasPrefix;\r\n    const hasSource = options && options.source && typeof options.source === 'object';\r\n    let list = this.columns.filter(c => {\r\n        if (c.cnd) {\r\n            return false;\r\n        }\r\n        if (c.skip) {\r\n            dynamic = true;\r\n            if (hasSource) {\r\n                const a = colDesc(c, options.source);\r\n                if (c.skip.call(options.source, a)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n\r\n    const prefix = hasPrefix ? npm.formatting.as.alias(options.prefix) + '.' : '';\r\n    list = list.map(c => prefix + c.escapedName + '=' + c.variable + c.castText).join();\r\n\r\n    if (!dynamic) {\r\n        _i.updates = list;\r\n    }\r\n    return list;\r\n};\r\n\r\n/**\r\n * @method helpers.ColumnSet#assignColumns\r\n * @description\r\n * Generates assignments for all columns in the set, with support for aliases and column-skipping logic.\r\n * Aliases are set by using method {@link formatting.alias as.alias}.\r\n *\r\n * @param {{}} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {string} [options.from]\r\n * Alias for the source columns.\r\n *\r\n * @param {string} [options.to]\r\n * Alias for the destination columns.\r\n *\r\n * @param {string | Array<string> | function} [options.skip]\r\n * Name(s) of the column(s) to be skipped (case-sensitive). It can be either a single string or an array of strings.\r\n *\r\n * It can also be a function - iterator, to be called for every column, passing in {@link helpers.Column Column} as\r\n * `this` context, and plus as a single parameter. The function would return a truthy value for every column that needs to be skipped.\r\n *\r\n * @returns {string}\r\n * A string of comma-separated column assignments.\r\n *\r\n * @example\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['id', 'city', 'street']);\r\n *\r\n * cs.assignColumns({from: 'EXCLUDED', skip: 'id'})\r\n * //=> \"city\"=EXCLUDED.\"city\",\"street\"=EXCLUDED.\"street\"\r\n *\r\n * @example\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id', 'city', 'street']);\r\n *\r\n * cs.assignColumns({from: 'source', to: 'target', skip: c => c.cnd})\r\n * //=> target.\"city\"=source.\"city\",target.\"street\"=source.\"street\"\r\n *\r\n */\r\nColumnSet.prototype.assignColumns = function (options) {\r\n    options = assert(options, ['from', 'to', 'skip']);\r\n    const skip = (typeof options.skip === 'string' && [options.skip]) || ((Array.isArray(options.skip) || typeof options.skip === 'function') && options.skip);\r\n    const from = (typeof options.from === 'string' && options.from && (npm.formatting.as.alias(options.from) + '.')) || '';\r\n    const to = (typeof options.to === 'string' && options.to && (npm.formatting.as.alias(options.to) + '.')) || '';\r\n    const iterator = typeof skip === 'function' ? c => !skip.call(c, c) : c => skip.indexOf(c.name) === -1;\r\n    const cols = skip ? this.columns.filter(iterator) : this.columns;\r\n    return cols.map(c => to + c.escapedName + '=' + from + c.escapedName).join();\r\n};\r\n\r\n/**\r\n * @method helpers.ColumnSet#extend\r\n * @description\r\n * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.\r\n *\r\n * If the two sets contain a column with the same `name` (case-sensitive), an error is thrown.\r\n *\r\n * @param {helpers.Column|helpers.ColumnSet|array} columns\r\n * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:\r\n * - it can also be of type {@link helpers.ColumnSet ColumnSet}\r\n * - it cannot be a simple object (properties enumeration is not supported here)\r\n *\r\n * @returns {helpers.ColumnSet}\r\n * New {@link helpers.ColumnSet ColumnSet} object with the extended/concatenated list of columns.\r\n *\r\n * @see\r\n * {@link helpers.Column Column},\r\n * {@link helpers.ColumnSet#merge merge}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['one', 'two'], {table: 'my-table'});\r\n * console.log(cs);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n * const csExtended = cs.extend(['three']);\r\n * console.log(csExtended);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"three\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n */\r\nColumnSet.prototype.extend = function (columns) {\r\n    let cs = columns;\r\n    if (!(cs instanceof ColumnSet)) {\r\n        cs = new ColumnSet(columns);\r\n    }\r\n    // Any duplicate column will throw Error = 'Duplicate column name \"name\".',\r\n    return new ColumnSet(this.columns.concat(cs.columns), {table: this.table});\r\n};\r\n\r\n/**\r\n * @method helpers.ColumnSet#merge\r\n * @description\r\n * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.\r\n *\r\n * Items in `columns` with the same `name` (case-sensitive) override the original columns.\r\n *\r\n * @param {helpers.Column|helpers.ColumnSet|array} columns\r\n * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:\r\n * - it can also be of type {@link helpers.ColumnSet ColumnSet}\r\n * - it cannot be a simple object (properties enumeration is not supported here)\r\n *\r\n * @see\r\n * {@link helpers.Column Column},\r\n * {@link helpers.ColumnSet#extend extend}\r\n *\r\n * @returns {helpers.ColumnSet}\r\n * New {@link helpers.ColumnSet ColumnSet} object with the merged list of columns.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?one', 'two:json'], {table: 'my-table'});\r\n * console.log(cs);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //            mod: \":json\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n * const csMerged = cs.merge(['two', 'three^']);\r\n * console.log(csMerged);\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"my-table\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"one\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"two\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"three\"\r\n * //            mod: \"^\"\r\n * //        }\r\n * //    ]\r\n * // }\r\n *\r\n */\r\nColumnSet.prototype.merge = function (columns) {\r\n    let cs = columns;\r\n    if (!(cs instanceof ColumnSet)) {\r\n        cs = new ColumnSet(columns);\r\n    }\r\n    const colNames = {}, cols = [];\r\n    this.columns.forEach((c, idx) => {\r\n        cols.push(c);\r\n        colNames[c.name] = idx;\r\n    });\r\n    cs.columns.forEach(c => {\r\n        if (c.name in colNames) {\r\n            cols[colNames[c.name]] = c;\r\n        } else {\r\n            cols.push(c);\r\n        }\r\n    });\r\n    return new ColumnSet(cols, {table: this.table});\r\n};\r\n\r\n/**\r\n * @method helpers.ColumnSet#prepare\r\n * @description\r\n * Prepares a source object to be formatted, by cloning it and applying the rules as set by the\r\n * columns configuration.\r\n *\r\n * This method is primarily for internal use, that's why it does not validate the input parameters.\r\n *\r\n * @param {object} source\r\n * The source object to be prepared, if required.\r\n *\r\n * It must be a non-`null` object, which the method does not validate, as it is\r\n * intended primarily for internal use by the library.\r\n *\r\n * @returns {object}\r\n * When the object needs to be prepared, the method returns a clone of the source object,\r\n * with all properties and values set according to the columns configuration.\r\n *\r\n * When the object does not need to be prepared, the original object is returned.\r\n */\r\nColumnSet.prototype.prepare = function (source) {\r\n    if (this._inner.isSimple) {\r\n        return source; // a simple ColumnSet requires no object preparation;\r\n    }\r\n    const target = {};\r\n    this.columns.forEach(c => {\r\n        const a = colDesc(c, source);\r\n        if (c.init) {\r\n            target[a.name] = c.init.call(source, a);\r\n        } else {\r\n            if (a.exists || 'def' in c) {\r\n                target[a.name] = a.value;\r\n            }\r\n        }\r\n    });\r\n    return target;\r\n};\r\n\r\nfunction colDesc(column, source) {\r\n    const a = {\r\n        source,\r\n        name: column.prop || column.name\r\n    };\r\n    a.exists = a.name in source;\r\n    if (a.exists) {\r\n        a.value = source[a.name];\r\n    } else {\r\n        a.value = 'def' in column ? column.def : undefined;\r\n    }\r\n    return a;\r\n}\r\n\r\n/**\r\n * @method helpers.ColumnSet#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nColumnSet.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'ColumnSet {'\r\n        ];\r\n    if (this.table) {\r\n        lines.push(gap1 + 'table: ' + this.table);\r\n    }\r\n    if (this.columns.length) {\r\n        lines.push(gap1 + 'columns: [');\r\n        this.columns.forEach(c => {\r\n            lines.push(c.toString(2));\r\n        });\r\n        lines.push(gap1 + ']');\r\n    } else {\r\n        lines.push(gap1 + 'columns: []');\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(ColumnSet, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {ColumnSet};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/column-set.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/column.js":
/*!*******************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/column.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = __webpack_require__(/*! ../inner-state */ \"./node_modules/pg-promise/lib/inner-state.js\");\r\nconst {assert} = __webpack_require__(/*! ../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    formatting: __webpack_require__(/*! ../formatting */ \"./node_modules/pg-promise/lib/formatting.js\"),\r\n    patterns: __webpack_require__(/*! ../patterns */ \"./node_modules/pg-promise/lib/patterns.js\")\r\n};\r\n\r\n/**\r\n *\r\n * @class helpers.Column\r\n * @description\r\n *\r\n * Read-only structure with details for a single column. Used primarily by {@link helpers.ColumnSet ColumnSet}.\r\n *\r\n * The class parses details into a template, to be used for query generation.\r\n *\r\n * @param {string|helpers.ColumnConfig} col\r\n * Column details, depending on the type.\r\n *\r\n * When it is a string, it is expected to contain a name for both the column and the source property, assuming that the two are the same.\r\n * The name must adhere to JavaScript syntax for variable names. The name can be appended with any format modifier as supported by\r\n * {@link formatting.format as.format} (`^`, `~`, `#`, `:csv`, `:list`, `:json`, `:alias`, `:name`, `:raw`, `:value`), which is then removed from the name and put\r\n * into property `mod`. If the name starts with `?`, it is removed, while setting flag `cnd` = `true`.\r\n *\r\n * If the string doesn't adhere to the above requirements, the method will throw {@link external:TypeError TypeError} = `Invalid column syntax`.\r\n *\r\n * When `col` is a simple {@link helpers.ColumnConfig ColumnConfig}-like object, it is used as an input configurator to set all the properties\r\n * of the class.\r\n *\r\n * @property {string} name\r\n * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,\r\n * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any non-empty string.\r\n *\r\n * @property {string} [prop]\r\n * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables.\r\n *\r\n * It is ignored when it is the same as `name`.\r\n *\r\n * @property {string} [mod]\r\n * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:list`, `:json`, `:alias`, `:name`, `:raw`, `:value`.\r\n *\r\n * @property {string} [cast]\r\n * Server-side type casting, without `::` in front.\r\n *\r\n * @property {boolean} [cnd]\r\n * Conditional column flag.\r\n *\r\n * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and\r\n * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated.\r\n *\r\n * It can be set from a string initialization, by adding `?` in front of the name.\r\n *\r\n * @property {*} [def]\r\n * Default value for the property, to be used only when the source object doesn't have the property.\r\n * It is ignored when property `init` is set.\r\n *\r\n * @property {helpers.initCB} [init]\r\n * Override callback for the value.\r\n *\r\n * @property {helpers.skipCB} [skip]\r\n * An override for skipping columns dynamically.\r\n *\r\n * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods\r\n * {@link helpers.insert insert} and {@link helpers.values values}.\r\n *\r\n * It is also ignored when conditional flag `cnd` is set.\r\n *\r\n * @returns {helpers.Column}\r\n *\r\n * @see\r\n * {@link helpers.ColumnConfig ColumnConfig},\r\n * {@link helpers.Column#castText castText},\r\n * {@link helpers.Column#escapedName escapedName},\r\n * {@link helpers.Column#variable variable}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *     capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const Column = pgp.helpers.Column;\r\n *\r\n * // creating a column from just a name:\r\n * const col1 = new Column('colName');\r\n * console.log(col1);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * // }\r\n *\r\n * // creating a column from a name + modifier:\r\n * const col2 = new Column('colName:csv');\r\n * console.log(col2);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * //    mod: \":csv\"\r\n * // }\r\n *\r\n * // creating a column from a configurator:\r\n * const col3 = new Column({\r\n *     name: 'colName', // required\r\n *     prop: 'propName', // optional\r\n *     mod: '^', // optional\r\n *     def: 123 // optional\r\n * });\r\n * console.log(col3);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * //    prop: \"propName\"\r\n * //    mod: \"^\"\r\n * //    def: 123\r\n * // }\r\n *\r\n */\r\nclass Column extends InnerState {\r\n\r\n    constructor(col) {\r\n        super();\r\n\r\n        if (typeof col === 'string') {\r\n            const info = parseColumn(col);\r\n            this.name = info.name;\r\n            if ('mod' in info) {\r\n                this.mod = info.mod;\r\n            }\r\n            if ('cnd' in info) {\r\n                this.cnd = info.cnd;\r\n            }\r\n        } else {\r\n            col = assert(col, ['name', 'prop', 'mod', 'cast', 'cnd', 'def', 'init', 'skip']);\r\n            if ('name' in col) {\r\n                if (!npm.utils.isText(col.name)) {\r\n                    throw new TypeError(`Invalid 'name' value: ${npm.utils.toJson(col.name)}. A non-empty string was expected.`);\r\n                }\r\n                if (npm.utils.isNull(col.prop) && !isValidVariable(col.name)) {\r\n                    throw new TypeError(`Invalid 'name' syntax: ${npm.utils.toJson(col.name)}.`);\r\n                }\r\n                this.name = col.name; // column name + property name (if 'prop' isn't specified)\r\n\r\n                if (!npm.utils.isNull(col.prop)) {\r\n                    if (!npm.utils.isText(col.prop)) {\r\n                        throw new TypeError(`Invalid 'prop' value: ${npm.utils.toJson(col.prop)}. A non-empty string was expected.`);\r\n                    }\r\n                    if (!isValidVariable(col.prop)) {\r\n                        throw new TypeError(`Invalid 'prop' syntax: ${npm.utils.toJson(col.prop)}.`);\r\n                    }\r\n                    if (col.prop !== col.name) {\r\n                        // optional property name, if different from the column's name;\r\n                        this.prop = col.prop;\r\n                    }\r\n                }\r\n                if (!npm.utils.isNull(col.mod)) {\r\n                    if (typeof col.mod !== 'string' || !isValidMod(col.mod)) {\r\n                        throw new TypeError(`Invalid 'mod' value: ${npm.utils.toJson(col.mod)}.`);\r\n                    }\r\n                    this.mod = col.mod; // optional format modifier;\r\n                }\r\n                if (!npm.utils.isNull(col.cast)) {\r\n                    this.cast = parseCast(col.cast); // optional SQL type casting\r\n                }\r\n                if ('cnd' in col) {\r\n                    this.cnd = !!col.cnd;\r\n                }\r\n                if ('def' in col) {\r\n                    this.def = col.def; // optional default\r\n                }\r\n                if (typeof col.init === 'function') {\r\n                    this.init = col.init; // optional value override (overrides 'def' also)\r\n                }\r\n                if (typeof col.skip === 'function') {\r\n                    this.skip = col.skip;\r\n                }\r\n            } else {\r\n                throw new TypeError('Invalid column details.');\r\n            }\r\n        }\r\n\r\n        const variable = '${' + (this.prop || this.name) + (this.mod || '') + '}';\r\n        const castText = this.cast ? ('::' + this.cast) : '';\r\n        const escapedName = npm.formatting.as.name(this.name);\r\n\r\n        this.extendState({variable, castText, escapedName});\r\n        Object.freeze(this);\r\n    }\r\n\r\n    /**\r\n     * @name helpers.Column#variable\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Full-syntax formatting variable, ready for direct use in query templates.\r\n     *\r\n     * @example\r\n     *\r\n     * const cs = new pgp.helpers.ColumnSet([\r\n     *     'id',\r\n     *     'coordinate:json',\r\n     *     {\r\n     *         name: 'places',\r\n     *         mod: ':csv',\r\n     *         cast: 'int[]'\r\n     *     }\r\n     * ]);\r\n     *\r\n     * // cs.columns[0].variable = ${id}\r\n     * // cs.columns[1].variable = ${coordinate:json}\r\n     * // cs.columns[2].variable = ${places:csv}::int[]\r\n     */\r\n    get variable() {\r\n        return this._inner.variable;\r\n    }\r\n\r\n    /**\r\n     * @name helpers.Column#castText\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Full-syntax sql type casting, if there is any, or else an empty string.\r\n     */\r\n    get castText() {\r\n        return this._inner.castText;\r\n    }\r\n\r\n    /**\r\n     * @name helpers.Column#escapedName\r\n     * @type string\r\n     * @readonly\r\n     * @description\r\n     * Escaped name of the column, ready to be injected into queries directly.\r\n     *\r\n     */\r\n    get escapedName() {\r\n        return this._inner.escapedName;\r\n    }\r\n\r\n}\r\n\r\nfunction parseCast(name) {\r\n    if (typeof name === 'string') {\r\n        const s = name.replace(/^[:\\s]*|\\s*$/g, '');\r\n        if (s) {\r\n            return s;\r\n        }\r\n    }\r\n    throw new TypeError(`Invalid 'cast' value: ${npm.utils.toJson(name)}.`);\r\n}\r\n\r\nfunction parseColumn(name) {\r\n    const m = name.match(npm.patterns.validColumn);\r\n    if (m && m[0] === name) {\r\n        const res = {};\r\n        if (name[0] === '?') {\r\n            res.cnd = true;\r\n            name = name.substr(1);\r\n        }\r\n        const mod = name.match(npm.patterns.hasValidModifier);\r\n        if (mod) {\r\n            res.name = name.substr(0, mod.index);\r\n            res.mod = mod[0];\r\n        } else {\r\n            res.name = name;\r\n        }\r\n        return res;\r\n    }\r\n    throw new TypeError(`Invalid column syntax: ${npm.utils.toJson(name)}.`);\r\n}\r\n\r\nfunction isValidMod(mod) {\r\n    return npm.patterns.validModifiers.indexOf(mod) !== -1;\r\n}\r\n\r\nfunction isValidVariable(name) {\r\n    const m = name.match(npm.patterns.validVariable);\r\n    return !!m && m[0] === name;\r\n}\r\n\r\n/**\r\n * @method helpers.Column#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nColumn.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            gap0 + 'Column {',\r\n            gap1 + 'name: ' + npm.utils.toJson(this.name)\r\n        ];\r\n    if ('prop' in this) {\r\n        lines.push(gap1 + 'prop: ' + npm.utils.toJson(this.prop));\r\n    }\r\n    if ('mod' in this) {\r\n        lines.push(gap1 + 'mod: ' + npm.utils.toJson(this.mod));\r\n    }\r\n    if ('cast' in this) {\r\n        lines.push(gap1 + 'cast: ' + npm.utils.toJson(this.cast));\r\n    }\r\n    if ('cnd' in this) {\r\n        lines.push(gap1 + 'cnd: ' + npm.utils.toJson(this.cnd));\r\n    }\r\n    if ('def' in this) {\r\n        lines.push(gap1 + 'def: ' + npm.utils.toJson(this.def));\r\n    }\r\n    if ('init' in this) {\r\n        lines.push(gap1 + 'init: [Function]');\r\n    }\r\n    if ('skip' in this) {\r\n        lines.push(gap1 + 'skip: [Function]');\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(Column, function () {\r\n    return this.toString();\r\n});\r\n\r\n/**\r\n * @typedef helpers.ColumnConfig\r\n * @description\r\n * A simple structure with column details, to be passed into the {@link helpers.Column Column} constructor for initialization.\r\n *\r\n * @property {string} name\r\n * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,\r\n * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any non-empty string.\r\n *\r\n * @property {string} [prop]\r\n * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables.\r\n *\r\n * It is ignored when it is the same as `name`.\r\n *\r\n * @property {string} [mod]\r\n * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:list`, `:json`, `:alias`, `:name`, `:raw`, `:value`.\r\n *\r\n * @property {string} [cast]\r\n * Server-side type casting. Leading `::` is allowed, but not needed (automatically removed when specified).\r\n *\r\n * @property {boolean} [cnd]\r\n * Conditional column flag.\r\n *\r\n * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and\r\n * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated.\r\n *\r\n * It can be set from a string initialization, by adding `?` in front of the name.\r\n *\r\n * @property {*} [def]\r\n * Default value for the property, to be used only when the source object doesn't have the property.\r\n * It is ignored when property `init` is set.\r\n *\r\n * @property {helpers.initCB} [init]\r\n * Override callback for the value.\r\n *\r\n * @property {helpers.skipCB} [skip]\r\n * An override for skipping columns dynamically.\r\n *\r\n * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods\r\n * {@link helpers.insert insert} and {@link helpers.values values}.\r\n *\r\n * It is also ignored when conditional flag `cnd` is set.\r\n *\r\n */\r\n\r\n/**\r\n * @callback helpers.initCB\r\n * @description\r\n * A callback function type used by parameter `init` within {@link helpers.ColumnConfig ColumnConfig}.\r\n *\r\n * It works as an override for the corresponding property value in the `source` object.\r\n *\r\n * The function is called with `this` set to the `source` object.\r\n *\r\n * @param {*} col\r\n * Column-to-property descriptor.\r\n *\r\n * @param {object} col.source\r\n * The source object, equals to `this` that's passed into the function.\r\n *\r\n * @param {string} col.name\r\n * Resolved name of the property within the `source` object, i.e. the value of `name` when `prop` is not used\r\n * for the column, or the value of `prop` when it is specified.\r\n *\r\n * @param {*} col.value\r\n *\r\n * Property value, set to one of the following:\r\n *\r\n * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists\r\n * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`\r\n * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`\r\n *\r\n * @param {boolean} col.exists\r\n * Indicates whether the property exists in the `source` object (`exists = name in source`).\r\n *\r\n * @returns {*}\r\n * The new value to be used for the corresponding column.\r\n */\r\n\r\n/**\r\n * @callback helpers.skipCB\r\n * @description\r\n * A callback function type used by parameter `skip` within {@link helpers.ColumnConfig ColumnConfig}.\r\n *\r\n * It is to dynamically determine when the property with specified `name` in the `source` object is to be skipped.\r\n *\r\n * The function is called with `this` set to the `source` object.\r\n *\r\n * @param {*} col\r\n * Column-to-property descriptor.\r\n *\r\n * @param {object} col.source\r\n * The source object, equals to `this` that's passed into the function.\r\n *\r\n * @param {string} col.name\r\n * Resolved name of the property within the `source` object, i.e. the value of `name` when `prop` is not used\r\n * for the column, or the value of `prop` when it is specified.\r\n *\r\n * @param {*} col.value\r\n *\r\n * Property value, set to one of the following:\r\n *\r\n * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists\r\n * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`\r\n * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`\r\n *\r\n * @param {boolean} col.exists\r\n * Indicates whether the property exists in the `source` object (`exists = name in source`).\r\n *\r\n * @returns {boolean}\r\n * A truthy value that indicates whether the column is to be skipped.\r\n *\r\n */\r\n\r\nmodule.exports = {Column};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/column.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/index.js":
/*!******************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Column} = __webpack_require__(/*! ./column */ \"./node_modules/pg-promise/lib/helpers/column.js\");\r\nconst {ColumnSet} = __webpack_require__(/*! ./column-set */ \"./node_modules/pg-promise/lib/helpers/column-set.js\");\r\nconst {TableName} = __webpack_require__(/*! ./table-name */ \"./node_modules/pg-promise/lib/helpers/table-name.js\");\r\nconst method = __webpack_require__(/*! ./methods */ \"./node_modules/pg-promise/lib/helpers/methods/index.js\");\r\n\r\n/**\r\n * @namespace helpers\r\n * @description\r\n * Namespace for query-formatting generators, available as {@link module:pg-promise~helpers pgp.helpers}, after initializing the library.\r\n *\r\n * It unifies the approach to generating multi-row `INSERT` / `UPDATE` queries with the single-row ones.\r\n *\r\n * See also: $[Performance Boost].\r\n *\r\n * @property {function} TableName\r\n * {@link helpers.TableName TableName} class constructor.\r\n *\r\n * @property {function} ColumnSet\r\n * {@link helpers.ColumnSet ColumnSet} class constructor.\r\n *\r\n * @property {function} Column\r\n * {@link helpers.Column Column} class constructor.\r\n *\r\n * @property {function} insert\r\n * {@link helpers.insert insert} static method.\r\n *\r\n * @property {function} update\r\n * {@link helpers.update update} static method.\r\n *\r\n * @property {function} values\r\n * {@link helpers.values values} static method.\r\n *\r\n * @property {function} sets\r\n * {@link helpers.sets sets} static method.\r\n *\r\n * @property {function} concat\r\n * {@link helpers.concat concat} static method.\r\n */\r\nmodule.exports = config => {\r\n    const capSQL = () => config.options && config.options.capSQL;\r\n    const res = {\r\n        insert(data, columns, table) {\r\n            return method.insert(data, columns, table, capSQL());\r\n        },\r\n        update(data, columns, table, options) {\r\n            return method.update(data, columns, table, options, capSQL());\r\n        },\r\n        concat(queries) {\r\n            return method.concat(queries, capSQL());\r\n        },\r\n        values(data, columns) {\r\n            return method.values(data, columns, capSQL());\r\n        },\r\n        sets(data, columns) {\r\n            return method.sets(data, columns, capSQL());\r\n        },\r\n        TableName,\r\n        ColumnSet,\r\n        Column\r\n    };\r\n    return res;\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/methods/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/concat.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryFile} = __webpack_require__(/*! ../../query-file */ \"./node_modules/pg-promise/lib/query-file.js\");\r\n\r\nconst npm = {\r\n    formatting: __webpack_require__(/*! ../../formatting */ \"./node_modules/pg-promise/lib/formatting.js\")\r\n};\r\n\r\n/**\r\n * @method helpers.concat\r\n * @description\r\n * Formats and concatenates multiple queries into a single query string.\r\n *\r\n * Before joining the queries, the method does the following:\r\n *  - Formats each query, if `values` are provided;\r\n *  - Removes all leading and trailing spaces, tabs and semi-colons;\r\n *  - Automatically skips all empty queries.\r\n *\r\n * @param {array<string|helpers.QueryFormat|QueryFile>} queries\r\n * Array of mixed-type elements:\r\n * - a simple query string, to be used as is\r\n * - a {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`\r\n * - a {@link QueryFile} object\r\n *\r\n * @returns {string}\r\n * Concatenated string with all queries.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const qf1 = new pgp.QueryFile('./query1.sql', {minify: true});\r\n * const qf2 = new pgp.QueryFile('./query2.sql', {minify: true});\r\n *\r\n * const query = pgp.helpers.concat([\r\n *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object\r\n *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters\r\n *     'SELECT count(*) FROM Users', // a simple-string query,\r\n *     qf2 // direct QueryFile object\r\n * ]);\r\n *\r\n * // query = concatenated string with all the queries\r\n */\r\nfunction concat(queries, capSQL) {\r\n    if (!Array.isArray(queries)) {\r\n        throw new TypeError('Parameter \\'queries\\' must be an array.');\r\n    }\r\n    const fmOptions = {capSQL};\r\n    const all = queries.map((q, index) => {\r\n        if (typeof q === 'string') {\r\n            // a simple query string without parameters:\r\n            return clean(q);\r\n        }\r\n        if (q && typeof q === 'object') {\r\n            if (q instanceof QueryFile) {\r\n                // QueryFile object:\r\n                return clean(q[npm.formatting.as.ctf.toPostgres]());\r\n            }\r\n            if ('query' in q) {\r\n                // object {query, values, options}:\r\n                let opt = q.options && typeof q.options === 'object' ? q.options : {};\r\n                opt = opt.capSQL === undefined ? Object.assign(opt, fmOptions) : opt;\r\n                return clean(npm.formatting.as.format(q.query, q.values, opt));\r\n            }\r\n        }\r\n        throw new Error(`Invalid query element at index ${index}.`);\r\n    });\r\n\r\n    return all.filter(q => q).join(';');\r\n}\r\n\r\nfunction clean(q) {\r\n    // removes from the query all leading and trailing symbols ' ', '\\t' and ';'\r\n    return q.replace(/^[\\s;]*|[\\s;]*$/g, '');\r\n}\r\n\r\nmodule.exports = {concat};\r\n\r\n/**\r\n * @typedef helpers.QueryFormat\r\n * @description\r\n * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are,\r\n * used by {@link helpers.concat}.\r\n *\r\n * @property {string|value|object} query\r\n * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n *\r\n * @property {array|object|value} [values]\r\n * Query-formatting values.\r\n *\r\n * @property {object} [options]\r\n * Query-formatting options, as supported by method {@link formatting.format as.format}.\r\n *\r\n * @see\r\n * {@link formatting.format as.format}\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/methods/concat.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/methods/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {concat} = __webpack_require__(/*! ./concat */ \"./node_modules/pg-promise/lib/helpers/methods/concat.js\");\r\nconst {insert} = __webpack_require__(/*! ./insert */ \"./node_modules/pg-promise/lib/helpers/methods/insert.js\");\r\nconst {update} = __webpack_require__(/*! ./update */ \"./node_modules/pg-promise/lib/helpers/methods/update.js\");\r\nconst {values} = __webpack_require__(/*! ./values */ \"./node_modules/pg-promise/lib/helpers/methods/values.js\");\r\nconst {sets} = __webpack_require__(/*! ./sets */ \"./node_modules/pg-promise/lib/helpers/methods/sets.js\");\r\n\r\nmodule.exports = {\r\n    concat,\r\n    insert,\r\n    update,\r\n    values,\r\n    sets\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/methods/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/methods/insert.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/insert.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {TableName} = __webpack_require__(/*! ../table-name */ \"./node_modules/pg-promise/lib/helpers/table-name.js\");\r\nconst {ColumnSet} = __webpack_require__(/*! ../column-set */ \"./node_modules/pg-promise/lib/helpers/column-set.js\");\r\n\r\nconst npm = {\r\n    formatting: __webpack_require__(/*! ../../formatting */ \"./node_modules/pg-promise/lib/formatting.js\"),\r\n    utils: __webpack_require__(/*! ../../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * An `INSERT` query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction insert(data, columns, table, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    const isArray = Array.isArray(data);\r\n\r\n    if (isArray && !data.length) {\r\n        throw new TypeError('Cannot generate an INSERT from an empty array.');\r\n    }\r\n\r\n    if (columns instanceof ColumnSet) {\r\n        if (npm.utils.isNull(table)) {\r\n            table = columns.table;\r\n        }\r\n    } else {\r\n        if (isArray && npm.utils.isNull(columns)) {\r\n            throw new TypeError('Parameter \\'columns\\' is required when inserting multiple records.');\r\n        }\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error('Cannot generate an INSERT without any columns.');\r\n    }\r\n\r\n    if (!table) {\r\n        throw new Error('Table name is unknown.');\r\n    }\r\n\r\n    if (!(table instanceof TableName)) {\r\n        table = new TableName(table);\r\n    }\r\n\r\n    let query = capSQL ? sql.capCase : sql.lowCase;\r\n    const fmOptions = {capSQL};\r\n\r\n    const format = npm.formatting.as.format;\r\n    query = format(query, [table.name, columns.names], fmOptions);\r\n\r\n    if (isArray) {\r\n        return query + data.map((d, index) => {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(`Invalid insert object at index ${index}.`);\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\r\n        }).join();\r\n    }\r\n    return query + '(' + format(columns.variables, columns.prepare(data), fmOptions) + ')';\r\n}\r\n\r\nconst sql = {\r\n    lowCase: 'insert into $1^($2^) values',\r\n    capCase: 'INSERT INTO $1^($2^) VALUES'\r\n};\r\n\r\nmodule.exports = {insert};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/methods/insert.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/methods/sets.js":
/*!*************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/sets.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColumnSet} = __webpack_require__(/*! ../column-set */ \"./node_modules/pg-promise/lib/helpers/column-set.js\");\r\n\r\nconst npm = {\r\n    format: (__webpack_require__(/*! ../../formatting */ \"./node_modules/pg-promise/lib/formatting.js\").as).format,\r\n    utils: __webpack_require__(/*! ../../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */\r\nfunction sets(data, columns, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object' || Array.isArray(data)) {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    if (!(columns instanceof ColumnSet)) {\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    return npm.format(columns.assign({source: data}), columns.prepare(data), {capSQL});\r\n}\r\n\r\nmodule.exports = {sets};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/methods/sets.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/methods/update.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/update.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assert} = __webpack_require__(/*! ../../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\nconst {TableName} = __webpack_require__(/*! ../table-name */ \"./node_modules/pg-promise/lib/helpers/table-name.js\");\r\nconst {ColumnSet} = __webpack_require__(/*! ../column-set */ \"./node_modules/pg-promise/lib/helpers/column-set.js\");\r\n\r\nconst npm = {\r\n    formatting: __webpack_require__(/*! ../../formatting */ \"./node_modules/pg-promise/lib/formatting.js\"),\r\n    utils: __webpack_require__(/*! ../../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @method helpers.update\r\n * @description\r\n * Generates a simplified `UPDATE` query for either one object or an array of objects.\r\n *\r\n * The resulting query needs a `WHERE` clause to be appended to it, to specify the update logic.\r\n * This is to allow for update conditions of any complexity that are easy to add.\r\n *\r\n * @param {object|object[]} data\r\n * An update object with properties for update values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an UPDATE from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid update object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be updated.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when updating multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an UPDATE without any columns.`, unless option `emptyUpdate` was specified.\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Table to be updated.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @param {{}} [options]\r\n * An object with formatting options for multi-row `UPDATE` queries.\r\n *\r\n * @param {string} [options.tableAlias=t]\r\n * Name of the SQL variable that represents the destination table.\r\n *\r\n * @param {string} [options.valueAlias=v]\r\n * Name of the SQL variable that represents the values.\r\n *\r\n * @param {*} [options.emptyUpdate]\r\n * This is a convenience option, to avoid throwing an error when generating a conditional update results in no columns.\r\n *\r\n * When present, regardless of the value, this option overrides the method's behavior when applying `skip` logic results in no columns,\r\n * i.e. when every column is being skipped.\r\n *\r\n * By default, in that situation the method throws {@link external:Error Error} = `Cannot generate an UPDATE without any columns.`\r\n * But when this option is present, the method will instead return whatever value the option was passed.\r\n *\r\n * @returns {*}\r\n * An `UPDATE` query string that needs a `WHERE` condition appended.\r\n *\r\n * If it results in an empty update, and option `emptyUpdate` was passed in, then the method returns the value\r\n * to which the option was set.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {id: 1, val: 123, msg: 'hello'};\r\n * const dataMulti = [{id: 1, val: 123, msg: 'hello'}, {id: 2, val: 456, msg: 'world!'}];\r\n *\r\n * // Although column details can be taken from the data object, it is not\r\n * // a likely scenario for an update, unless updating the whole table:\r\n *\r\n * pgp.helpers.update(dataSingle, null, 'my-table');\r\n * //=> UPDATE \"my-table\" SET \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // A typical single-object update:\r\n *\r\n * // Dynamic conditions must be escaped/formatted properly:\r\n * const condition = pgp.as.format(' WHERE id = ${id}', dataSingle);\r\n *\r\n * pgp.helpers.update(dataSingle, ['val', 'msg'], 'my-table') + condition;\r\n * //=> UPDATE \"my-table\" SET \"val\"=123,\"msg\"='hello' WHERE id = 1\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `UPDATE`;\r\n * // Adding '?' in front of a column name means it is only for a WHERE condition:\r\n *\r\n * pgp.helpers.update(dataMulti, ['?id', 'val', 'msg'], 'my-table') + ' WHERE v.id = t.id';\r\n * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id', 'val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.update(dataMulti, cs) + ' WHERE v.id = t.id';\r\n * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id\r\n *\r\n * @example\r\n *\r\n * // Using parameter `options` to change the default alias names:\r\n *\r\n * pgp.helpers.update(dataMulti, cs, null, {tableAlias: 'X', valueAlias: 'Y'}) + ' WHERE Y.id = X.id';\r\n * //=> UPDATE \"my-table\" AS X SET \"val\"=Y.\"val\",\"msg\"=Y.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS Y(\"id\",\"val\",\"msg\") WHERE Y.id = X.id\r\n *\r\n * @example\r\n *\r\n * // Handling an empty update\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id', '?name'], {table: 'tt'}); // no actual update-able columns\r\n * const result = pgp.helpers.update(dataMulti, cs, null, {emptyUpdate: 123});\r\n * if(result === 123) {\r\n *    // We know the update is empty, i.e. no columns that can be updated;\r\n *    // And it didn't throw because we specified `emptyUpdate` option.\r\n * }\r\n */\r\nfunction update(data, columns, table, options, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    const isArray = Array.isArray(data);\r\n\r\n    if (isArray && !data.length) {\r\n        throw new TypeError('Cannot generate an UPDATE from an empty array.');\r\n    }\r\n\r\n    if (columns instanceof ColumnSet) {\r\n        if (npm.utils.isNull(table)) {\r\n            table = columns.table;\r\n        }\r\n    } else {\r\n        if (isArray && npm.utils.isNull(columns)) {\r\n            throw new TypeError('Parameter \\'columns\\' is required when updating multiple records.');\r\n        }\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    options = assert(options, ['tableAlias', 'valueAlias', 'emptyUpdate']);\r\n\r\n    const format = npm.formatting.as.format,\r\n        useEmptyUpdate = 'emptyUpdate' in options,\r\n        fmOptions = {capSQL};\r\n\r\n    if (isArray) {\r\n        const tableAlias = npm.formatting.as.alias(npm.utils.isNull(options.tableAlias) ? 't' : options.tableAlias);\r\n        const valueAlias = npm.formatting.as.alias(npm.utils.isNull(options.valueAlias) ? 'v' : options.valueAlias);\r\n\r\n        const q = capSQL ? sql.multi.capCase : sql.multi.lowCase;\r\n\r\n        const actualColumns = columns.columns.filter(c => !c.cnd);\r\n\r\n        if (checkColumns(actualColumns)) {\r\n            return options.emptyUpdate;\r\n        }\r\n\r\n        checkTable();\r\n\r\n        const targetCols = actualColumns.map(c => c.escapedName + '=' + valueAlias + '.' + c.escapedName).join();\r\n\r\n        const values = data.map((d, index) => {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(`Invalid update object at index ${index}.`);\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\r\n        }).join();\r\n\r\n        return format(q, [table.name, tableAlias, targetCols, values, valueAlias, columns.names], fmOptions);\r\n    }\r\n\r\n    const updates = columns.assign({source: data});\r\n\r\n    if (checkColumns(updates)) {\r\n        return options.emptyUpdate;\r\n    }\r\n\r\n    checkTable();\r\n\r\n    const query = capSQL ? sql.single.capCase : sql.single.lowCase;\r\n\r\n    return format(query, table.name) + format(updates, columns.prepare(data), fmOptions);\r\n\r\n    function checkTable() {\r\n        if (table && !(table instanceof TableName)) {\r\n            table = new TableName(table);\r\n        }\r\n        if (!table) {\r\n            throw new Error('Table name is unknown.');\r\n        }\r\n    }\r\n\r\n    function checkColumns(cols) {\r\n        if (!cols.length) {\r\n            if (useEmptyUpdate) {\r\n                return true;\r\n            }\r\n            throw new Error('Cannot generate an UPDATE without any columns.');\r\n        }\r\n    }\r\n}\r\n\r\nconst sql = {\r\n    single: {\r\n        lowCase: 'update $1^ set ',\r\n        capCase: 'UPDATE $1^ SET '\r\n    },\r\n    multi: {\r\n        lowCase: 'update $1^ as $2^ set $3^ from (values$4^) as $5^($6^)',\r\n        capCase: 'UPDATE $1^ AS $2^ SET $3^ FROM (VALUES$4^) AS $5^($6^)'\r\n    }\r\n};\r\n\r\nmodule.exports = {update};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/methods/update.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/methods/values.js":
/*!***************************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/methods/values.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColumnSet} = __webpack_require__(/*! ../column-set */ \"./node_modules/pg-promise/lib/helpers/column-set.js\");\r\n\r\nconst npm = {\r\n    formatting: __webpack_require__(/*! ../../formatting */ \"./node_modules/pg-promise/lib/formatting.js\"),\r\n    utils: __webpack_require__(/*! ../../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @method helpers.values\r\n * @description\r\n * Generates a string of comma-separated value groups from either one object or an array of objects,\r\n * to be used as part of a query:\r\n *\r\n * - from a single object: `(val_1, val_2, ...)`\r\n * - from an array of objects: `(val_11, val_12, ...), (val_21, val_22, ...)`\r\n *\r\n * @param {object|object[]} data\r\n * A source object with properties as values, or an array of such objects.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid object at index N.`\r\n *\r\n * When `data` is an empty array, an empty string is returned.\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to return values.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when generating multi-row values.`\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate values without any columns.`\r\n *\r\n * @returns {string}\r\n * - comma-separated value groups, according to `data`\r\n * - an empty string, if `data` is an empty array\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Properties can be pulled automatically from a single object:\r\n *\r\n * pgp.helpers.values(dataSingle);\r\n * //=> (123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required when using an array of objects:\r\n *\r\n * pgp.helpers.values(dataMulti, ['val', 'msg']);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg']);\r\n *\r\n * pgp.helpers.values(dataMulti, cs);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction values(data, columns, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    const isArray = Array.isArray(data);\r\n\r\n    if (!(columns instanceof ColumnSet)) {\r\n        if (isArray && npm.utils.isNull(columns)) {\r\n            throw new TypeError('Parameter \\'columns\\' is required when generating multi-row values.');\r\n        }\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error('Cannot generate values without any columns.');\r\n    }\r\n\r\n    const format = npm.formatting.as.format,\r\n        fmOptions = {capSQL};\r\n\r\n    if (isArray) {\r\n        return data.map((d, index) => {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(`Invalid object at index ${index}.`);\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\r\n        }).join();\r\n    }\r\n    return '(' + format(columns.variables, columns.prepare(data), fmOptions) + ')';\r\n}\r\n\r\nmodule.exports = {values};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/methods/values.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/helpers/table-name.js":
/*!***********************************************************!*\
  !*** ./node_modules/pg-promise/lib/helpers/table-name.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assert} = __webpack_require__(/*! ../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    format: (__webpack_require__(/*! ../formatting */ \"./node_modules/pg-promise/lib/formatting.js\").as) // formatting namespace\r\n};\r\n\r\n/**\r\n * @class helpers.TableName\r\n * @description\r\n * Represents a full table name that can be injected into queries directly.\r\n *\r\n * This is a read-only type that can be used wherever parameter `table` is supported.\r\n *\r\n * It supports $[Custom Type Formatting], which means you can use the type directly as a formatting\r\n * parameter, without specifying any escaping.\r\n *\r\n * Filter `:alias` is an alternative approach to splitting an SQL name into multiple ones.\r\n *\r\n * @param {string|object} table\r\n * Table name details, depending on the type:\r\n *\r\n * - table name, if `table` is a string\r\n * - object `{table, [schema]}`\r\n *\r\n * @property {string} name\r\n * Formatted/escaped full table name, combining `schema` + `table`.\r\n *\r\n * @property {string} table\r\n * Table name.\r\n *\r\n * @property {string} schema\r\n * Database schema name.\r\n *\r\n * It is `undefined` when no valid schema was specified.\r\n *\r\n * @returns {helpers.TableName}\r\n *\r\n * @see\r\n * {@link helpers.TableName#toPostgres toPostgres}\r\n *\r\n * @example\r\n *\r\n * const table = new pgp.helpers.TableName({table: 'my-table', schema: 'my-schema'});\r\n * console.log(table);\r\n * //=> \"my-schema\".\"my-table\"\r\n *\r\n * // Formatting the type directly:\r\n * pgp.as.format('SELECT * FROM $1', table);\r\n * //=> SELECT * FROM \"my-schema\".\"my-table\"\r\n *\r\n */\r\nclass TableName {\r\n\r\n    constructor(table) {\r\n        if (typeof table === 'string') {\r\n            this.table = table;\r\n        } else {\r\n            const config = assert(table, ['table', 'schema']);\r\n            this.table = config.table;\r\n            if (npm.utils.isText(config.schema)) {\r\n                this.schema = config.schema;\r\n            }\r\n        }\r\n        if (!npm.utils.isText(this.table)) {\r\n            throw new TypeError('Table name must be a non-empty text string.');\r\n        }\r\n        this.name = npm.format.name(this.table);\r\n        if (this.schema) {\r\n            this.name = npm.format.name(this.schema) + '.' + this.name;\r\n        }\r\n        Object.freeze(this);\r\n    }\r\n}\r\n\r\n/**\r\n * @method helpers.TableName#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const fullName = tn[ctf.toPostgres]; // tn = an object of type TableName\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `TableName`\r\n * injects full table name as raw text.\r\n *\r\n * @param {helpers.TableName} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * Escaped full table name that includes optional schema name, if specified.\r\n */\r\nTableName.prototype[npm.format.ctf.toPostgres] = function (self) {\r\n    self = this instanceof TableName && this || self;\r\n    return self.name;\r\n};\r\n\r\nTableName.prototype[npm.format.ctf.rawType] = true; // use as pre-formatted\r\n\r\n/**\r\n * @method helpers.TableName#toString\r\n * @description\r\n * Creates a well-formatted string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @returns {string}\r\n */\r\nTableName.prototype.toString = function () {\r\n    return this.name;\r\n};\r\n\r\nnpm.utils.addInspection(TableName, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {TableName};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/helpers/table-name.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/pg-promise/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/* eslint no-var: off */\r\nvar v = process.versions.node.split('.'),\r\n    highVer = +v[0];\r\n\r\n// istanbul ignore next\r\nif (highVer < 14) {\r\n\r\n    // From pg-promise v11.0.0, the oldest supported Node.js is v14.0.0\r\n\r\n    // Node.js v12.0.0 was supported up to pg-promise v10.15.4\r\n    // Node.js v8.0.0 was supported up to pg-promise v10.14.2\r\n    // Node.js v7.6.0 was supported up to pg-promise v10.3.5\r\n    // Node.js v4.5.0 was supported up to pg-promise v8.7.5\r\n    // Node.js v0.10 was supported up to pg-promise v5.5.8\r\n\r\n    throw new Error('Minimum Node.js version supported by pg-promise is 14.0.0');\r\n}\r\n\r\nmodule.exports = __webpack_require__(/*! ./main */ \"./node_modules/pg-promise/lib/main.js\");\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/inner-state.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/inner-state.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {addReadProp} = __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\");\r\n\r\n/**\r\n * @private\r\n * @class InnerState\r\n * @description\r\n * Implements support for private/inner state object inside the class,\r\n * which can be accessed by a derived class via hidden read-only property _inner.\r\n */\r\nclass InnerState {\r\n\r\n    constructor(initialState) {\r\n        addReadProp(this, '_inner', {}, true);\r\n        if (initialState && typeof initialState === 'object') {\r\n            this.extendState(initialState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extends or overrides inner state with the specified properties.\r\n     *\r\n     * Only own properties are used, i.e. inherited ones are skipped.\r\n     */\r\n    extendState(state) {\r\n        for (const a in state) {\r\n            // istanbul ignore else\r\n            if (Object.prototype.hasOwnProperty.call(state, a)) {\r\n                this._inner[a] = state[a];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @member InnerState#_inner\r\n * Private/Inner object state.\r\n */\r\n\r\nmodule.exports = {InnerState};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/inner-state.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/main.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-promise/lib/main.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {PromiseAdapter} = __webpack_require__(/*! ./promise-adapter */ \"./node_modules/pg-promise/lib/promise-adapter.js\");\r\nconst {DatabasePool} = __webpack_require__(/*! ./database-pool */ \"./node_modules/pg-promise/lib/database-pool.js\");\r\nconst {PreparedStatement, ParameterizedQuery} = __webpack_require__(/*! ./types */ \"./node_modules/pg-promise/lib/types/index.js\");\r\nconst {QueryFile} = __webpack_require__(/*! ./query-file */ \"./node_modules/pg-promise/lib/query-file.js\");\r\nconst {queryResult} = __webpack_require__(/*! ./query-result */ \"./node_modules/pg-promise/lib/query-result.js\");\r\nconst {parsePromise} = __webpack_require__(/*! ./promise-parser */ \"./node_modules/pg-promise/lib/promise-parser.js\");\r\nconst {assert} = __webpack_require__(/*! ./assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    path: __webpack_require__(/*! path */ \"path\"),\r\n    pg: __webpack_require__(/*! pg */ \"./node_modules/pg/lib/index.js\"),\r\n    minify: __webpack_require__(/*! pg-minify */ \"./node_modules/pg-minify/lib/index.js\"),\r\n    formatting: __webpack_require__(/*! ./formatting */ \"./node_modules/pg-promise/lib/formatting.js\"),\r\n    helpers: __webpack_require__(/*! ./helpers */ \"./node_modules/pg-promise/lib/helpers/index.js\"),\r\n    errors: __webpack_require__(/*! ./errors */ \"./node_modules/pg-promise/lib/errors/index.js\"),\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    pubUtils: __webpack_require__(/*! ./utils/public */ \"./node_modules/pg-promise/lib/utils/public.js\"),\r\n    mode: __webpack_require__(/*! ./tx-mode */ \"./node_modules/pg-promise/lib/tx-mode.js\"),\r\n    package: __webpack_require__(/*! ../package.json */ \"./node_modules/pg-promise/package.json\"),\r\n    text: __webpack_require__(/*! ./text */ \"./node_modules/pg-promise/lib/text.js\")\r\n};\r\n\r\nlet originalClientConnect;\r\n\r\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ## pg-promise v11.4\r\n * All documentation here is for the latest official release only.\r\n *\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @property {{}} [options]\r\n * Library Initialization Options.\r\n *\r\n * @property {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */\r\nfunction $main(options) {\r\n\r\n    options = assert(options, ['pgFormatting', 'pgNative', 'promiseLib', 'capSQL', 'noWarnings',\r\n        'connect', 'disconnect', 'query', 'receive', 'task', 'transact', 'error', 'extend', 'schema']);\r\n\r\n    let pg = npm.pg;\r\n    const p = parsePromise(options.promiseLib);\r\n\r\n    const config = {\r\n        version: npm.package.version,\r\n        promiseLib: p.promiseLib,\r\n        promise: p.promise\r\n    };\r\n\r\n    npm.utils.addReadProp(config, '$npm', {}, true);\r\n\r\n    // Locking properties that cannot be changed later:\r\n    npm.utils.addReadProp(options, 'promiseLib', options.promiseLib);\r\n    npm.utils.addReadProp(options, 'pgNative', !!options.pgNative);\r\n\r\n    config.options = options;\r\n\r\n    // istanbul ignore next:\r\n    // we do not cover code specific to Native Bindings\r\n    if (options.pgNative) {\r\n        pg = npm.pg.native;\r\n        if (npm.utils.isNull(pg)) {\r\n            throw new Error(npm.text.nativeError);\r\n        }\r\n    } else {\r\n        if (!originalClientConnect) {\r\n            originalClientConnect = pg.Client.prototype.connect;\r\n            pg.Client.prototype.connect = function () {\r\n                const handler = msg => {\r\n                    if (msg.parameterName === 'server_version') {\r\n                        this.serverVersion = msg.parameterValue;\r\n                        this.connection.removeListener('parameterStatus', handler);\r\n                    }\r\n                };\r\n                this.connection.on('parameterStatus', handler);\r\n                return originalClientConnect.call(this, ...arguments);\r\n            };\r\n        }\r\n    }\r\n\r\n    const Database = __webpack_require__(/*! ./database */ \"./node_modules/pg-promise/lib/database.js\")(config);\r\n\r\n    const inst = (cn, dc) => {\r\n        if (npm.utils.isText(cn) || (cn && typeof cn === 'object')) {\r\n            return new Database(cn, dc, config);\r\n        }\r\n        throw new TypeError('Invalid connection details: ' + npm.utils.toJson(cn));\r\n    };\r\n\r\n    npm.utils.addReadProperties(inst, rootNameSpace);\r\n\r\n    /**\r\n     * @member {external:PG} pg\r\n     * @description\r\n     * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n     *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n     *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n     *\r\n     * Available as `pgp.pg`, after initializing the library.\r\n     */\r\n    inst.pg = pg; // keep it modifiable, so the protocol can be mocked\r\n\r\n    /**\r\n     * @member {function} end\r\n     * @readonly\r\n     * @description\r\n     * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n     * It is available as `pgp.end`, after initializing the library.\r\n     *\r\n     * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n     * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n     *\r\n     * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n     * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n     *\r\n     * For more details see $[Library de-initialization].\r\n     */\r\n    npm.utils.addReadProp(inst, 'end', () => {\r\n        DatabasePool.shutDown();\r\n    });\r\n\r\n    /**\r\n     * @member {helpers} helpers\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link helpers all query-formatting helper functions}.\r\n     *\r\n     * Available as `pgp.helpers`, after initializing the library.\r\n     *\r\n     * @see {@link helpers}.\r\n     */\r\n    npm.utils.addReadProp(inst, 'helpers', npm.helpers(config));\r\n\r\n    /**\r\n     * @member {external:spex} spex\r\n     * @readonly\r\n     * @description\r\n     * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n     *\r\n     * Available as `pgp.spex`, after initializing the library.\r\n     *\r\n     * @see\r\n     * {@link Task#batch},\r\n     * {@link Task#page},\r\n     * {@link Task#sequence}\r\n     */\r\n    npm.utils.addReadProp(inst, 'spex', config.$npm.spex);\r\n\r\n    config.pgp = inst;\r\n\r\n    return inst;\r\n}\r\n\r\nconst rootNameSpace = {\r\n\r\n    /**\r\n     * @member {formatting} as\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link formatting all query-formatting functions}.\r\n     *\r\n     * Available as `pgp.as`, before and after initializing the library.\r\n     *\r\n     * @see {@link formatting}.\r\n     */\r\n    as: npm.formatting.as,\r\n\r\n    /**\r\n     * @member {external:pg-minify} minify\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n     *\r\n     * Available as `pgp.minify`, before and after initializing the library.\r\n     */\r\n    minify: npm.minify,\r\n\r\n    /**\r\n     * @member {queryResult} queryResult\r\n     * @readonly\r\n     * @description\r\n     * Query Result Mask enumerator.\r\n     *\r\n     * Available as `pgp.queryResult`, before and after initializing the library.\r\n     */\r\n    queryResult,\r\n\r\n    /**\r\n     * @member {PromiseAdapter} PromiseAdapter\r\n     * @readonly\r\n     * @description\r\n     * {@link PromiseAdapter} class.\r\n     *\r\n     * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n     */\r\n    PromiseAdapter,\r\n\r\n    /**\r\n     * @member {ParameterizedQuery} ParameterizedQuery\r\n     * @readonly\r\n     * @description\r\n     * {@link ParameterizedQuery} class.\r\n     *\r\n     * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n     */\r\n    ParameterizedQuery,\r\n\r\n    /**\r\n     * @member {PreparedStatement} PreparedStatement\r\n     * @readonly\r\n     * @description\r\n     * {@link PreparedStatement} class.\r\n     *\r\n     * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n     */\r\n    PreparedStatement,\r\n\r\n    /**\r\n     * @member {QueryFile} QueryFile\r\n     * @readonly\r\n     * @description\r\n     * {@link QueryFile} class.\r\n     *\r\n     * Available as `pgp.QueryFile`, before and after initializing the library.\r\n     */\r\n    QueryFile,\r\n\r\n    /**\r\n     * @member {errors} errors\r\n     * @readonly\r\n     * @description\r\n     * {@link errors} - namespace for all error types.\r\n     *\r\n     * Available as `pgp.errors`, before and after initializing the library.\r\n     */\r\n    errors: npm.errors,\r\n\r\n    /**\r\n     * @member {utils} utils\r\n     * @readonly\r\n     * @description\r\n     * {@link utils} - namespace for utility functions.\r\n     *\r\n     * Available as `pgp.utils`, before and after initializing the library.\r\n     */\r\n    utils: npm.pubUtils,\r\n\r\n    /**\r\n     * @member {txMode} txMode\r\n     * @readonly\r\n     * @description\r\n     * {@link txMode Transaction Mode} namespace.\r\n     *\r\n     * Available as `pgp.txMode`, before and after initializing the library.\r\n     */\r\n    txMode: npm.mode\r\n};\r\n\r\nnpm.utils.addReadProperties($main, rootNameSpace);\r\n\r\nmodule.exports = $main;\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n\r\n/**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */\r\n\r\n/**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */\r\n\r\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\r\n\r\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/main.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/patterns.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-promise/lib/patterns.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/*\r\n  The most important regular expressions and data as used by the library,\r\n  isolated here to help with possible edge cases during integration.\r\n*/\r\n\r\nmodule.exports = {\r\n    // Searches for all Named Parameters, supporting any of the following syntax:\r\n    // ${propName}, $(propName), $[propName], $/propName/, $<propName>\r\n    // Nested property names are also supported: ${propName.abc}\r\n    namedParameters: /\\$(?:({)|(\\()|(<)|(\\[)|(\\/))\\s*[a-zA-Z0-9$_.]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?\\s*(?:(?=\\2)(?=\\3)(?=\\4)(?=\\5)}|(?=\\1)(?=\\3)(?=\\4)(?=\\5)\\)|(?=\\1)(?=\\2)(?=\\4)(?=\\5)>|(?=\\1)(?=\\2)(?=\\3)(?=\\5)]|(?=\\1)(?=\\2)(?=\\3)(?=\\4)\\/)/g,\r\n\r\n    // Searches for all variables $1, $2, ...$100000, and while it will find greater than $100000\r\n    // variables, the formatting engine is expected to throw an error for those.\r\n    multipleValues: /\\$([1-9][0-9]{0,16}(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?)/g,\r\n\r\n    // Searches for all occurrences of variable $1\r\n    singleValue: /\\$1(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/g,\r\n\r\n    // Matches a valid column name for the Column type parser, according to the following rules:\r\n    // - can contain: any combination of a-z, A-Z, 0-9, $ or _\r\n    // - can contain ? at the start\r\n    // - can contain one of the supported filters/modifiers\r\n    validColumn: /\\??[a-zA-Z0-9$_]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/,\r\n\r\n    // Matches a valid open-name JavaScript variable, according to the following rules:\r\n    // - can contain: any combination of a-z, A-Z, 0-9, $ or _\r\n    validVariable: /[a-zA-Z0-9$_]+/,\r\n\r\n    // Matches a valid modifier in a column/property:\r\n    hasValidModifier: /\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value/,\r\n\r\n    // List of all supported formatting modifiers:\r\n    validModifiers: ['^', '~', '#', ':raw', ':alias', ':name', ':json', ':csv', ':list', ':value']\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/patterns.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/promise-adapter.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-promise/lib/promise-adapter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assert} = __webpack_require__(/*! ./assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\r\nclass PromiseAdapter {\r\n    constructor(api) {\r\n\r\n        if (!api || typeof api !== 'object') {\r\n            throw new TypeError('Adapter requires an api configuration object.');\r\n        }\r\n\r\n        api = assert(api, ['create', 'resolve', 'reject', 'all']);\r\n\r\n        this.create = api.create;\r\n        this.resolve = api.resolve;\r\n        this.reject = api.reject;\r\n        this.all = api.all;\r\n\r\n        if (typeof this.create !== 'function') {\r\n            throw new TypeError('Function \\'create\\' must be specified.');\r\n        }\r\n\r\n        if (typeof this.resolve !== 'function') {\r\n            throw new TypeError('Function \\'resolve\\' must be specified.');\r\n        }\r\n\r\n        if (typeof this.reject !== 'function') {\r\n            throw new TypeError('Function \\'reject\\' must be specified.');\r\n        }\r\n\r\n        if (typeof this.all !== 'function') {\r\n            throw new TypeError('Function \\'all\\' must be specified.');\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {PromiseAdapter};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/promise-adapter.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/promise-parser.js":
/*!*******************************************************!*\
  !*** ./node_modules/pg-promise/lib/promise-parser.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {PromiseAdapter} = __webpack_require__(/*! ./promise-adapter */ \"./node_modules/pg-promise/lib/promise-adapter.js\");\r\n\r\n//////////////////////////////////////////\r\n// Parses and validates a promise library;\r\nfunction parse(pl) {\r\n\r\n    let promise;\r\n    if (pl instanceof PromiseAdapter) {\r\n        promise = function (func) {\r\n            return pl.create(func);\r\n        };\r\n        promise.resolve = pl.resolve;\r\n        promise.reject = pl.reject;\r\n        promise.all = pl.all;\r\n        return promise;\r\n    }\r\n    const t = typeof pl;\r\n    if (t === 'function' || t === 'object') {\r\n        const Root = typeof pl.Promise === 'function' ? pl.Promise : pl;\r\n        promise = function (func) {\r\n            return new Root(func);\r\n        };\r\n        promise.resolve = Root.resolve;\r\n        promise.reject = Root.reject;\r\n        promise.all = Root.all;\r\n        if (typeof promise.resolve === 'function' &&\r\n            typeof promise.reject === 'function' &&\r\n            typeof promise.all === 'function') {\r\n            return promise;\r\n        }\r\n    }\r\n\r\n    throw new TypeError('Invalid promise library specified.');\r\n}\r\n\r\nfunction parsePromise(promiseLib) {\r\n    const result = {promiseLib};\r\n    if (promiseLib) {\r\n        result.promise = parse(promiseLib);\r\n    } else {\r\n        result.promise = parse(Promise);\r\n        result.promiseLib = Promise;\r\n    }\r\n    return result;\r\n}\r\n\r\nmodule.exports = {parsePromise};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/promise-parser.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/query-file.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-promise/lib/query-file.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = __webpack_require__(/*! ./inner-state */ \"./node_modules/pg-promise/lib/inner-state.js\");\r\nconst {QueryFileError} = __webpack_require__(/*! ./errors */ \"./node_modules/pg-promise/lib/errors/index.js\");\r\nconst {assert} = __webpack_require__(/*! ./assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\nconst {ColorConsole} = __webpack_require__(/*! ./utils/color */ \"./node_modules/pg-promise/lib/utils/color.js\");\r\n\r\nconst npm = {\r\n    fs: __webpack_require__(/*! fs */ \"fs\"),\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    path: __webpack_require__(/*! path */ \"path\"),\r\n    minify: __webpack_require__(/*! pg-minify */ \"./node_modules/pg-minify/lib/index.js\"),\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    formatting: __webpack_require__(/*! ./formatting */ \"./node_modules/pg-promise/lib/formatting.js\")\r\n};\r\n\r\nconst file$query = Symbol('QueryFile.query');\r\n\r\n/**\r\n * @class QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * **IMPORTANT:** You should only create a single reusable object per file, in order to avoid repeated file reads,\r\n * as the IO is a very expensive resource. If you do not follow it, you will be seeing the following warning:\r\n * `Creating a duplicate QueryFile object for the same file`, which signals a bad-use pattern.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link QueryFile#toPostgres toPostgres}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * const {QueryFile} = require('pg-promise');\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     const fullPath = joinPath(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * const db = require('./db'); // our database module;\r\n * const {users: sql} = require('./sql'); // sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: (name, age) => db.none(sql.add, [name, age]),\r\n *     findUser: name => db.any(sql.search, name)\r\n * };\r\n *\r\n */\r\nclass QueryFile extends InnerState {\r\n\r\n    constructor(file, options) {\r\n\r\n        let filePath = file;\r\n\r\n        options = assert(options, {\r\n            debug: npm.utils.isDev(),\r\n            minify: (options && options.compress && options.minify === undefined) ? true : undefined,\r\n            compress: undefined,\r\n            params: undefined,\r\n            noWarnings: undefined\r\n        });\r\n\r\n        if (npm.utils.isText(filePath) && !npm.path.isAbsolute(filePath)) {\r\n            filePath = npm.path.join(npm.utils.startDir, filePath);\r\n        }\r\n\r\n        const {usedPath} = QueryFile.instance;\r\n\r\n        // istanbul ignore next:\r\n        if (!options.noWarnings) {\r\n            if (filePath in usedPath) {\r\n                usedPath[filePath]++;\r\n                ColorConsole.warn(`WARNING: Creating a duplicate QueryFile object for the same file - \\n    ${filePath}\\n${npm.utils.getLocalStack(2, 3)}\\n`);\r\n            } else {\r\n                usedPath[filePath] = 0;\r\n            }\r\n        }\r\n\r\n        const _inner = {\r\n            file,\r\n            filePath,\r\n            options,\r\n            sql: undefined,\r\n            error: undefined,\r\n            ready: undefined,\r\n            modTime: undefined\r\n        };\r\n\r\n        super(_inner);\r\n\r\n        this.prepare();\r\n    }\r\n\r\n    /**\r\n     * Global instance of the file-path repository.\r\n     *\r\n     * @return {{usedPath: {}}}\r\n     */\r\n    static get instance() {\r\n        const s = Symbol.for('pgPromiseQueryFile');\r\n        let scope = global[s];\r\n        if (!scope) {\r\n            scope = {\r\n                usedPath: {} // used-path look-up dictionary\r\n            };\r\n            global[s] = scope;\r\n        }\r\n        return scope;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#Symbol(QueryFile.$query)\r\n     * @type {string}\r\n     * @default undefined\r\n     * @readonly\r\n     * @private\r\n     * @summary Prepared query string.\r\n     * @description\r\n     * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n     *\r\n     * **IMPORTANT:** This property is for internal use by the library only, never use this\r\n     * property directly from your code.\r\n     */\r\n    get [file$query]() {\r\n        return this._inner.sql;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#error\r\n     * @type {errors.QueryFileError}\r\n     * @default undefined\r\n     * @readonly\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n     */\r\n    get error() {\r\n        return this._inner.error;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#file\r\n     * @type {string}\r\n     * @readonly\r\n     * @description\r\n     * File name that was passed into the constructor.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    get file() {\r\n        return this._inner.file;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#options\r\n     * @type {QueryFile.Options}\r\n     * @readonly\r\n     * @description\r\n     * Set of options, as configured during the object's construction.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    get options() {\r\n        return this._inner.options;\r\n    }\r\n\r\n    /**\r\n     * @summary Prepares the query for execution.\r\n     * @description\r\n     * If the query hasn't been prepared yet, it will read the file and process the content according\r\n     * to the parameters passed into the constructor.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [throwErrors=false]\r\n     * Throw any error encountered.\r\n     */\r\n    prepare(throwErrors) {\r\n        const i = this._inner, options = i.options;\r\n        let lastMod;\r\n        if (options.debug && i.ready) {\r\n            try {\r\n                lastMod = npm.fs.statSync(i.filePath).mtime.getTime();\r\n                // istanbul ignore if;\r\n                if (lastMod === i.modTime) {\r\n                    return;\r\n                }\r\n                i.ready = false;\r\n            } catch (e) {\r\n                i.sql = undefined;\r\n                i.ready = false;\r\n                i.error = e;\r\n                if (throwErrors) {\r\n                    throw i.error;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (i.ready) {\r\n            return;\r\n        }\r\n        try {\r\n            i.sql = npm.fs.readFileSync(i.filePath, 'utf8');\r\n            i.modTime = lastMod || npm.fs.statSync(i.filePath).mtime.getTime();\r\n            if (options.minify && options.minify !== 'after') {\r\n                i.sql = npm.minify(i.sql, {compress: options.compress});\r\n            }\r\n            if (options.params !== undefined) {\r\n                i.sql = npm.formatting.as.format(i.sql, options.params, {partial: true});\r\n            }\r\n            if (options.minify && options.minify === 'after') {\r\n                i.sql = npm.minify(i.sql, {compress: options.compress});\r\n            }\r\n            i.ready = true;\r\n            i.error = undefined;\r\n        } catch (e) {\r\n            i.sql = undefined;\r\n            i.error = new QueryFileError(e, this);\r\n            if (throwErrors) {\r\n                throw i.error;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Hiding the query as a symbol within the type,\r\n// to make it even more difficult to misuse it:\r\nQueryFile.$query = file$query;\r\n\r\n/**\r\n * @method QueryFile#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const query = qf[ctf.toPostgres](); // qf = an object of type QueryFile\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `QueryFile` injects SQL as raw text.\r\n *\r\n * If you need to support type `QueryFile` outside of query methods, this is the only safe way to get the most current SQL.\r\n * And you would want to use this method dynamically, as it reloads the SQL automatically, if option `debug` is set.\r\n * See {@link QueryFile.Options Options}.\r\n *\r\n * @param {QueryFile} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * SQL string from the file, according to the {@link QueryFile.Options options} specified.\r\n *\r\n */\r\nQueryFile.prototype[npm.formatting.as.ctf.toPostgres] = function (self) {\r\n    self = this instanceof QueryFile && this || self;\r\n    self.prepare(true);\r\n    return self[QueryFile.$query];\r\n};\r\n\r\nQueryFile.prototype[npm.formatting.as.ctf.rawType] = true; // use as pre-formatted\r\n\r\n/**\r\n * @method QueryFile#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFile.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = npm.utils.messageGap(level + 1);\r\n    const lines = [\r\n        'QueryFile {'\r\n    ];\r\n    this.prepare();\r\n    lines.push(gap + 'file: \"' + this.file + '\"');\r\n    lines.push(gap + 'options: ' + npm.utils.toJson(this.options));\r\n    if (this.error) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    } else {\r\n        lines.push(gap + 'query: \"' + this[QueryFile.$query] + '\"');\r\n    }\r\n    lines.push(npm.utils.messageGap(level) + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryFile, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {QueryFile};\r\n\r\n/**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n *\r\n * @property {boolean} noWarnings=false\r\n * Suppresses all warnings produced by the class. It is not recommended for general use, only in specific tests\r\n * that may require it.\r\n *\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/query-file.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/query-result.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-promise/lib/query-result.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n * @alias queryResult\r\n * @readonly\r\n * @description\r\n * **Query Result Mask**\r\n *\r\n * Binary mask that represents the number of rows expected from a query method,\r\n * used by generic {@link Database#query query} method, plus {@link Database#func func}.\r\n *\r\n * The mask is always the last optional parameter, which defaults to `queryResult.any`.\r\n *\r\n * Any combination of flags is supported, except for `one + many`.\r\n *\r\n * The type is available from the library's root: `pgp.queryResult`.\r\n *\r\n * @see {@link Database#query Database.query}, {@link Database#func Database.func}\r\n */\r\nconst queryResult = {\r\n    /** Single row is expected, to be resolved as a single row-object. */\r\n    one: 1,\r\n    /** One or more rows expected, to be resolved as an array, with at least 1 row-object. */\r\n    many: 2,\r\n    /** Expecting no rows, to be resolved with `null`. */\r\n    none: 4,\r\n    /** `many|none` - any result is expected, to be resolved with an array of rows-objects. */\r\n    any: 6\r\n};\r\n\r\nmodule.exports = {queryResult};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/query-result.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/query.js":
/*!**********************************************!*\
  !*** ./node_modules/pg-promise/lib/query.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Events} = __webpack_require__(/*! ./events */ \"./node_modules/pg-promise/lib/events.js\");\r\nconst {QueryFile} = __webpack_require__(/*! ./query-file */ \"./node_modules/pg-promise/lib/query-file.js\");\r\nconst {ServerFormatting, PreparedStatement, ParameterizedQuery} = __webpack_require__(/*! ./types */ \"./node_modules/pg-promise/lib/types/index.js\");\r\nconst {SpecialQuery} = __webpack_require__(/*! ./special-query */ \"./node_modules/pg-promise/lib/special-query.js\");\r\nconst {queryResult} = __webpack_require__(/*! ./query-result */ \"./node_modules/pg-promise/lib/query-result.js\");\r\n\r\nconst npm = {\r\n    util: __webpack_require__(/*! util */ \"util\"),\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    formatting: __webpack_require__(/*! ./formatting */ \"./node_modules/pg-promise/lib/formatting.js\"),\r\n    errors: __webpack_require__(/*! ./errors */ \"./node_modules/pg-promise/lib/errors/index.js\"),\r\n    stream: __webpack_require__(/*! ./stream */ \"./node_modules/pg-promise/lib/stream.js\"),\r\n    text: __webpack_require__(/*! ./text */ \"./node_modules/pg-promise/lib/text.js\")\r\n};\r\n\r\nconst QueryResultError = npm.errors.QueryResultError,\r\n    InternalError = npm.utils.InternalError,\r\n    qrec = npm.errors.queryResultErrorCode;\r\n\r\nconst badMask = queryResult.one | queryResult.many; // unsupported combination bit-mask;\r\n\r\n//////////////////////////////\r\n// Generic query method;\r\nfunction $query(ctx, query, values, qrm, config) {\r\n\r\n    const special = qrm instanceof SpecialQuery && qrm;\r\n    const $p = config.promise;\r\n\r\n    if (special && special.isStream) {\r\n        return npm.stream.call(this, ctx, query, values, config);\r\n    }\r\n\r\n    const opt = ctx.options,\r\n        capSQL = opt.capSQL;\r\n\r\n    let error, entityType,\r\n        pgFormatting = opt.pgFormatting,\r\n        params = pgFormatting ? values : undefined;\r\n\r\n    if (typeof query === 'function') {\r\n        try {\r\n            query = npm.formatting.resolveFunc(query, values);\r\n        } catch (e) {\r\n            error = e;\r\n            params = values;\r\n            query = npm.util.inspect(query);\r\n        }\r\n    }\r\n\r\n    if (!error && !query) {\r\n        error = new TypeError(npm.text.invalidQuery);\r\n    }\r\n\r\n    if (!error && typeof query === 'object') {\r\n        if (query instanceof QueryFile) {\r\n            query.prepare();\r\n            if (query.error) {\r\n                error = query.error;\r\n                query = query.file;\r\n            } else {\r\n                query = query[QueryFile.$query];\r\n            }\r\n        } else {\r\n            if ('entity' in query) {\r\n                entityType = query.type;\r\n                query = query.entity; // query is a function name;\r\n            } else {\r\n                if (query instanceof ServerFormatting) {\r\n                    pgFormatting = true;\r\n                } else {\r\n                    if ('name' in query) {\r\n                        query = new PreparedStatement(query);\r\n                        pgFormatting = true;\r\n                    } else {\r\n                        if ('text' in query) {\r\n                            query = new ParameterizedQuery(query);\r\n                            pgFormatting = true;\r\n                        }\r\n                    }\r\n                }\r\n                if (query instanceof ServerFormatting && !npm.utils.isNull(values)) {\r\n                    query.values = values;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!error) {\r\n        if (!pgFormatting && !npm.utils.isText(query)) {\r\n            const errTxt = entityType ? (entityType === 'func' ? npm.text.invalidFunction : npm.text.invalidProc) : npm.text.invalidQuery;\r\n            error = new TypeError(errTxt);\r\n        }\r\n        if (query instanceof ServerFormatting) {\r\n            const qp = query.parse();\r\n            if (qp instanceof Error) {\r\n                error = qp;\r\n            } else {\r\n                query = qp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!error && !special) {\r\n        if (npm.utils.isNull(qrm)) {\r\n            qrm = queryResult.any; // default query result;\r\n        } else {\r\n            if (qrm !== parseInt(qrm) || (qrm & badMask) === badMask || qrm < 1 || qrm > 6) {\r\n                error = new TypeError(npm.text.invalidMask);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!error && (!pgFormatting || entityType)) {\r\n        try {\r\n            // use 'pg-promise' implementation of values formatting;\r\n            if (entityType) {\r\n                params = undefined;\r\n                query = npm.formatting.formatEntity(query, values, {capSQL, type: entityType});\r\n            } else {\r\n                query = npm.formatting.formatQuery(query, values);\r\n            }\r\n        } catch (e) {\r\n            if (entityType) {\r\n                let prefix = entityType === 'func' ? 'select * from' : 'call';\r\n                if (capSQL) {\r\n                    prefix = prefix.toUpperCase();\r\n                }\r\n                query = prefix + ' ' + query + '(...)';\r\n            } else {\r\n                params = values;\r\n            }\r\n            error = e instanceof Error ? e : new npm.utils.InternalError(e);\r\n        }\r\n    }\r\n\r\n    return $p((resolve, reject) => {\r\n\r\n        if (notifyReject()) {\r\n            return;\r\n        }\r\n        error = Events.query(opt, getContext());\r\n        if (notifyReject()) {\r\n            return;\r\n        }\r\n        try {\r\n            const start = Date.now();\r\n            ctx.db.client.query(query, params, (err, result) => {\r\n                let data, multiResult, lastResult = result;\r\n                if (err) {\r\n                    // istanbul ignore if (auto-testing connectivity issues is too problematic)\r\n                    if (npm.utils.isConnectivityError(err)) {\r\n                        ctx.db.client.$connectionError = err;\r\n                    }\r\n                    err.query = err.query || query;\r\n                    err.params = err.params || params;\r\n                    error = err;\r\n                } else {\r\n                    multiResult = Array.isArray(result);\r\n                    if (multiResult) {\r\n                        lastResult = result[result.length - 1];\r\n                        for (let i = 0; i < result.length; i++) {\r\n                            const r = result[i];\r\n                            makeIterable(r);\r\n                            error = Events.receive(opt, r.rows, r, getContext());\r\n                            if (error) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        makeIterable(result);\r\n                        result.duration = Date.now() - start;\r\n                        error = Events.receive(opt, result.rows, result, getContext());\r\n                    }\r\n                }\r\n                if (!error) {\r\n                    data = lastResult;\r\n                    if (special) {\r\n                        if (special.isMultiResult) {\r\n                            data = multiResult ? result : [result]; // method .multiResult() is called\r\n                        }\r\n                        // else, method .result() is called\r\n                    } else {\r\n                        data = data.rows;\r\n                        const len = data.length;\r\n                        if (len) {\r\n                            if (len > 1 && qrm & queryResult.one) {\r\n                                // one row was expected, but returned multiple;\r\n                                error = new QueryResultError(qrec.multiple, lastResult, query, params);\r\n                            } else {\r\n                                if (!(qrm & (queryResult.one | queryResult.many))) {\r\n                                    // no data should have been returned;\r\n                                    error = new QueryResultError(qrec.notEmpty, lastResult, query, params);\r\n                                } else {\r\n                                    if (!(qrm & queryResult.many)) {\r\n                                        data = data[0];\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // no data returned;\r\n                            if (qrm & queryResult.none) {\r\n                                if (qrm & queryResult.one) {\r\n                                    data = null;\r\n                                } else {\r\n                                    data = qrm & queryResult.many ? data : null;\r\n                                }\r\n                            } else {\r\n                                error = new QueryResultError(qrec.noData, lastResult, query, params);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!notifyReject()) {\r\n                    resolve(data);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            // this can only happen as a result of an internal failure within node-postgres,\r\n            // like during a sudden loss of communications, which is impossible to reproduce\r\n            // automatically, so removing it from the test coverage:\r\n            // istanbul ignore next\r\n            error = e;\r\n        }\r\n\r\n        function getContext() {\r\n            let client;\r\n            if (ctx.db) {\r\n                client = ctx.db.client;\r\n            } else {\r\n                error = new Error(npm.text.looseQuery);\r\n            }\r\n            return {\r\n                client, query, params,\r\n                dc: ctx.dc,\r\n                ctx: ctx.ctx\r\n            };\r\n        }\r\n\r\n        notifyReject();\r\n\r\n        function notifyReject() {\r\n            const context = getContext();\r\n            if (error) {\r\n                if (error instanceof InternalError) {\r\n                    error = error.error;\r\n                }\r\n                Events.error(opt, error, context);\r\n                reject(error);\r\n                return true;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Extends Result to provide iterable for the rows;\r\n//\r\n// To be removed once the following PR is merged amd released:\r\n// https://github.com/brianc/node-postgres/pull/2861\r\nfunction makeIterable(r) {\r\n    r[Symbol.iterator] = function () {\r\n        return this.rows.values();\r\n    };\r\n}\r\n\r\nmodule.exports = config => {\r\n    return function (ctx, query, values, qrm) {\r\n        return $query.call(this, ctx, query, values, qrm, config);\r\n    };\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/query.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/special-query.js":
/*!******************************************************!*\
  !*** ./node_modules/pg-promise/lib/special-query.js ***!
  \******************************************************/
/***/ ((module) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst specialQueryType = {\r\n    result: 0,\r\n    multiResult: 1,\r\n    stream: 2\r\n};\r\n\r\nclass SpecialQuery {\r\n    constructor(type) {\r\n        this.isResult = type === specialQueryType.result; // type used implicitly\r\n        this.isStream = type === specialQueryType.stream;\r\n        this.isMultiResult = type === specialQueryType.multiResult;\r\n    }\r\n}\r\n\r\nconst cache = {\r\n    resultQuery: new SpecialQuery(specialQueryType.result),\r\n    multiResultQuery: new SpecialQuery(specialQueryType.multiResult),\r\n    streamQuery: new SpecialQuery(specialQueryType.stream)\r\n};\r\n\r\nmodule.exports = Object.assign({SpecialQuery}, cache);\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/special-query.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/stream.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-promise/lib/stream.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Events} = __webpack_require__(/*! ./events */ \"./node_modules/pg-promise/lib/events.js\");\r\n\r\nconst npm = {\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    text: __webpack_require__(/*! ./text */ \"./node_modules/pg-promise/lib/text.js\")\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Streams query data into any destination,\r\n// with the help of pg-query-stream library.\r\nfunction $stream(ctx, qs, initCB, config) {\r\n\r\n    const $p = config.promise;\r\n\r\n    // istanbul ignore next:\r\n    // we do not provide code coverage for the Native Bindings specifics\r\n    if (ctx.options.pgNative) {\r\n        return $p.reject(new Error(npm.text.nativeStreaming));\r\n    }\r\n    // Stream class was renamed again, see the following issue:\r\n    // https://github.com/brianc/node-postgres/issues/2412\r\n    if (!qs || !qs.constructor || qs.constructor.name !== 'QueryStream') {\r\n        // invalid or missing stream object;\r\n        return $p.reject(new TypeError(npm.text.invalidStream));\r\n    }\r\n    if (qs._reading || qs._closed) {\r\n        // stream object is in the wrong state;\r\n        return $p.reject(new Error(npm.text.invalidStreamState));\r\n    }\r\n    if (typeof initCB !== 'function') {\r\n        // parameter `initCB` must be passed as the initialization callback;\r\n        return $p.reject(new TypeError(npm.text.invalidStreamCB));\r\n    }\r\n\r\n    let error = Events.query(ctx.options, getContext());\r\n\r\n    if (error) {\r\n        error = getError(error);\r\n        Events.error(ctx.options, error, getContext());\r\n        return $p.reject(error);\r\n    }\r\n\r\n    const stream = ctx.db.client.query(qs);\r\n\r\n    stream.on('data', onData);\r\n    stream.on('error', onError);\r\n    stream.on('end', onEnd);\r\n\r\n    try {\r\n        initCB.call(this, stream); // the stream must be initialized during the call;\r\n    } catch (e) {\r\n        release();\r\n        error = getError(e);\r\n        Events.error(ctx.options, error, getContext());\r\n        return $p.reject(error);\r\n    }\r\n\r\n    const start = Date.now();\r\n    let resolve, reject, nRows = 0;\r\n\r\n    function onData(data) {\r\n        nRows++;\r\n        error = Events.receive(ctx.options, [data], undefined, getContext());\r\n        if (error) {\r\n            onError(error);\r\n        }\r\n    }\r\n\r\n    function onError(e) {\r\n        release();\r\n        stream.destroy();\r\n        e = getError(e);\r\n        Events.error(ctx.options, e, getContext());\r\n        reject(e);\r\n    }\r\n\r\n    function onEnd() {\r\n        release();\r\n        resolve({\r\n            processed: nRows, // total number of rows processed;\r\n            duration: Date.now() - start // duration, in milliseconds;\r\n        });\r\n    }\r\n\r\n    function release() {\r\n        stream.removeListener('data', onData);\r\n        stream.removeListener('error', onError);\r\n        stream.removeListener('end', onEnd);\r\n    }\r\n\r\n    function getError(e) {\r\n        return e instanceof npm.utils.InternalError ? e.error : e;\r\n    }\r\n\r\n    function getContext() {\r\n        let client;\r\n        if (ctx.db) {\r\n            client = ctx.db.client;\r\n        } else {\r\n            error = new Error(npm.text.looseQuery);\r\n        }\r\n        return {\r\n            client,\r\n            dc: ctx.dc,\r\n            query: qs.cursor.text,\r\n            params: qs.cursor.values,\r\n            ctx: ctx.ctx\r\n        };\r\n    }\r\n\r\n    return $p((res, rej) => {\r\n        resolve = res;\r\n        reject = rej;\r\n    });\r\n\r\n}\r\n\r\nmodule.exports = $stream;\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/stream.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/task.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-promise/lib/task.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Events} = __webpack_require__(/*! ./events */ \"./node_modules/pg-promise/lib/events.js\");\r\n\r\nconst npm = {\r\n    spex: __webpack_require__(/*! spex */ \"./node_modules/spex/lib/index.js\"),\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    mode: __webpack_require__(/*! ./tx-mode */ \"./node_modules/pg-promise/lib/tx-mode.js\"),\r\n    query: __webpack_require__(/*! ./query */ \"./node_modules/pg-promise/lib/query.js\"),\r\n    text: __webpack_require__(/*! ./text */ \"./node_modules/pg-promise/lib/text.js\")\r\n};\r\n\r\n/**\r\n * @interface Task\r\n * @description\r\n * Extends {@link Database} for an automatic connection session, with methods for executing multiple database queries.\r\n *\r\n * The type isn't available directly, it can only be created via methods {@link Database#task Database.task}, {@link Database#tx Database.tx},\r\n * or their derivations.\r\n *\r\n * When executing more than one request at a time, one should allocate and release the connection only once,\r\n * while executing all the required queries within the same connection session. More importantly, a transaction\r\n * can only work within a single connection.\r\n *\r\n * This is an interface for tasks/transactions to implement a connection session, during which you can\r\n * execute multiple queries against the same connection that's released automatically when the task/transaction is finished.\r\n *\r\n * Each task/transaction manages the connection automatically. When executed on the root {@link Database} object, the connection\r\n * is allocated from the pool, and once the method's callback has finished, the connection is released back to the pool.\r\n * However, when invoked inside another task or transaction, the method reuses the parent connection.\r\n *\r\n * @see\r\n * {@link Task#ctx ctx},\r\n * {@link Task#batch batch},\r\n * {@link Task#sequence sequence},\r\n * {@link Task#page page}\r\n *\r\n * @example\r\n * db.task(t => {\r\n *       // t = task protocol context;\r\n *       // t.ctx = Task Context;\r\n *       return t.one('select * from users where id=$1', 123)\r\n *           .then(user => {\r\n *               return t.any('select * from events where login=$1', user.name);\r\n *           });\r\n *   })\r\n * .then(events => {\r\n *       // success;\r\n *   })\r\n * .catch(error => {\r\n *       // error;\r\n *   });\r\n *\r\n */\r\nfunction Task(ctx, tag, isTX, config) {\r\n\r\n    const $p = config.promise;\r\n\r\n    /**\r\n     * @member {TaskContext} Task#ctx\r\n     * @readonly\r\n     * @description\r\n     * Task/Transaction Context object - contains individual properties for each task/transaction.\r\n     *\r\n     * @see event {@link event:query query}\r\n     *\r\n     * @example\r\n     *\r\n     * db.task(t => {\r\n     *     return t.ctx; // task context object\r\n     * })\r\n     *     .then(ctx => {\r\n     *         console.log('Task Duration:', ctx.duration);\r\n     *     });\r\n     *\r\n     * @example\r\n     *\r\n     * db.tx(t => {\r\n     *     return t.ctx; // transaction context object\r\n     * })\r\n     *     .then(ctx => {\r\n     *         console.log('Transaction Duration:', ctx.duration);\r\n     *     });\r\n     */\r\n    this.ctx = ctx.ctx = {}; // task context object;\r\n\r\n    npm.utils.addReadProp(this.ctx, 'isTX', isTX);\r\n\r\n    if ('context' in ctx) {\r\n        npm.utils.addReadProp(this.ctx, 'context', ctx.context);\r\n    }\r\n\r\n    npm.utils.addReadProp(this.ctx, 'connected', !ctx.db);\r\n    npm.utils.addReadProp(this.ctx, 'tag', tag);\r\n    npm.utils.addReadProp(this.ctx, 'dc', ctx.dc);\r\n    npm.utils.addReadProp(this.ctx, 'level', ctx.level);\r\n    npm.utils.addReadProp(this.ctx, 'inTransaction', ctx.inTransaction);\r\n\r\n    if (isTX) {\r\n        npm.utils.addReadProp(this.ctx, 'txLevel', ctx.txLevel);\r\n    }\r\n\r\n    npm.utils.addReadProp(this.ctx, 'parent', ctx.parentCtx);\r\n\r\n    // generic query method;\r\n    this.query = function (query, values, qrm) {\r\n        if (!ctx.db) {\r\n            return $p.reject(new Error(npm.text.looseQuery));\r\n        }\r\n        return config.$npm.query.call(this, ctx, query, values, qrm);\r\n    };\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using <b>async/await</b> syntax instead, or if you must have\r\n     * pre-generated promises, then $[Promise.allSettled].\r\n     *\r\n     * @method Task#batch\r\n     * @description\r\n     * Settles a predefined array of mixed values by redirecting to method $[spex.batch].\r\n     *\r\n     * For complete method documentation see $[spex.batch].\r\n     *\r\n     * @param {array} values\r\n     * @param {Object} [options]\r\n     * Optional Parameters.\r\n     * @param {function} [options.cb]\r\n     *\r\n     * @returns {external:Promise}\r\n     */\r\n    this.batch = function (values, options) {\r\n        return config.$npm.spex.batch.call(this, values, options);\r\n    };\r\n\r\n    /**\r\n     * @method Task#page\r\n     * @description\r\n     * Resolves a dynamic sequence of arrays/pages with mixed values, by redirecting to method $[spex.page].\r\n     *\r\n     * For complete method documentation see $[spex.page].\r\n     *\r\n     * @param {function} source\r\n     * @param {Object} [options]\r\n     * Optional Parameters.\r\n     * @param {function} [options.dest]\r\n     * @param {number} [options.limit=0]\r\n     *\r\n     * @returns {external:Promise}\r\n     */\r\n    this.page = function (source, options) {\r\n        return config.$npm.spex.page.call(this, source, options);\r\n    };\r\n\r\n    /**\r\n     * @method Task#sequence\r\n     * @description\r\n     * Resolves a dynamic sequence of mixed values by redirecting to method $[spex.sequence].\r\n     *\r\n     * For complete method documentation see $[spex.sequence].\r\n     *\r\n     * @param {function} source\r\n     * @param {Object} [options]\r\n     * Optional Parameters.\r\n     * @param {function} [options.dest]\r\n     * @param {number} [options.limit=0]\r\n     * @param {boolean} [options.track=false]\r\n     *\r\n     * @returns {external:Promise}\r\n     */\r\n    this.sequence = function (source, options) {\r\n        return config.$npm.spex.sequence.call(this, source, options);\r\n    };\r\n\r\n}\r\n\r\n/**\r\n * @private\r\n * @method Task.callback\r\n * Callback invocation helper.\r\n *\r\n * @param ctx\r\n * @param obj\r\n * @param cb\r\n * @param config\r\n * @returns {Promise.<TResult>}\r\n */\r\nconst callback = (ctx, obj, cb, config) => {\r\n\r\n    const $p = config.promise;\r\n    let result;\r\n\r\n    try {\r\n        if (cb.constructor.name === 'GeneratorFunction') {\r\n            // v9.0 dropped all support for ES6 generator functions;\r\n            // Clients should use the new ES7 async/await syntax.\r\n            throw new TypeError('ES6 generator functions are no longer supported!');\r\n        }\r\n        result = cb.call(obj, obj); // invoking the callback function;\r\n    } catch (err) {\r\n        Events.error(ctx.options, err, {\r\n            client: ctx.db && ctx.db.client, // the error can be due to loss of connectivity\r\n            dc: ctx.dc,\r\n            ctx: ctx.ctx\r\n        });\r\n        return $p.reject(err); // reject with the error;\r\n    }\r\n    if (result && typeof result.then === 'function') {\r\n        return result; // result is a valid promise object;\r\n    }\r\n    return $p.resolve(result);\r\n};\r\n\r\n/**\r\n * @private\r\n * @method Task.execute\r\n * Executes a task.\r\n *\r\n * @param ctx\r\n * @param obj\r\n * @param isTX\r\n * @param config\r\n * @returns {Promise.<TResult>}\r\n */\r\nconst execute = (ctx, obj, isTX, config) => {\r\n\r\n    const $p = config.promise;\r\n\r\n    // updates the task context and notifies the client;\r\n    function update(start, success, result) {\r\n        const c = ctx.ctx;\r\n        if (start) {\r\n            npm.utils.addReadProp(c, 'start', new Date());\r\n        } else {\r\n            c.finish = new Date();\r\n            c.success = success;\r\n            c.result = result;\r\n            c.duration = c.finish - c.start;\r\n        }\r\n        (isTX ? Events.transact : Events.task)(ctx.options, {\r\n            client: ctx.db && ctx.db.client, // loss of connectivity is possible at this point\r\n            dc: ctx.dc,\r\n            ctx: c\r\n        });\r\n    }\r\n\r\n    let cbData, cbReason, success,\r\n        spName; // Save-Point Name;\r\n\r\n    const capSQL = ctx.options.capSQL; // capitalize sql;\r\n\r\n    update(true);\r\n\r\n    if (isTX) {\r\n        // executing a transaction;\r\n        spName = `sp_${ctx.txLevel}_${ctx.nextTxCount}`;\r\n        return begin()\r\n            .then(() => callback(ctx, obj, ctx.cb, config)\r\n                .then(data => {\r\n                    cbData = data; // save callback data;\r\n                    success = true;\r\n                    return commit();\r\n                }, err => {\r\n                    cbReason = err; // save callback failure reason;\r\n                    return rollback();\r\n                })\r\n                .then(() => {\r\n                    if (success) {\r\n                        update(false, true, cbData);\r\n                        return cbData;\r\n                    }\r\n                    update(false, false, cbReason);\r\n                    return $p.reject(cbReason);\r\n                },\r\n                err => {\r\n                    // either COMMIT or ROLLBACK has failed, which is impossible\r\n                    // to replicate in a test environment, so skipping from the test;\r\n                    // istanbul ignore next:\r\n                    update(false, false, err);\r\n                    // istanbul ignore next:\r\n                    return $p.reject(err);\r\n                }),\r\n            err => {\r\n                // BEGIN has failed, which is impossible to replicate in a test\r\n                // environment, so skipping the whole block from the test;\r\n                // istanbul ignore next:\r\n                update(false, false, err);\r\n                // istanbul ignore next:\r\n                return $p.reject(err);\r\n            });\r\n    }\r\n\r\n    function begin() {\r\n        if (!ctx.txLevel && ctx.mode instanceof npm.mode.TransactionMode) {\r\n            return exec(ctx.mode.begin(capSQL), 'savepoint');\r\n        }\r\n        return exec('begin', 'savepoint');\r\n    }\r\n\r\n    function commit() {\r\n        return exec('commit', 'release savepoint');\r\n    }\r\n\r\n    function rollback() {\r\n        return exec('rollback', 'rollback to savepoint');\r\n    }\r\n\r\n    function exec(top, nested) {\r\n        if (ctx.txLevel) {\r\n            return obj.none((capSQL ? nested.toUpperCase() : nested) + ' ' + spName);\r\n        }\r\n        return obj.none(capSQL ? top.toUpperCase() : top);\r\n    }\r\n\r\n    // executing a task;\r\n    return callback(ctx, obj, ctx.cb, config)\r\n        .then(data => {\r\n            update(false, true, data);\r\n            return data;\r\n        })\r\n        .catch(error => {\r\n            update(false, false, error);\r\n            return $p.reject(error);\r\n        });\r\n};\r\n\r\nmodule.exports = config => {\r\n    const npmLocal = config.$npm;\r\n\r\n    // istanbul ignore next:\r\n    // we keep 'npm.query' initialization here, even though it is always\r\n    // pre-initialized by the 'database' module, for integrity purpose.\r\n    npmLocal.query = npmLocal.query || npm.query(config);\r\n    npmLocal.spex = npmLocal.spex || npm.spex(config.promiseLib);\r\n\r\n    return {\r\n        Task, execute, callback\r\n    };\r\n};\r\n\r\n/**\r\n * @typedef TaskContext\r\n * @description\r\n * Task/Transaction Context used via property {@link Task#ctx ctx} inside tasks (methods {@link Database#task Database.task} and {@link Database#taskIf Database.taskIf})\r\n * and transactions (methods {@link Database#tx Database.tx} and {@link Database#txIf Database.txIf}).\r\n *\r\n * Properties `context`, `connected`, `parent`, `level`, `dc`, `isTX`, `tag`, `start`, `useCount` and `serverVersion` are set just before the operation has started,\r\n * while properties `finish`, `duration`, `success` and `result` are set immediately after the operation has finished.\r\n *\r\n * @property {*} context\r\n * If the operation was invoked with a calling context - `task.call(context,...)` or `tx.call(context,...)`,\r\n * this property is set with the context that was passed in. Otherwise, the property doesn't exist.\r\n *\r\n * @property {*} dc\r\n * _Database Context_ that was passed into the {@link Database} object during construction.\r\n *\r\n * @property {boolean} isTX\r\n * Indicates whether this operation is a transaction (as opposed to a regular task).\r\n *\r\n * @property {number} duration\r\n * Number of milliseconds consumed by the operation.\r\n *\r\n * Set after the operation has finished, it is simply a shortcut for `finish - start`.\r\n *\r\n * @property {number} level\r\n * Task nesting level, starting from 0, counting both regular tasks and transactions.\r\n *\r\n * @property {number} txLevel\r\n * Transaction nesting level, starting from 0. Transactions on level 0 use `BEGIN/COMMIT/ROLLBACK`,\r\n * while transactions on nested levels use the corresponding `SAVEPOINT` commands.\r\n *\r\n * This property exists only within the context of a transaction (`isTX = true`).\r\n *\r\n * @property {boolean} inTransaction\r\n * Available in both tasks and transactions, it simplifies checking when there is a transaction\r\n * going on either on this level or above.\r\n *\r\n * For example, when you want to check for a containing transaction while inside a task, and\r\n * only start a transaction when there is none yet.\r\n *\r\n * @property {TaskContext} parent\r\n * Parent task/transaction context, or `null` when it is top-level.\r\n *\r\n * @property {boolean} connected\r\n * Indicates when the task/transaction acquired the connection on its own (`connected = true`), and will release it once\r\n * the operation has finished. When the value is `false`, the operation is reusing an existing connection.\r\n *\r\n * @property {*} tag\r\n * Tag value as it was passed into the task. See methods {@link Database#task task} and {@link Database#tx tx}.\r\n *\r\n * @property {Date} start\r\n * Date/Time of when this operation started the execution.\r\n *\r\n * @property {number} useCount\r\n * Number of times the connection has been previously used, starting with 0 for a freshly\r\n * allocated physical connection.\r\n *\r\n * @property {string} serverVersion\r\n * Version of the PostgreSQL server to which we are connected.\r\n * Not available with $[Native Bindings].\r\n *\r\n * @property {Date} finish\r\n * Once the operation has finished, this property is set to the Data/Time of when it happened.\r\n *\r\n * @property {boolean} success\r\n * Once the operation has finished, this property indicates whether it was successful.\r\n *\r\n * @property {*} result\r\n * Once the operation has finished, this property contains the result, depending on property `success`:\r\n * - data resolved by the operation, if `success = true`\r\n * - error / rejection reason, if `success = false`\r\n *\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/task.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/text.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-promise/lib/text.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/* All error messages used in the module */\r\n\r\nconst streamVersion = (__webpack_require__(/*! ../package.json */ \"./node_modules/pg-promise/package.json\").devDependencies[\"pg-query-stream\"]);\r\n\r\nmodule.exports = {\r\n    nativeError: 'Failed to initialize Native Bindings.',\r\n\r\n    /* Database errors */\r\n    queryDisconnected: 'Cannot execute a query on a disconnected client.',\r\n    invalidQuery: 'Invalid query format.',\r\n    invalidFunction: 'Invalid function name.',\r\n    invalidProc: 'Invalid procedure name.',\r\n    invalidMask: 'Invalid Query Result Mask specified.',\r\n    looseQuery: 'Querying against a released or lost connection.',\r\n\r\n    /* result errors */\r\n    notEmpty: 'No return data was expected.',\r\n    noData: 'No data returned from the query.',\r\n    multiple: 'Multiple rows were not expected.',\r\n\r\n    /* streaming support */\r\n    nativeStreaming: 'Streaming doesn\\'t work with Native Bindings.',\r\n    invalidStream: `Invalid or missing stream object: pg-query-stream >= v${streamVersion} was expected`,\r\n    invalidStreamState: 'Invalid stream state.',\r\n    invalidStreamCB: 'Invalid or missing stream initialization callback.',\r\n\r\n    /* connection errors */\r\n    poolDestroyed: 'Connection pool of the database object has been destroyed.',\r\n    clientEnd: 'Abnormal client.end() call, due to invalid code or failed server connection.'\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/text.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/tx-mode.js":
/*!************************************************!*\
  !*** ./node_modules/pg-promise/lib/tx-mode.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = __webpack_require__(/*! ./inner-state */ \"./node_modules/pg-promise/lib/inner-state.js\");\r\nconst {addInspection} = __webpack_require__(/*! ./utils */ \"./node_modules/pg-promise/lib/utils/index.js\");\r\nconst {assert} = __webpack_require__(/*! ./assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\r\nconst isolationLevel = {\r\n    /** Isolation level not specified. */\r\n    none: 0,\r\n\r\n    /** ISOLATION LEVEL SERIALIZABLE */\r\n    serializable: 1,\r\n\r\n    /** ISOLATION LEVEL REPEATABLE READ */\r\n    repeatableRead: 2,\r\n\r\n    /** ISOLATION LEVEL READ COMMITTED */\r\n    readCommitted: 3\r\n\r\n    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n    // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\r\n    // => skipping `READ UNCOMMITTED`.\r\n};\r\n\r\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * Constructs a complete transaction-opening `BEGIN` command, from these options:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {} [options]\r\n * Transaction Mode options.\r\n *\r\n * @param {txMode.isolationLevel} [options.tiLevel]\r\n * Transaction Isolation Level.\r\n *\r\n * @param {boolean} [options.readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [options.deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const {TransactionMode, isolationLevel} = pgp.txMode;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\r\nclass TransactionMode extends InnerState {\r\n\r\n    constructor(options) {\r\n        options = assert(options, ['tiLevel', 'deferrable', 'readOnly']);\r\n        const {readOnly, deferrable} = options;\r\n        let {tiLevel} = options;\r\n        let level, accessMode, deferrableMode, begin = 'begin';\r\n        tiLevel = (tiLevel > 0) ? parseInt(tiLevel) : 0;\r\n\r\n        if (tiLevel > 0 && tiLevel < 4) {\r\n            const values = ['serializable', 'repeatable read', 'read committed'];\r\n            level = 'isolation level ' + values[tiLevel - 1];\r\n        }\r\n        if (readOnly) {\r\n            accessMode = 'read only';\r\n        } else {\r\n            if (readOnly !== undefined) {\r\n                accessMode = 'read write';\r\n            }\r\n        }\r\n        // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n        // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\r\n        if (tiLevel === isolationLevel.serializable && readOnly) {\r\n            if (deferrable) {\r\n                deferrableMode = 'deferrable';\r\n            } else {\r\n                if (deferrable !== undefined) {\r\n                    deferrableMode = 'not deferrable';\r\n                }\r\n            }\r\n        }\r\n        if (level) {\r\n            begin += ' ' + level;\r\n        }\r\n        if (accessMode) {\r\n            begin += ' ' + accessMode;\r\n        }\r\n        if (deferrableMode) {\r\n            begin += ' ' + deferrableMode;\r\n        }\r\n\r\n        super({begin, capBegin: begin.toUpperCase()});\r\n    }\r\n\r\n    /**\r\n     * @method txMode.TransactionMode#begin\r\n     * @description\r\n     * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [cap=false]\r\n     * Indicates whether the returned SQL must be capitalized.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    begin(cap) {\r\n        return cap ? this._inner.capBegin : this._inner.begin;\r\n    }\r\n}\r\n\r\naddInspection(TransactionMode, function () {\r\n    return this.begin(true);\r\n});\r\n\r\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\r\nmodule.exports = {\r\n    isolationLevel,\r\n    TransactionMode\r\n};\r\n\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/tx-mode.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/types/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ServerFormatting} = __webpack_require__(/*! ./server-formatting */ \"./node_modules/pg-promise/lib/types/server-formatting.js\");\r\nconst {PreparedStatement} = __webpack_require__(/*! ./prepared-statement */ \"./node_modules/pg-promise/lib/types/prepared-statement.js\");\r\nconst {ParameterizedQuery} = __webpack_require__(/*! ./parameterized-query */ \"./node_modules/pg-promise/lib/types/parameterized-query.js\");\r\n\r\nmodule.exports = {\r\n    ServerFormatting,\r\n    PreparedStatement,\r\n    ParameterizedQuery\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/types/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/types/parameterized-query.js":
/*!******************************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/parameterized-query.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ServerFormatting} = __webpack_require__(/*! ./server-formatting */ \"./node_modules/pg-promise/lib/types/server-formatting.js\");\r\nconst {ParameterizedQueryError} = __webpack_require__(/*! ../errors */ \"./node_modules/pg-promise/lib/errors/index.js\");\r\nconst {QueryFile} = __webpack_require__(/*! ../query-file */ \"./node_modules/pg-promise/lib/query-file.js\");\r\nconst {assert} = __webpack_require__(/*! ../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    EOL: (__webpack_require__(/*! os */ \"os\").EOL),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @class ParameterizedQuery\r\n * @description\r\n * Constructs a new {@link ParameterizedQuery} object. All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{text, values}` object, i.e. when the basic object is used with a query method,\r\n * a new {@link ParameterizedQuery} object is created in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly.\r\n *\r\n * The type is available from the library's root: `pgp.ParameterizedQuery`.\r\n *\r\n * @param {string|QueryFile|Object} [options]\r\n * Object configuration options / properties.\r\n *\r\n * @param {string|QueryFile} [options.text] - See property {@link ParameterizedQuery#text text}.\r\n * @param {array} [options.values] - See property {@link ParameterizedQuery#values values}.\r\n * @param {boolean} [options.binary] - See property {@link ParameterizedQuery#binary binary}.\r\n * @param {string} [options.rowMode] - See property {@link ParameterizedQuery#rowMode rowMode}.\r\n *\r\n * @returns {ParameterizedQuery}\r\n *\r\n * @see\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError}\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a complete Parameterized Query with parameters:\r\n * const findUser = new PQ({text: 'SELECT * FROM Users WHERE id = $1', values: [123]});\r\n *\r\n * db.one(findUser)\r\n *     .then(user => {\r\n *         // user found;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a reusable Parameterized Query without values:\r\n * const addUser = new PQ('INSERT INTO Users(name, age) VALUES($1, $2)');\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n */\r\nclass ParameterizedQuery extends ServerFormatting {\r\n    constructor(options) {\r\n        if (typeof options === 'string' || options instanceof QueryFile) {\r\n            options = {\r\n                text: options\r\n            };\r\n        } else {\r\n            options = assert(options, ['text', 'values', 'binary', 'rowMode']);\r\n        }\r\n        super(options);\r\n    }\r\n}\r\n\r\n/**\r\n * @method ParameterizedQuery#parse\r\n * @description\r\n * Parses the current object and returns a simple `{text, values}`, if successful,\r\n * or else it returns a {@link errors.ParameterizedQueryError ParameterizedQueryError} object.\r\n *\r\n * This method is primarily for internal use by the library.\r\n *\r\n * @returns {{text, values}|errors.ParameterizedQueryError}\r\n */\r\nParameterizedQuery.prototype.parse = function () {\r\n\r\n    const _i = this._inner, options = _i.options;\r\n    const qf = options.text instanceof QueryFile ? options.text : null;\r\n\r\n    if (!_i.changed && !qf) {\r\n        return _i.target;\r\n    }\r\n\r\n    const errors = [], values = _i.target.values;\r\n    _i.target = {\r\n        text: options.text\r\n    };\r\n    _i.changed = true;\r\n    _i.currentError = undefined;\r\n\r\n    if (qf) {\r\n        qf.prepare();\r\n        if (qf.error) {\r\n            errors.push(qf.error);\r\n        } else {\r\n            _i.target.text = qf[QueryFile.$query];\r\n        }\r\n    }\r\n\r\n    if (!npm.utils.isText(_i.target.text)) {\r\n        errors.push('Property \\'text\\' must be a non-empty text string.');\r\n    }\r\n\r\n    if (!npm.utils.isNull(values)) {\r\n        _i.target.values = values;\r\n    }\r\n\r\n    if (options.binary !== undefined) {\r\n        _i.target.binary = !!options.binary;\r\n    }\r\n\r\n    if (options.rowMode !== undefined) {\r\n        _i.target.rowMode = options.rowMode;\r\n    }\r\n\r\n    if (errors.length) {\r\n        return _i.currentError = new ParameterizedQueryError(errors[0], _i.target);\r\n    }\r\n\r\n    _i.changed = false;\r\n\r\n    return _i.target;\r\n};\r\n\r\n/**\r\n * @method ParameterizedQuery#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nParameterizedQuery.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = npm.utils.messageGap(level + 1);\r\n    const pq = this.parse();\r\n    const lines = [\r\n        'ParameterizedQuery {'\r\n    ];\r\n    if (npm.utils.isText(pq.text)) {\r\n        lines.push(gap + 'text: \"' + pq.text + '\"');\r\n    }\r\n    if (this.values !== undefined) {\r\n        lines.push(gap + 'values: ' + npm.utils.toJson(this.values));\r\n    }\r\n    if (this.binary !== undefined) {\r\n        lines.push(gap + 'binary: ' + npm.utils.toJson(this.binary));\r\n    }\r\n    if (this.rowMode !== undefined) {\r\n        lines.push(gap + 'rowMode: ' + npm.utils.toJson(this.rowMode));\r\n    }\r\n    if (this.error !== undefined) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(npm.utils.messageGap(level) + '}');\r\n    return lines.join(npm.EOL);\r\n};\r\n\r\nmodule.exports = {ParameterizedQuery};\r\n\r\n/**\r\n * @name ParameterizedQuery#text\r\n * @type {string|QueryFile}\r\n * @description\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because _Parameterized Queries_\r\n * are formatted on the server side.\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#values\r\n * @type {array}\r\n * @description\r\n * Query formatting parameters, depending on the type:\r\n *\r\n * - `null` / `undefined` means the query has no formatting parameters\r\n * - `Array` - it is an array of formatting parameters\r\n * - None of the above, means it is a single formatting value, which\r\n *   is then automatically wrapped into an array\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#binary\r\n * @type {boolean}\r\n * @default undefined\r\n * @description\r\n * Activates binary result mode. The default is the text mode.\r\n *\r\n * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#rowMode\r\n * @type {string}\r\n * @default undefined\r\n * @description\r\n * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n *  - `array` will make all data rows arrive as arrays of values. By default, rows arrive as objects.\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#error\r\n * @type {errors.ParameterizedQueryError}\r\n * @default undefined\r\n * @readonly\r\n * @description\r\n * When in an error state, it is set to a {@link errors.ParameterizedQueryError ParameterizedQueryError} object. Otherwise, it is `undefined`.\r\n *\r\n * This property is primarily for internal use by the library.\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/types/parameterized-query.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/types/prepared-statement.js":
/*!*****************************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/prepared-statement.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ServerFormatting} = __webpack_require__(/*! ./server-formatting */ \"./node_modules/pg-promise/lib/types/server-formatting.js\");\r\nconst {PreparedStatementError} = __webpack_require__(/*! ../errors */ \"./node_modules/pg-promise/lib/errors/index.js\");\r\nconst {QueryFile} = __webpack_require__(/*! ../query-file */ \"./node_modules/pg-promise/lib/query-file.js\");\r\nconst {assert} = __webpack_require__(/*! ../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    EOL: (__webpack_require__(/*! os */ \"os\").EOL),\r\n    utils: __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\")\r\n};\r\n\r\n/**\r\n * @class PreparedStatement\r\n * @description\r\n * Constructs a new $[Prepared Statement] object. All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{name, text, values}` object, i.e. when the basic object is used\r\n * with a query method, a new {@link PreparedStatement} object is created in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly.\r\n *\r\n * The type is available from the library's root: `pgp.PreparedStatement`.\r\n *\r\n * @param {Object} [options]\r\n * Object configuration options / properties.\r\n *\r\n * @param {string} [options.name] - See property {@link PreparedStatement#name name}.\r\n * @param {string|QueryFile} [options.text] - See property {@link PreparedStatement#text text}.\r\n * @param {array} [options.values] - See property {@link PreparedStatement#values values}.\r\n * @param {boolean} [options.binary] - See property {@link PreparedStatement#binary binary}.\r\n * @param {string} [options.rowMode] - See property {@link PreparedStatement#rowMode rowMode}.\r\n * @param {number} [options.rows] - See property {@link PreparedStatement#rows rows}.\r\n *\r\n * @returns {PreparedStatement}\r\n *\r\n * @see\r\n * {@link errors.PreparedStatementError PreparedStatementError},\r\n * {@link http://www.postgresql.org/docs/9.6/static/sql-prepare.html PostgreSQL Prepared Statements}\r\n *\r\n * @example\r\n *\r\n * const {PreparedStatement: PS} = require('pg-promise');\r\n *\r\n * // Creating a complete Prepared Statement with parameters:\r\n * const findUser = new PS({name: 'find-user', text: 'SELECT * FROM Users WHERE id = $1', values: [123]});\r\n *\r\n * db.one(findUser)\r\n *     .then(user => {\r\n *         // user found;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * const {PreparedStatement: PS} = require('pg-promise');\r\n *\r\n * // Creating a reusable Prepared Statement without values:\r\n * const addUser = new PS({name: 'add-user', text: 'INSERT INTO Users(name, age) VALUES($1, $2)'});\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n */\r\nclass PreparedStatement extends ServerFormatting {\r\n    constructor(options) {\r\n        options = assert(options, ['name', 'text', 'values', 'binary', 'rowMode', 'rows']);\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * @name PreparedStatement#name\r\n     * @type {string}\r\n     * @description\r\n     * An arbitrary name given to this particular prepared statement. It must be unique within a single session and is\r\n     * subsequently used to execute or deallocate a previously prepared statement.\r\n     */\r\n    get name() {\r\n        return this._inner.options.name;\r\n    }\r\n\r\n    set name(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.name) {\r\n            _i.options.name = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name PreparedStatement#rows\r\n     * @type {number}\r\n     * @description\r\n     * Number of rows to return at a time from a Prepared Statement's portal.\r\n     * The default is 0, which means that all rows must be returned at once.\r\n     */\r\n    get rows() {\r\n        return this._inner.options.rows;\r\n    }\r\n\r\n    set rows(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.rows) {\r\n            _i.options.rows = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @method PreparedStatement#parse\r\n * @description\r\n * Parses the current object and returns a simple `{name, text, values}`, if successful,\r\n * or else it returns a {@link errors.PreparedStatementError PreparedStatementError} object.\r\n *\r\n * This method is primarily for internal use by the library.\r\n *\r\n * @returns {{name, text, values}|errors.PreparedStatementError}\r\n */\r\nPreparedStatement.prototype.parse = function () {\r\n\r\n    const _i = this._inner, options = _i.options;\r\n\r\n    const qf = options.text instanceof QueryFile ? options.text : null;\r\n\r\n    if (!_i.changed && !qf) {\r\n        return _i.target;\r\n    }\r\n\r\n    const errors = [], values = _i.target.values;\r\n    _i.target = {\r\n        name: options.name,\r\n        text: options.text\r\n    };\r\n    _i.changed = true;\r\n    _i.currentError = undefined;\r\n\r\n    if (!npm.utils.isText(_i.target.name)) {\r\n        errors.push('Property \\'name\\' must be a non-empty text string.');\r\n    }\r\n\r\n    if (qf) {\r\n        qf.prepare();\r\n        if (qf.error) {\r\n            errors.push(qf.error);\r\n        } else {\r\n            _i.target.text = qf[QueryFile.$query];\r\n        }\r\n    }\r\n    if (!npm.utils.isText(_i.target.text)) {\r\n        errors.push('Property \\'text\\' must be a non-empty text string.');\r\n    }\r\n\r\n    if (!npm.utils.isNull(values)) {\r\n        _i.target.values = values;\r\n    }\r\n\r\n    if (options.binary !== undefined) {\r\n        _i.target.binary = !!options.binary;\r\n    }\r\n\r\n    if (options.rowMode !== undefined) {\r\n        _i.target.rowMode = options.rowMode;\r\n    }\r\n\r\n    if (options.rows !== undefined) {\r\n        _i.target.rows = options.rows;\r\n    }\r\n\r\n    if (errors.length) {\r\n        return _i.currentError = new PreparedStatementError(errors[0], _i.target);\r\n    }\r\n\r\n    _i.changed = false;\r\n\r\n    return _i.target;\r\n};\r\n\r\n/**\r\n * @method PreparedStatement#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPreparedStatement.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = npm.utils.messageGap(level + 1);\r\n    const ps = this.parse();\r\n    const lines = [\r\n        'PreparedStatement {',\r\n        gap + 'name: ' + npm.utils.toJson(this.name)\r\n    ];\r\n    if (npm.utils.isText(ps.text)) {\r\n        lines.push(gap + 'text: \"' + ps.text + '\"');\r\n    }\r\n    if (this.values !== undefined) {\r\n        lines.push(gap + 'values: ' + npm.utils.toJson(this.values));\r\n    }\r\n    if (this.binary !== undefined) {\r\n        lines.push(gap + 'binary: ' + npm.utils.toJson(this.binary));\r\n    }\r\n    if (this.rowMode !== undefined) {\r\n        lines.push(gap + 'rowMode: ' + npm.utils.toJson(this.rowMode));\r\n    }\r\n    if (this.rows !== undefined) {\r\n        lines.push(gap + 'rows: ' + npm.utils.toJson(this.rows));\r\n    }\r\n    if (this.error) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(npm.utils.messageGap(level) + '}');\r\n    return lines.join(npm.EOL);\r\n};\r\n\r\nmodule.exports = {PreparedStatement};\r\n\r\n/**\r\n * @name PreparedStatement#text\r\n * @type {string|QueryFile}\r\n * @description\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because $[Prepared Statements]\r\n * are formatted on the server side.\r\n *\r\n * Changing this property for the same {@link PreparedStatement#name name} will have no effect, because queries\r\n * for Prepared Statements are cached by the server, with {@link PreparedStatement#name name} being the cache key.\r\n */\r\n\r\n/**\r\n * @name PreparedStatement#values\r\n * @type {array}\r\n * @description\r\n * Query formatting parameters, depending on the type:\r\n *\r\n * - `null` / `undefined` means the query has no formatting parameters\r\n * - `Array` - it is an array of formatting parameters\r\n * - None of the above, means it is a single formatting value, which\r\n *   is then automatically wrapped into an array\r\n */\r\n\r\n/**\r\n * @name PreparedStatement#binary\r\n * @type {boolean}\r\n * @default undefined\r\n * @description\r\n * Activates binary result mode. The default is the text mode.\r\n *\r\n * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n */\r\n\r\n/**\r\n * @name PreparedStatement#rowMode\r\n * @type {string}\r\n * @default undefined\r\n * @description\r\n * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n *  - `array` will make all data rows arrive as arrays of values. By default, rows arrive as objects.\r\n */\r\n\r\n/**\r\n * @name PreparedStatement#error\r\n * @type {errors.PreparedStatementError}\r\n * @default undefined\r\n * @description\r\n * When in an error state, it is set to a {@link errors.PreparedStatementError PreparedStatementError} object. Otherwise, it is `undefined`.\r\n *\r\n * This property is primarily for internal use by the library.\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/types/prepared-statement.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/types/server-formatting.js":
/*!****************************************************************!*\
  !*** ./node_modules/pg-promise/lib/types/server-formatting.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {InnerState} = __webpack_require__(/*! ../inner-state */ \"./node_modules/pg-promise/lib/inner-state.js\");\r\nconst {addInspection} = __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\");\r\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/pg-promise/lib/utils/index.js\");\r\n\r\n/**\r\n * @private\r\n * @class ServerFormatting\r\n */\r\nclass ServerFormatting extends InnerState {\r\n\r\n    constructor(options) {\r\n        const _inner = {\r\n            options,\r\n            changed: true,\r\n            currentError: undefined,\r\n            target: {}\r\n        };\r\n        super(_inner);\r\n        setValues.call(this, options.values);\r\n    }\r\n\r\n    get error() {\r\n        return this._inner.currentError;\r\n    }\r\n\r\n    get text() {\r\n        return this._inner.options.text;\r\n    }\r\n\r\n    set text(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.text) {\r\n            _i.options.text = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    get binary() {\r\n        return this._inner.options.binary;\r\n    }\r\n\r\n    set binary(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.binary) {\r\n            _i.options.binary = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    get rowMode() {\r\n        return this._inner.options.rowMode;\r\n    }\r\n\r\n    set rowMode(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.rowMode) {\r\n            _i.options.rowMode = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    get values() {\r\n        return this._inner.target.values;\r\n    }\r\n\r\n    set values(values) {\r\n        setValues.call(this, values);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @member ServerFormatting#parse\r\n */\r\n\r\nfunction setValues(v) {\r\n    const target = this._inner.target;\r\n    if (Array.isArray(v)) {\r\n        if (v.length) {\r\n            target.values = v;\r\n        } else {\r\n            delete target.values;\r\n        }\r\n    } else {\r\n        if (utils.isNull(v)) {\r\n            delete target.values;\r\n        } else {\r\n            target.values = [v];\r\n        }\r\n    }\r\n}\r\n\r\naddInspection(ServerFormatting, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {ServerFormatting};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/types/server-formatting.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/utils/color.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/utils/color.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! util */ \"util\");\r\n\r\nclass ColorConsole {\r\n\r\n    static log() {\r\n        ColorConsole.writeNormal([...arguments], 39); // white\r\n    }\r\n\r\n    static info() {\r\n        ColorConsole.writeNormal([...arguments], 36); // cyan\r\n    }\r\n\r\n    static success() {\r\n        ColorConsole.writeNormal([...arguments], 32); // green\r\n    }\r\n\r\n    static warn() {\r\n        ColorConsole.writeNormal([...arguments], 33); // yellow\r\n    }\r\n\r\n    static error() {\r\n        ColorConsole.writeError([...arguments], 31); // red\r\n    }\r\n\r\n    static writeNormal(params, color) {\r\n        // istanbul ignore else\r\n        if (process.stdout.isTTY) {\r\n            console.log.apply(null, ColorConsole.formatColor(params, color)); // eslint-disable-line no-console\r\n        } else {\r\n            console.log.apply(null, params); // eslint-disable-line no-console\r\n        }\r\n    }\r\n\r\n    static writeError(params, color) {\r\n        // istanbul ignore else\r\n        if (process.stderr.isTTY) {\r\n            console.error.apply(null, ColorConsole.formatColor(params, color)); // eslint-disable-line no-console\r\n        } else {\r\n            console.error.apply(null, params); // eslint-disable-line no-console\r\n        }\r\n    }\r\n\r\n    static formatColor(args, color) {\r\n        return args.map(a => `\\x1b[${color}m${util.format(a)}\\x1b[0m`);\r\n    }\r\n}\r\n\r\nColorConsole.log.bright = function () {\r\n    ColorConsole.writeNormal([...arguments], 97); // light white\r\n};\r\n\r\nColorConsole.info.bright = function () {\r\n    ColorConsole.writeNormal([...arguments], 93); // light cyan\r\n};\r\n\r\nColorConsole.success.bright = function () {\r\n    ColorConsole.writeNormal([...arguments], 92); // light green\r\n};\r\n\r\nColorConsole.warn.bright = function () {\r\n    ColorConsole.writeNormal([...arguments], 93); // light yellow\r\n};\r\n\r\nColorConsole.error.bright = function () {\r\n    ColorConsole.writeError([...arguments], 91); // light red\r\n};\r\n\r\nmodule.exports = {ColorConsole};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/utils/color.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/utils/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-promise/lib/utils/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    path: __webpack_require__(/*! path */ \"path\"),\r\n    util: __webpack_require__(/*! util */ \"util\"),\r\n    patterns: __webpack_require__(/*! ../patterns */ \"./node_modules/pg-promise/lib/patterns.js\")\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Simpler check for null/undefined;\r\nfunction isNull(value) {\r\n    return value === null || value === undefined;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Verifies parameter for being a non-empty text string;\r\nfunction isText(txt) {\r\n    return txt && typeof txt === 'string' && /\\S/.test(txt);\r\n}\r\n\r\n///////////////////////////////////////////////////////////\r\n// Approximates the environment as being for development.\r\n//\r\n// Proper configuration is having NODE_ENV = 'development', but this\r\n// method only checks for 'dev' being present, and regardless of the case.\r\nfunction isDev() {\r\n    const env = global.process.env.NODE_ENV || '';\r\n    return env.toLowerCase().indexOf('dev') !== -1;\r\n}\r\n\r\n/////////////////////////////////////////////\r\n// Adds properties from source to the target,\r\n// making them read-only and enumerable.\r\nfunction addReadProperties(target, source) {\r\n    for (const p in source) {\r\n        addReadProp(target, p, source[p]);\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n// Adds a read-only, non-deletable enumerable property.\r\nfunction addReadProp(obj, name, value, hidden) {\r\n    Object.defineProperty(obj, name, {\r\n        value,\r\n        configurable: false,\r\n        enumerable: !hidden,\r\n        writable: false\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////\r\n// Converts a connection string or object into its safe copy:\r\n// if password is present, it is masked with symbol '#'.\r\nfunction getSafeConnection(cn) {\r\n    const maskPassword = cs => cs.replace(/:(?![/])([^@]+)/, (_, m) => ':' + new Array(m.length + 1).join('#'));\r\n    if (typeof cn === 'object') {\r\n        const copy = Object.assign({}, cn);\r\n        if (typeof copy.password === 'string') {\r\n            copy.password = copy.password.replace(/./g, '#');\r\n        }\r\n        if (typeof copy.connectionString === 'string') {\r\n            copy.connectionString = maskPassword(copy.connectionString);\r\n        }\r\n        return copy;\r\n    }\r\n    return maskPassword(cn);\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output;\r\nfunction messageGap(level) {\r\n    return ' '.repeat(level * 4);\r\n}\r\n\r\n/////////////////////////////////////////\r\n// Provides platform-neutral inheritance;\r\nfunction inherits(child, parent) {\r\n    child.prototype.__proto__ = parent.prototype;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction getLocalStack(startIdx, maxLines) {\r\n    // from the call stack, we take up to maximum lines,\r\n    // starting with specified line index:\r\n    startIdx = startIdx || 0;\r\n    const endIdx = maxLines > 0 ? startIdx + maxLines : undefined;\r\n    return new Error().stack\r\n        .split('\\n')\r\n        .filter(line => line.match(/\\(.+\\)/))\r\n        .slice(startIdx, endIdx)\r\n        .join('\\n');\r\n}\r\n\r\n//////////////////////////////\r\n// Internal error container;\r\nfunction InternalError(error) {\r\n    this.error = error;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n// Parses a property name, and gets its name from the object,\r\n// if the property exists. Returns object {valid, has, target, value}:\r\n//  - valid - true/false, whether the syntax is valid\r\n//  - has - a flag that property exists; set when 'valid' = true\r\n//  - target - the target object that contains the property; set when 'has' = true\r\n//  - value - the value; set when 'has' = true\r\nfunction getIfHas(obj, prop) {\r\n    const result = {valid: true};\r\n    if (prop.indexOf('.') === -1) {\r\n        result.has = prop in obj;\r\n        result.target = obj;\r\n        if (result.has) {\r\n            result.value = obj[prop];\r\n        }\r\n    } else {\r\n        const names = prop.split('.');\r\n        let missing, target;\r\n        for (let i = 0; i < names.length; i++) {\r\n            const n = names[i];\r\n            if (!n) {\r\n                result.valid = false;\r\n                return result;\r\n            }\r\n            if (!missing && hasProperty(obj, n)) {\r\n                target = obj;\r\n                obj = obj[n];\r\n            } else {\r\n                missing = true;\r\n            }\r\n        }\r\n        result.has = !missing;\r\n        if (result.has) {\r\n            result.target = target;\r\n            result.value = obj;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n// Checks if the property exists in the object or value or its prototype;\r\nfunction hasProperty(value, prop) {\r\n    return (value && typeof value === 'object' && prop in value) ||\r\n        value !== null && value !== undefined && value[prop] !== undefined;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Adds prototype inspection\r\nfunction addInspection(type, cb) {\r\n    type.prototype[npm.util.inspect.custom] = cb;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////\r\n// Identifies a general connectivity error, after which no more queries can be executed.\r\n// This is for detecting when to skip executing ROLLBACK for a failed transaction.\r\nfunction isConnectivityError(err) {\r\n    const code = err && typeof err.code === 'string' && err.code;\r\n    const cls = code && code.substr(0, 2); // Error Class\r\n    // istanbul ignore next (we cannot test-cover all error cases):\r\n    return code === 'ECONNRESET' || (cls === '08' && code !== '08P01') || (cls === '57' && code !== '57014');\r\n    // Code 'ECONNRESET' - Connectivity issue handled by the driver.\r\n    // Class 08 - Connection Exception (except for 08P01, for protocol violation).\r\n    // Class 57 - Operator Intervention (except for 57014, for cancelled queries).\r\n    //\r\n    // ERROR CODES: https://www.postgresql.org/docs/9.6/static/errcodes-appendix.html\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n// Does JSON.stringify, with support for BigInt (irreversible)\r\nfunction toJson(data) {\r\n    if (data !== undefined) {\r\n        return JSON.stringify(data, (_, v) => typeof v === 'bigint' ? `${v}#bigint` : v)\r\n            .replace(/\"(-?\\d+)#bigint\"/g, (_, a) => a);\r\n    }\r\n}\r\n\r\nconst exp = {\r\n    toJson,\r\n    getIfHas,\r\n    addInspection,\r\n    InternalError,\r\n    getLocalStack,\r\n    isText,\r\n    isNull,\r\n    isDev,\r\n    addReadProp,\r\n    addReadProperties,\r\n    getSafeConnection,\r\n    messageGap,\r\n    inherits,\r\n    isConnectivityError\r\n};\r\n\r\nconst mainFile = process.argv[1];\r\n\r\n// istanbul ignore next\r\nexp.startDir = mainFile ? npm.path.dirname(mainFile) : process.cwd();\r\n\r\nmodule.exports = exp;\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/utils/index.js?");

/***/ }),

/***/ "./node_modules/pg-promise/lib/utils/public.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-promise/lib/utils/public.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assert} = __webpack_require__(/*! ../assert */ \"./node_modules/pg-promise/lib/assert.js\");\r\n\r\nconst npm = {\r\n    fs: __webpack_require__(/*! fs */ \"fs\"),\r\n    path: __webpack_require__(/*! path */ \"path\"),\r\n    utils: __webpack_require__(/*! ./ */ \"./node_modules/pg-promise/lib/utils/index.js\"),\r\n    package: __webpack_require__(/*! ../../package.json */ \"./node_modules/pg-promise/package.json\")\r\n};\r\n\r\n/**\r\n * @method utils.camelize\r\n * @description\r\n * Camelizes a text string.\r\n *\r\n * Case-changing characters include:\r\n * - _hyphen_\r\n * - _underscore_\r\n * - _period_\r\n * - _space_\r\n *\r\n * @param {string} text\r\n * Input text string.\r\n *\r\n * @returns {string}\r\n * Camelized text string.\r\n *\r\n * @see\r\n * {@link utils.camelizeVar camelizeVar}\r\n *\r\n */\r\nfunction camelize(text) {\r\n    text = text.replace(/[-_\\s.]+(.)?/g, (_, c) => c ? c.toUpperCase() : '');\r\n    return text.substr(0, 1).toLowerCase() + text.substr(1);\r\n}\r\n\r\n/**\r\n * @method utils.camelizeVar\r\n * @description\r\n * Camelizes a text string, while making it compliant with JavaScript variable names:\r\n * - contains symbols `a-z`, `A-Z`, `0-9`, `_` and `$`\r\n * - cannot have leading digits\r\n *\r\n * First, it removes all symbols that do not meet the above criteria, except for _hyphen_, _period_ and _space_,\r\n * and then it forwards into {@link utils.camelize camelize}.\r\n *\r\n * @param {string} text\r\n * Input text string.\r\n *\r\n * If it doesn't contain any symbols to make up a valid variable name, the result will be an empty string.\r\n *\r\n * @returns {string}\r\n * Camelized text string that can be used as an open property name.\r\n *\r\n * @see\r\n * {@link utils.camelize camelize}\r\n *\r\n */\r\nfunction camelizeVar(text) {\r\n    text = text.replace(/[^a-zA-Z0-9$_\\-\\s.]/g, '').replace(/^[0-9_\\-\\s.]+/, '');\r\n    return camelize(text);\r\n}\r\n\r\nfunction _enumSql(dir, options, cb, namePath) {\r\n    const tree = {};\r\n    npm.fs.readdirSync(dir).forEach(file => {\r\n        let stat;\r\n        const fullPath = npm.path.join(dir, file);\r\n        try {\r\n            stat = npm.fs.statSync(fullPath);\r\n        } catch (e) {\r\n            // while it is very easy to test manually, it is very difficult to test for\r\n            // access-denied errors automatically; therefore excluding from the coverage:\r\n            // istanbul ignore next\r\n            if (options.ignoreErrors) {\r\n                return; // on to the next file/folder;\r\n            }\r\n            // istanbul ignore next\r\n            throw e;\r\n        }\r\n        if (stat.isDirectory()) {\r\n            if (options.recursive) {\r\n                const dirName = camelizeVar(file);\r\n                const np = namePath ? (namePath + '.' + dirName) : dirName;\r\n                const t = _enumSql(fullPath, options, cb, np);\r\n                if (Object.keys(t).length) {\r\n                    if (!dirName.length || dirName in tree) {\r\n                        if (!options.ignoreErrors) {\r\n                            throw new Error('Empty or duplicate camelized folder name: ' + fullPath);\r\n                        }\r\n                    }\r\n                    tree[dirName] = t;\r\n                }\r\n            }\r\n        } else {\r\n            if (npm.path.extname(file).toLowerCase() === '.sql') {\r\n                const name = camelizeVar(file.replace(/\\.[^/.]+$/, ''));\r\n                if (!name.length || name in tree) {\r\n                    if (!options.ignoreErrors) {\r\n                        throw new Error('Empty or duplicate camelized file name: ' + fullPath);\r\n                    }\r\n                }\r\n                tree[name] = fullPath;\r\n                if (cb) {\r\n                    const result = cb(fullPath, name, namePath ? (namePath + '.' + name) : name);\r\n                    if (result !== undefined) {\r\n                        tree[name] = result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return tree;\r\n}\r\n\r\n/**\r\n * @method utils.enumSql\r\n * @description\r\n * Synchronously enumerates all SQL files (within a given directory) into a camelized SQL tree.\r\n *\r\n * All property names within the tree are camelized via {@link utils.camelizeVar camelizeVar},\r\n * so they can be used in the code directly, as open property names.\r\n *\r\n * @param {string} dir\r\n * Directory path where SQL files are located, either absolute or relative to the current directory.\r\n *\r\n * SQL files are identified by using `.sql` extension (case-insensitive).\r\n *\r\n * @param {{}} [options]\r\n * Search options.\r\n *\r\n * @param {boolean} [options.recursive=false]\r\n * Include sub-directories into the search.\r\n *\r\n * Sub-directories without SQL files will be skipped from the result.\r\n *\r\n * @param {boolean} [options.ignoreErrors=false]\r\n * Ignore the following types of errors:\r\n * - access errors, when there is no read access to a file or folder\r\n * - empty or duplicate camelized property names\r\n *\r\n * This flag does not affect errors related to invalid input parameters, or if you pass in a\r\n * non-existing directory.\r\n *\r\n * @param {function} [cb]\r\n * A callback function that takes three arguments:\r\n * - `file` - SQL file path, relative or absolute, according to how you specified the search directory\r\n * - `name` - name of the property that represents the SQL file\r\n * - `path` - property resolution path (full property name)\r\n *\r\n * If the function returns anything other than `undefined`, it overrides the corresponding property value in the tree.\r\n *\r\n * @returns {object}\r\n * Camelized SQL tree object, with each value being an SQL file path (unless changed via the callback).\r\n *\r\n * @example\r\n *\r\n * // simple SQL tree generation for further processing:\r\n * const tree = pgp.utils.enumSql('../sql', {recursive: true});\r\n *\r\n * @example\r\n *\r\n * // generating an SQL tree for dynamic use of names:\r\n * const sql = pgp.utils.enumSql(__dirname, {recursive: true}, file => {\r\n *     return new pgp.QueryFile(file, {minify: true});\r\n * });\r\n *\r\n * @example\r\n *\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // replacing each relative path in the tree with a full one:\r\n * const tree = pgp.utils.enumSql('../sql', {recursive: true}, file => {\r\n *     return joinPath(__dirname, file);\r\n * });\r\n *\r\n */\r\nfunction enumSql(dir, options, cb) {\r\n    if (!npm.utils.isText(dir)) {\r\n        throw new TypeError('Parameter \\'dir\\' must be a non-empty text string.');\r\n    }\r\n    options = assert(options, ['recursive', 'ignoreErrors']);\r\n    cb = (typeof cb === 'function') ? cb : null;\r\n    return _enumSql(dir, options, cb, '');\r\n}\r\n\r\n/**\r\n * @method utils.taskArgs\r\n * @description\r\n * Normalizes/prepares arguments for tasks and transactions.\r\n *\r\n * Its main purpose is to simplify adding custom methods {@link Database#task task}, {@link Database#taskIf taskIf},\r\n * {@link Database#tx tx} and {@link Database#txIf txIf} within event {@link event:extend extend}, as the those methods use fairly\r\n * complex logic for parsing inputs.\r\n *\r\n * @param args {Object}\r\n * Array-like object of `arguments` that was passed into the method. It is expected that the `arguments`\r\n * are always made of two parameters - `(options, cb)`, same as all the default task/transaction methods.\r\n *\r\n * And if your custom method needs additional parameters, they should be passed in as extra properties within `options`.\r\n *\r\n * @returns {Array}\r\n * Array of arguments that can be passed into a task or transaction.\r\n *\r\n * It is extended with properties `options` and `cb` to access the corresponding array elements `[0]` and `[1]` by name.\r\n *\r\n * @example\r\n *\r\n * // Registering a custom transaction method that assigns a default Transaction Mode:\r\n *\r\n * const initOptions = {\r\n *     extend: obj => {\r\n *         obj.myTx = function(options, cb) {\r\n *             const args = pgp.utils.taskArgs(arguments); // prepare arguments\r\n *\r\n *             if (!('mode' in args.options)) {\r\n *                 // if no 'mode' was specified, set default for transaction mode:\r\n *                 args.options.mode = myTxModeObject; // of type pgp.txMode.TransactionMode\r\n *             }\r\n *\r\n *             return obj.tx.apply(this, args);\r\n *             // or explicitly, if needed:\r\n *             // return obj.tx.call(this, args.options, args.cb);\r\n *         }\r\n *     }\r\n * };\r\n *\r\n */\r\nfunction taskArgs(args) {\r\n\r\n    if (!args || typeof args.length !== 'number') {\r\n        throw new TypeError('Parameter \\'args\\' must be an array-like object of arguments.');\r\n    }\r\n\r\n    let options = args[0], cb;\r\n    if (typeof options === 'function') {\r\n        cb = options;\r\n        options = {};\r\n        if (cb.name) {\r\n            options.tag = cb.name;\r\n        }\r\n    } else {\r\n        if (typeof args[1] === 'function') {\r\n            cb = args[1];\r\n        }\r\n        if (typeof options === 'string' || typeof options === 'number') {\r\n            options = {tag: options};\r\n        } else {\r\n            options = (typeof options === 'object' && options) || {};\r\n            if (!('tag' in options) && cb && cb.name) {\r\n                options.tag = cb.name;\r\n            }\r\n        }\r\n    }\r\n\r\n    const res = [options, cb];\r\n\r\n    Object.defineProperty(res, 'options', {\r\n        get: function () {\r\n            return this[0];\r\n        },\r\n        set: function (newValue) {\r\n            this[0] = newValue;\r\n        },\r\n        enumerable: true\r\n    });\r\n\r\n    Object.defineProperty(res, 'cb', {\r\n        get: function () {\r\n            return this[1];\r\n        },\r\n        set: function (newValue) {\r\n            this[1] = newValue;\r\n        },\r\n        enumerable: true\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * @namespace utils\r\n *\r\n * @description\r\n * Namespace for general-purpose static functions, available as `pgp.utils`, before and after initializing the library.\r\n *\r\n * @property {function} camelize\r\n * {@link utils.camelize camelize} - camelizes a text string\r\n *\r\n * @property {function} camelizeVar\r\n * {@link utils.camelizeVar camelizeVar} - camelizes a text string as a variable\r\n *\r\n * @property {function} enumSql\r\n * {@link utils.enumSql enumSql} - enumerates SQL files in a directory\r\n *\r\n * @property {function} taskArgs\r\n * {@link utils.taskArgs taskArgs} - prepares arguments for tasks and transactions\r\n */\r\nmodule.exports = {\r\n    camelize,\r\n    camelizeVar,\r\n    enumSql,\r\n    taskArgs\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/lib/utils/public.js?");

/***/ }),

/***/ "./node_modules/pg-protocol/dist/buffer-reader.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-protocol/dist/buffer-reader.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferReader = void 0;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass BufferReader {\n    constructor(offset = 0) {\n        this.offset = offset;\n        this.buffer = emptyBuffer;\n        // TODO(bmc): support non-utf8 encoding?\n        this.encoding = 'utf-8';\n    }\n    setBuffer(offset, buffer) {\n        this.offset = offset;\n        this.buffer = buffer;\n    }\n    int16() {\n        const result = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return result;\n    }\n    byte() {\n        const result = this.buffer[this.offset];\n        this.offset++;\n        return result;\n    }\n    int32() {\n        const result = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    string(length) {\n        const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n    cstring() {\n        const start = this.offset;\n        let end = start;\n        while (this.buffer[end++] !== 0) { }\n        this.offset = end;\n        return this.buffer.toString(this.encoding, start, end - 1);\n    }\n    bytes(length) {\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n}\nexports.BufferReader = BufferReader;\n//# sourceMappingURL=buffer-reader.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-protocol/dist/buffer-reader.js?");

/***/ }),

/***/ "./node_modules/pg-protocol/dist/buffer-writer.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-protocol/dist/buffer-writer.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Writer = void 0;\nclass Writer {\n    constructor(size = 256) {\n        this.size = size;\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(size);\n    }\n    ensure(size) {\n        var remaining = this.buffer.length - this.offset;\n        if (remaining < size) {\n            var oldBuffer = this.buffer;\n            // exponential growth factor of around ~ 1.5\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n            var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n            this.buffer = Buffer.allocUnsafe(newSize);\n            oldBuffer.copy(this.buffer);\n        }\n    }\n    addInt32(num) {\n        this.ensure(4);\n        this.buffer[this.offset++] = (num >>> 24) & 0xff;\n        this.buffer[this.offset++] = (num >>> 16) & 0xff;\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addInt16(num) {\n        this.ensure(2);\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addCString(string) {\n        if (!string) {\n            this.ensure(1);\n        }\n        else {\n            var len = Buffer.byteLength(string);\n            this.ensure(len + 1); // +1 for null terminator\n            this.buffer.write(string, this.offset, 'utf-8');\n            this.offset += len;\n        }\n        this.buffer[this.offset++] = 0; // null terminator\n        return this;\n    }\n    addString(string = '') {\n        var len = Buffer.byteLength(string);\n        this.ensure(len);\n        this.buffer.write(string, this.offset);\n        this.offset += len;\n        return this;\n    }\n    add(otherBuffer) {\n        this.ensure(otherBuffer.length);\n        otherBuffer.copy(this.buffer, this.offset);\n        this.offset += otherBuffer.length;\n        return this;\n    }\n    join(code) {\n        if (code) {\n            this.buffer[this.headerPosition] = code;\n            //length is everything in this packet minus the code\n            const length = this.offset - (this.headerPosition + 1);\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\n        }\n        return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n    flush(code) {\n        var result = this.join(code);\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(this.size);\n        return result;\n    }\n}\nexports.Writer = Writer;\n//# sourceMappingURL=buffer-writer.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-protocol/dist/buffer-writer.js?");

/***/ }),

/***/ "./node_modules/pg-protocol/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/pg-protocol/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DatabaseError = exports.serialize = exports.parse = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"./node_modules/pg-protocol/dist/messages.js\");\nObject.defineProperty(exports, \"DatabaseError\", ({ enumerable: true, get: function () { return messages_1.DatabaseError; } }));\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"./node_modules/pg-protocol/dist/serializer.js\");\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return serializer_1.serialize; } }));\nconst parser_1 = __webpack_require__(/*! ./parser */ \"./node_modules/pg-protocol/dist/parser.js\");\nfunction parse(stream, callback) {\n    const parser = new parser_1.Parser();\n    stream.on('data', (buffer) => parser.parse(buffer, callback));\n    return new Promise((resolve) => stream.on('end', () => resolve()));\n}\nexports.parse = parse;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-protocol/dist/index.js?");

/***/ }),

/***/ "./node_modules/pg-protocol/dist/messages.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-protocol/dist/messages.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;\nexports.parseComplete = {\n    name: 'parseComplete',\n    length: 5,\n};\nexports.bindComplete = {\n    name: 'bindComplete',\n    length: 5,\n};\nexports.closeComplete = {\n    name: 'closeComplete',\n    length: 5,\n};\nexports.noData = {\n    name: 'noData',\n    length: 5,\n};\nexports.portalSuspended = {\n    name: 'portalSuspended',\n    length: 5,\n};\nexports.replicationStart = {\n    name: 'replicationStart',\n    length: 4,\n};\nexports.emptyQuery = {\n    name: 'emptyQuery',\n    length: 4,\n};\nexports.copyDone = {\n    name: 'copyDone',\n    length: 4,\n};\nclass DatabaseError extends Error {\n    constructor(message, length, name) {\n        super(message);\n        this.length = length;\n        this.name = name;\n    }\n}\nexports.DatabaseError = DatabaseError;\nclass CopyDataMessage {\n    constructor(length, chunk) {\n        this.length = length;\n        this.chunk = chunk;\n        this.name = 'copyData';\n    }\n}\nexports.CopyDataMessage = CopyDataMessage;\nclass CopyResponse {\n    constructor(length, name, binary, columnCount) {\n        this.length = length;\n        this.name = name;\n        this.binary = binary;\n        this.columnTypes = new Array(columnCount);\n    }\n}\nexports.CopyResponse = CopyResponse;\nclass Field {\n    constructor(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {\n        this.name = name;\n        this.tableID = tableID;\n        this.columnID = columnID;\n        this.dataTypeID = dataTypeID;\n        this.dataTypeSize = dataTypeSize;\n        this.dataTypeModifier = dataTypeModifier;\n        this.format = format;\n    }\n}\nexports.Field = Field;\nclass RowDescriptionMessage {\n    constructor(length, fieldCount) {\n        this.length = length;\n        this.fieldCount = fieldCount;\n        this.name = 'rowDescription';\n        this.fields = new Array(this.fieldCount);\n    }\n}\nexports.RowDescriptionMessage = RowDescriptionMessage;\nclass ParameterDescriptionMessage {\n    constructor(length, parameterCount) {\n        this.length = length;\n        this.parameterCount = parameterCount;\n        this.name = 'parameterDescription';\n        this.dataTypeIDs = new Array(this.parameterCount);\n    }\n}\nexports.ParameterDescriptionMessage = ParameterDescriptionMessage;\nclass ParameterStatusMessage {\n    constructor(length, parameterName, parameterValue) {\n        this.length = length;\n        this.parameterName = parameterName;\n        this.parameterValue = parameterValue;\n        this.name = 'parameterStatus';\n    }\n}\nexports.ParameterStatusMessage = ParameterStatusMessage;\nclass AuthenticationMD5Password {\n    constructor(length, salt) {\n        this.length = length;\n        this.salt = salt;\n        this.name = 'authenticationMD5Password';\n    }\n}\nexports.AuthenticationMD5Password = AuthenticationMD5Password;\nclass BackendKeyDataMessage {\n    constructor(length, processID, secretKey) {\n        this.length = length;\n        this.processID = processID;\n        this.secretKey = secretKey;\n        this.name = 'backendKeyData';\n    }\n}\nexports.BackendKeyDataMessage = BackendKeyDataMessage;\nclass NotificationResponseMessage {\n    constructor(length, processId, channel, payload) {\n        this.length = length;\n        this.processId = processId;\n        this.channel = channel;\n        this.payload = payload;\n        this.name = 'notification';\n    }\n}\nexports.NotificationResponseMessage = NotificationResponseMessage;\nclass ReadyForQueryMessage {\n    constructor(length, status) {\n        this.length = length;\n        this.status = status;\n        this.name = 'readyForQuery';\n    }\n}\nexports.ReadyForQueryMessage = ReadyForQueryMessage;\nclass CommandCompleteMessage {\n    constructor(length, text) {\n        this.length = length;\n        this.text = text;\n        this.name = 'commandComplete';\n    }\n}\nexports.CommandCompleteMessage = CommandCompleteMessage;\nclass DataRowMessage {\n    constructor(length, fields) {\n        this.length = length;\n        this.fields = fields;\n        this.name = 'dataRow';\n        this.fieldCount = fields.length;\n    }\n}\nexports.DataRowMessage = DataRowMessage;\nclass NoticeMessage {\n    constructor(length, message) {\n        this.length = length;\n        this.message = message;\n        this.name = 'notice';\n    }\n}\nexports.NoticeMessage = NoticeMessage;\n//# sourceMappingURL=messages.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-protocol/dist/messages.js?");

/***/ }),

/***/ "./node_modules/pg-protocol/dist/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-protocol/dist/parser.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"./node_modules/pg-protocol/dist/messages.js\");\nconst buffer_reader_1 = __webpack_require__(/*! ./buffer-reader */ \"./node_modules/pg-protocol/dist/buffer-reader.js\");\nconst assert_1 = __importDefault(__webpack_require__(/*! assert */ \"assert\"));\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1;\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4;\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass Parser {\n    constructor(opts) {\n        this.buffer = emptyBuffer;\n        this.bufferLength = 0;\n        this.bufferOffset = 0;\n        this.reader = new buffer_reader_1.BufferReader();\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'binary') {\n            throw new Error('Binary mode not supported yet');\n        }\n        this.mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'text';\n    }\n    parse(buffer, callback) {\n        this.mergeBuffer(buffer);\n        const bufferFullLength = this.bufferOffset + this.bufferLength;\n        let offset = this.bufferOffset;\n        while (offset + HEADER_LENGTH <= bufferFullLength) {\n            // code is 1 byte long - it identifies the message type\n            const code = this.buffer[offset];\n            // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n            const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\n            const fullMessageLength = CODE_LENGTH + length;\n            if (fullMessageLength + offset <= bufferFullLength) {\n                const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\n                callback(message);\n                offset += fullMessageLength;\n            }\n            else {\n                break;\n            }\n        }\n        if (offset === bufferFullLength) {\n            // No more use for the buffer\n            this.buffer = emptyBuffer;\n            this.bufferLength = 0;\n            this.bufferOffset = 0;\n        }\n        else {\n            // Adjust the cursors of remainingBuffer\n            this.bufferLength = bufferFullLength - offset;\n            this.bufferOffset = offset;\n        }\n    }\n    mergeBuffer(buffer) {\n        if (this.bufferLength > 0) {\n            const newLength = this.bufferLength + buffer.byteLength;\n            const newFullLength = newLength + this.bufferOffset;\n            if (newFullLength > this.buffer.byteLength) {\n                // We can't concat the new buffer with the remaining one\n                let newBuffer;\n                if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n                    // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n                    newBuffer = this.buffer;\n                }\n                else {\n                    // Allocate a new larger buffer\n                    let newBufferLength = this.buffer.byteLength * 2;\n                    while (newLength >= newBufferLength) {\n                        newBufferLength *= 2;\n                    }\n                    newBuffer = Buffer.allocUnsafe(newBufferLength);\n                }\n                // Move the remaining buffer to the new one\n                this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\n                this.buffer = newBuffer;\n                this.bufferOffset = 0;\n            }\n            // Concat the new buffer with the remaining one\n            buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\n            this.bufferLength = newLength;\n        }\n        else {\n            this.buffer = buffer;\n            this.bufferOffset = 0;\n            this.bufferLength = buffer.byteLength;\n        }\n    }\n    handlePacket(offset, code, length, bytes) {\n        switch (code) {\n            case 50 /* BindComplete */:\n                return messages_1.bindComplete;\n            case 49 /* ParseComplete */:\n                return messages_1.parseComplete;\n            case 51 /* CloseComplete */:\n                return messages_1.closeComplete;\n            case 110 /* NoData */:\n                return messages_1.noData;\n            case 115 /* PortalSuspended */:\n                return messages_1.portalSuspended;\n            case 99 /* CopyDone */:\n                return messages_1.copyDone;\n            case 87 /* ReplicationStart */:\n                return messages_1.replicationStart;\n            case 73 /* EmptyQuery */:\n                return messages_1.emptyQuery;\n            case 68 /* DataRow */:\n                return this.parseDataRowMessage(offset, length, bytes);\n            case 67 /* CommandComplete */:\n                return this.parseCommandCompleteMessage(offset, length, bytes);\n            case 90 /* ReadyForQuery */:\n                return this.parseReadyForQueryMessage(offset, length, bytes);\n            case 65 /* NotificationResponse */:\n                return this.parseNotificationMessage(offset, length, bytes);\n            case 82 /* AuthenticationResponse */:\n                return this.parseAuthenticationResponse(offset, length, bytes);\n            case 83 /* ParameterStatus */:\n                return this.parseParameterStatusMessage(offset, length, bytes);\n            case 75 /* BackendKeyData */:\n                return this.parseBackendKeyData(offset, length, bytes);\n            case 69 /* ErrorMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'error');\n            case 78 /* NoticeMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'notice');\n            case 84 /* RowDescriptionMessage */:\n                return this.parseRowDescriptionMessage(offset, length, bytes);\n            case 116 /* ParameterDescriptionMessage */:\n                return this.parseParameterDescriptionMessage(offset, length, bytes);\n            case 71 /* CopyIn */:\n                return this.parseCopyInMessage(offset, length, bytes);\n            case 72 /* CopyOut */:\n                return this.parseCopyOutMessage(offset, length, bytes);\n            case 100 /* CopyData */:\n                return this.parseCopyData(offset, length, bytes);\n            default:\n                assert_1.default.fail(`unknown message code: ${code.toString(16)}`);\n        }\n    }\n    parseReadyForQueryMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const status = this.reader.string(1);\n        return new messages_1.ReadyForQueryMessage(length, status);\n    }\n    parseCommandCompleteMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const text = this.reader.cstring();\n        return new messages_1.CommandCompleteMessage(length, text);\n    }\n    parseCopyData(offset, length, bytes) {\n        const chunk = bytes.slice(offset, offset + (length - 4));\n        return new messages_1.CopyDataMessage(length, chunk);\n    }\n    parseCopyInMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\n    }\n    parseCopyOutMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\n    }\n    parseCopyMessage(offset, length, bytes, messageName) {\n        this.reader.setBuffer(offset, bytes);\n        const isBinary = this.reader.byte() !== 0;\n        const columnCount = this.reader.int16();\n        const message = new messages_1.CopyResponse(length, messageName, isBinary, columnCount);\n        for (let i = 0; i < columnCount; i++) {\n            message.columnTypes[i] = this.reader.int16();\n        }\n        return message;\n    }\n    parseNotificationMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processId = this.reader.int32();\n        const channel = this.reader.cstring();\n        const payload = this.reader.cstring();\n        return new messages_1.NotificationResponseMessage(length, processId, channel, payload);\n    }\n    parseRowDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const message = new messages_1.RowDescriptionMessage(length, fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            message.fields[i] = this.parseField();\n        }\n        return message;\n    }\n    parseField() {\n        const name = this.reader.cstring();\n        const tableID = this.reader.int32();\n        const columnID = this.reader.int16();\n        const dataTypeID = this.reader.int32();\n        const dataTypeSize = this.reader.int16();\n        const dataTypeModifier = this.reader.int32();\n        const mode = this.reader.int16() === 0 ? 'text' : 'binary';\n        return new messages_1.Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\n    }\n    parseParameterDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const parameterCount = this.reader.int16();\n        const message = new messages_1.ParameterDescriptionMessage(length, parameterCount);\n        for (let i = 0; i < parameterCount; i++) {\n            message.dataTypeIDs[i] = this.reader.int32();\n        }\n        return message;\n    }\n    parseDataRowMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const fields = new Array(fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            const len = this.reader.int32();\n            // a -1 for length means the value of the field is null\n            fields[i] = len === -1 ? null : this.reader.string(len);\n        }\n        return new messages_1.DataRowMessage(length, fields);\n    }\n    parseParameterStatusMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const name = this.reader.cstring();\n        const value = this.reader.cstring();\n        return new messages_1.ParameterStatusMessage(length, name, value);\n    }\n    parseBackendKeyData(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processID = this.reader.int32();\n        const secretKey = this.reader.int32();\n        return new messages_1.BackendKeyDataMessage(length, processID, secretKey);\n    }\n    parseAuthenticationResponse(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const code = this.reader.int32();\n        // TODO(bmc): maybe better types here\n        const message = {\n            name: 'authenticationOk',\n            length,\n        };\n        switch (code) {\n            case 0: // AuthenticationOk\n                break;\n            case 3: // AuthenticationCleartextPassword\n                if (message.length === 8) {\n                    message.name = 'authenticationCleartextPassword';\n                }\n                break;\n            case 5: // AuthenticationMD5Password\n                if (message.length === 12) {\n                    message.name = 'authenticationMD5Password';\n                    const salt = this.reader.bytes(4);\n                    return new messages_1.AuthenticationMD5Password(length, salt);\n                }\n                break;\n            case 10: // AuthenticationSASL\n                message.name = 'authenticationSASL';\n                message.mechanisms = [];\n                let mechanism;\n                do {\n                    mechanism = this.reader.cstring();\n                    if (mechanism) {\n                        message.mechanisms.push(mechanism);\n                    }\n                } while (mechanism);\n                break;\n            case 11: // AuthenticationSASLContinue\n                message.name = 'authenticationSASLContinue';\n                message.data = this.reader.string(length - 8);\n                break;\n            case 12: // AuthenticationSASLFinal\n                message.name = 'authenticationSASLFinal';\n                message.data = this.reader.string(length - 8);\n                break;\n            default:\n                throw new Error('Unknown authenticationOk message type ' + code);\n        }\n        return message;\n    }\n    parseErrorMessage(offset, length, bytes, name) {\n        this.reader.setBuffer(offset, bytes);\n        const fields = {};\n        let fieldType = this.reader.string(1);\n        while (fieldType !== '\\0') {\n            fields[fieldType] = this.reader.cstring();\n            fieldType = this.reader.string(1);\n        }\n        const messageValue = fields.M;\n        const message = name === 'notice' ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);\n        message.severity = fields.S;\n        message.code = fields.C;\n        message.detail = fields.D;\n        message.hint = fields.H;\n        message.position = fields.P;\n        message.internalPosition = fields.p;\n        message.internalQuery = fields.q;\n        message.where = fields.W;\n        message.schema = fields.s;\n        message.table = fields.t;\n        message.column = fields.c;\n        message.dataType = fields.d;\n        message.constraint = fields.n;\n        message.file = fields.F;\n        message.line = fields.L;\n        message.routine = fields.R;\n        return message;\n    }\n}\nexports.Parser = Parser;\n//# sourceMappingURL=parser.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-protocol/dist/parser.js?");

/***/ }),

/***/ "./node_modules/pg-protocol/dist/serializer.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-protocol/dist/serializer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serialize = void 0;\nconst buffer_writer_1 = __webpack_require__(/*! ./buffer-writer */ \"./node_modules/pg-protocol/dist/buffer-writer.js\");\nconst writer = new buffer_writer_1.Writer();\nconst startup = (opts) => {\n    // protocol version\n    writer.addInt16(3).addInt16(0);\n    for (const key of Object.keys(opts)) {\n        writer.addCString(key).addCString(opts[key]);\n    }\n    writer.addCString('client_encoding').addCString('UTF8');\n    var bodyBuffer = writer.addCString('').flush();\n    // this message is sent without a code\n    var length = bodyBuffer.length + 4;\n    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\nconst requestSsl = () => {\n    const response = Buffer.allocUnsafe(8);\n    response.writeInt32BE(8, 0);\n    response.writeInt32BE(80877103, 4);\n    return response;\n};\nconst password = (password) => {\n    return writer.addCString(password).flush(112 /* startup */);\n};\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n    // 0x70 = 'p'\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n    return writer.flush(112 /* startup */);\n};\nconst sendSCRAMClientFinalMessage = function (additionalData) {\n    return writer.addString(additionalData).flush(112 /* startup */);\n};\nconst query = (text) => {\n    return writer.addCString(text).flush(81 /* query */);\n};\nconst emptyArray = [];\nconst parse = (query) => {\n    // expect something like this:\n    // { name: 'queryName',\n    //   text: 'select * from blah',\n    //   types: ['int8', 'bool'] }\n    // normalize missing query names to allow for null\n    const name = query.name || '';\n    if (name.length > 63) {\n        /* eslint-disable no-console */\n        console.error('Warning! Postgres only supports 63 characters for query names.');\n        console.error('You supplied %s (%s)', name, name.length);\n        console.error('This can cause conflicts and silent errors executing queries');\n        /* eslint-enable no-console */\n    }\n    const types = query.types || emptyArray;\n    var len = types.length;\n    var buffer = writer\n        .addCString(name) // name of query\n        .addCString(query.text) // actual query text\n        .addInt16(len);\n    for (var i = 0; i < len; i++) {\n        buffer.addInt32(types[i]);\n    }\n    return writer.flush(80 /* parse */);\n};\nconst paramWriter = new buffer_writer_1.Writer();\nconst writeValues = function (values, valueMapper) {\n    for (let i = 0; i < values.length; i++) {\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n        if (mappedVal == null) {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* STRING */);\n            // write -1 to the param writer to indicate null\n            paramWriter.addInt32(-1);\n        }\n        else if (mappedVal instanceof Buffer) {\n            // add the param type (binary) to the writer\n            writer.addInt16(1 /* BINARY */);\n            // add the buffer to the param writer\n            paramWriter.addInt32(mappedVal.length);\n            paramWriter.add(mappedVal);\n        }\n        else {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* STRING */);\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\n            paramWriter.addString(mappedVal);\n        }\n    }\n};\nconst bind = (config = {}) => {\n    // normalize config\n    const portal = config.portal || '';\n    const statement = config.statement || '';\n    const binary = config.binary || false;\n    const values = config.values || emptyArray;\n    const len = values.length;\n    writer.addCString(portal).addCString(statement);\n    writer.addInt16(len);\n    writeValues(values, config.valueMapper);\n    writer.addInt16(len);\n    writer.add(paramWriter.flush());\n    // format code\n    writer.addInt16(binary ? 1 /* BINARY */ : 0 /* STRING */);\n    return writer.flush(66 /* bind */);\n};\nconst emptyExecute = Buffer.from([69 /* execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst execute = (config) => {\n    // this is the happy path for most queries\n    if (!config || (!config.portal && !config.rows)) {\n        return emptyExecute;\n    }\n    const portal = config.portal || '';\n    const rows = config.rows || 0;\n    const portalLength = Buffer.byteLength(portal);\n    const len = 4 + portalLength + 1 + 4;\n    // one extra bit for code\n    const buff = Buffer.allocUnsafe(1 + len);\n    buff[0] = 69 /* execute */;\n    buff.writeInt32BE(len, 1);\n    buff.write(portal, 5, 'utf-8');\n    buff[portalLength + 5] = 0; // null terminate portal cString\n    buff.writeUInt32BE(rows, buff.length - 4);\n    return buff;\n};\nconst cancel = (processID, secretKey) => {\n    const buffer = Buffer.allocUnsafe(16);\n    buffer.writeInt32BE(16, 0);\n    buffer.writeInt16BE(1234, 4);\n    buffer.writeInt16BE(5678, 6);\n    buffer.writeInt32BE(processID, 8);\n    buffer.writeInt32BE(secretKey, 12);\n    return buffer;\n};\nconst cstringMessage = (code, string) => {\n    const stringLen = Buffer.byteLength(string);\n    const len = 4 + stringLen + 1;\n    // one extra bit for code\n    const buffer = Buffer.allocUnsafe(1 + len);\n    buffer[0] = code;\n    buffer.writeInt32BE(len, 1);\n    buffer.write(string, 5, 'utf-8');\n    buffer[len] = 0; // null terminate cString\n    return buffer;\n};\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* describe */);\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* describe */);\nconst describe = (msg) => {\n    return msg.name\n        ? cstringMessage(68 /* describe */, `${msg.type}${msg.name || ''}`)\n        : msg.type === 'P'\n            ? emptyDescribePortal\n            : emptyDescribeStatement;\n};\nconst close = (msg) => {\n    const text = `${msg.type}${msg.name || ''}`;\n    return cstringMessage(67 /* close */, text);\n};\nconst copyData = (chunk) => {\n    return writer.add(chunk).flush(100 /* copyFromChunk */);\n};\nconst copyFail = (message) => {\n    return cstringMessage(102 /* copyFail */, message);\n};\nconst codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\nconst flushBuffer = codeOnlyBuffer(72 /* flush */);\nconst syncBuffer = codeOnlyBuffer(83 /* sync */);\nconst endBuffer = codeOnlyBuffer(88 /* end */);\nconst copyDoneBuffer = codeOnlyBuffer(99 /* copyDone */);\nconst serialize = {\n    startup,\n    password,\n    requestSsl,\n    sendSASLInitialResponseMessage,\n    sendSCRAMClientFinalMessage,\n    query,\n    parse,\n    bind,\n    execute,\n    describe,\n    close,\n    flush: () => flushBuffer,\n    sync: () => syncBuffer,\n    end: () => endBuffer,\n    copyData,\n    copyDone: () => copyDoneBuffer,\n    copyFail,\n    cancel,\n};\nexports.serialize = serialize;\n//# sourceMappingURL=serializer.js.map\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-protocol/dist/serializer.js?");

/***/ }),

/***/ "./node_modules/pg-types/index.js":
/*!****************************************!*\
  !*** ./node_modules/pg-types/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var textParsers = __webpack_require__(/*! ./lib/textParsers */ \"./node_modules/pg-types/lib/textParsers.js\");\nvar binaryParsers = __webpack_require__(/*! ./lib/binaryParsers */ \"./node_modules/pg-types/lib/binaryParsers.js\");\nvar arrayParser = __webpack_require__(/*! ./lib/arrayParser */ \"./node_modules/pg-types/lib/arrayParser.js\");\nvar builtinTypes = __webpack_require__(/*! ./lib/builtins */ \"./node_modules/pg-types/lib/builtins.js\");\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nfunction noParse (val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nfunction getTypeParser (oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nfunction setTypeParser (oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-types/index.js?");

/***/ }),

/***/ "./node_modules/pg-types/lib/arrayParser.js":
/*!**************************************************!*\
  !*** ./node_modules/pg-types/lib/arrayParser.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var array = __webpack_require__(/*! postgres-array */ \"./node_modules/postgres-array/index.js\");\n\nmodule.exports = {\n  create: function (source, transform) {\n    return {\n      parse: function() {\n        return array.parse(source, transform);\n      }\n    };\n  }\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-types/lib/arrayParser.js?");

/***/ }),

/***/ "./node_modules/pg-types/lib/binaryParsers.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-types/lib/binaryParsers.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var parseInt64 = __webpack_require__(/*! pg-int8 */ \"./node_modules/pg-int8/index.js\");\n\nvar parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(20, parseInt64);\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-types/lib/binaryParsers.js?");

/***/ }),

/***/ "./node_modules/pg-types/lib/builtins.js":
/*!***********************************************!*\
  !*** ./node_modules/pg-types/lib/builtins.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/**\n * Following query was used to generate this file:\n\n SELECT json_object_agg(UPPER(PT.typname), PT.oid::int4 ORDER BY pt.oid)\n FROM pg_type PT\n WHERE typnamespace = (SELECT pgn.oid FROM pg_namespace pgn WHERE nspname = 'pg_catalog') -- Take only builting Postgres types with stable OID (extension types are not guaranted to be stable)\n AND typtype = 'b' -- Only basic types\n AND typelem = 0 -- Ignore aliases\n AND typisdefined -- Ignore undefined types\n */\n\nmodule.exports = {\n    BOOL: 16,\n    BYTEA: 17,\n    CHAR: 18,\n    INT8: 20,\n    INT2: 21,\n    INT4: 23,\n    REGPROC: 24,\n    TEXT: 25,\n    OID: 26,\n    TID: 27,\n    XID: 28,\n    CID: 29,\n    JSON: 114,\n    XML: 142,\n    PG_NODE_TREE: 194,\n    SMGR: 210,\n    PATH: 602,\n    POLYGON: 604,\n    CIDR: 650,\n    FLOAT4: 700,\n    FLOAT8: 701,\n    ABSTIME: 702,\n    RELTIME: 703,\n    TINTERVAL: 704,\n    CIRCLE: 718,\n    MACADDR8: 774,\n    MONEY: 790,\n    MACADDR: 829,\n    INET: 869,\n    ACLITEM: 1033,\n    BPCHAR: 1042,\n    VARCHAR: 1043,\n    DATE: 1082,\n    TIME: 1083,\n    TIMESTAMP: 1114,\n    TIMESTAMPTZ: 1184,\n    INTERVAL: 1186,\n    TIMETZ: 1266,\n    BIT: 1560,\n    VARBIT: 1562,\n    NUMERIC: 1700,\n    REFCURSOR: 1790,\n    REGPROCEDURE: 2202,\n    REGOPER: 2203,\n    REGOPERATOR: 2204,\n    REGCLASS: 2205,\n    REGTYPE: 2206,\n    UUID: 2950,\n    TXID_SNAPSHOT: 2970,\n    PG_LSN: 3220,\n    PG_NDISTINCT: 3361,\n    PG_DEPENDENCIES: 3402,\n    TSVECTOR: 3614,\n    TSQUERY: 3615,\n    GTSVECTOR: 3642,\n    REGCONFIG: 3734,\n    REGDICTIONARY: 3769,\n    JSONB: 3802,\n    REGNAMESPACE: 4089,\n    REGROLE: 4096\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-types/lib/builtins.js?");

/***/ }),

/***/ "./node_modules/pg-types/lib/textParsers.js":
/*!**************************************************!*\
  !*** ./node_modules/pg-types/lib/textParsers.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var array = __webpack_require__(/*! postgres-array */ \"./node_modules/postgres-array/index.js\")\nvar arrayParser = __webpack_require__(/*! ./arrayParser */ \"./node_modules/pg-types/lib/arrayParser.js\");\nvar parseDate = __webpack_require__(/*! postgres-date */ \"./node_modules/postgres-date/index.js\");\nvar parseInterval = __webpack_require__(/*! postgres-interval */ \"./node_modules/postgres-interval/index.js\");\nvar parseByteA = __webpack_require__(/*! postgres-bytea */ \"./node_modules/postgres-bytea/index.js\");\n\nfunction allowNull (fn) {\n  return function nullAllowed (value) {\n    if (value === null) return value\n    return fn(value)\n  }\n}\n\nfunction parseBool (value) {\n  if (value === null) return value\n  return value === 'TRUE' ||\n    value === 't' ||\n    value === 'true' ||\n    value === 'y' ||\n    value === 'yes' ||\n    value === 'on' ||\n    value === '1';\n}\n\nfunction parseBoolArray (value) {\n  if (!value) return null\n  return array.parse(value, parseBool)\n}\n\nfunction parseBaseTenInt (string) {\n  return parseInt(string, 10)\n}\n\nfunction parseIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(parseBaseTenInt))\n}\n\nfunction parseBigIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(function (entry) {\n    return parseBigInteger(entry).trim()\n  }))\n}\n\nvar parsePointArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parsePoint(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseFloatArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parseFloat(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseStringArray = function(value) {\n  if(!value) { return null; }\n\n  var p = arrayParser.create(value);\n  return p.parse();\n};\n\nvar parseDateArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseIntervalArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseInterval(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseByteAArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(parseByteA));\n};\n\nvar parseInteger = function(value) {\n  return parseInt(value, 10);\n};\n\nvar parseBigInteger = function(value) {\n  var valStr = String(value);\n  if (/^\\d+$/.test(valStr)) { return valStr; }\n  return value;\n};\n\nvar parseJsonArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(JSON.parse));\n};\n\nvar parsePoint = function(value) {\n  if (value[0] !== '(') { return null; }\n\n  value = value.substring( 1, value.length - 1 ).split(',');\n\n  return {\n    x: parseFloat(value[0])\n  , y: parseFloat(value[1])\n  };\n};\n\nvar parseCircle = function(value) {\n  if (value[0] !== '<' && value[1] !== '(') { return null; }\n\n  var point = '(';\n  var radius = '';\n  var pointParsed = false;\n  for (var i = 2; i < value.length - 1; i++){\n    if (!pointParsed) {\n      point += value[i];\n    }\n\n    if (value[i] === ')') {\n      pointParsed = true;\n      continue;\n    } else if (!pointParsed) {\n      continue;\n    }\n\n    if (value[i] === ','){\n      continue;\n    }\n\n    radius += value[i];\n  }\n  var result = parsePoint(point);\n  result.radius = parseFloat(radius);\n\n  return result;\n};\n\nvar init = function(register) {\n  register(20, parseBigInteger); // int8\n  register(21, parseInteger); // int2\n  register(23, parseInteger); // int4\n  register(26, parseInteger); // oid\n  register(700, parseFloat); // float4/real\n  register(701, parseFloat); // float8/double\n  register(16, parseBool);\n  register(1082, parseDate); // date\n  register(1114, parseDate); // timestamp without timezone\n  register(1184, parseDate); // timestamp\n  register(600, parsePoint); // point\n  register(651, parseStringArray); // cidr[]\n  register(718, parseCircle); // circle\n  register(1000, parseBoolArray);\n  register(1001, parseByteAArray);\n  register(1005, parseIntegerArray); // _int2\n  register(1007, parseIntegerArray); // _int4\n  register(1028, parseIntegerArray); // oid[]\n  register(1016, parseBigIntegerArray); // _int8\n  register(1017, parsePointArray); // point[]\n  register(1021, parseFloatArray); // _float4\n  register(1022, parseFloatArray); // _float8\n  register(1231, parseFloatArray); // _numeric\n  register(1014, parseStringArray); //char\n  register(1015, parseStringArray); //varchar\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1040, parseStringArray); // macaddr[]\n  register(1041, parseStringArray); // inet[]\n  register(1115, parseDateArray); // timestamp without time zone[]\n  register(1182, parseDateArray); // _date\n  register(1185, parseDateArray); // timestamp with time zone[]\n  register(1186, parseInterval);\n  register(1187, parseIntervalArray);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON)); // json\n  register(3802, JSON.parse.bind(JSON)); // jsonb\n  register(199, parseJsonArray); // json[]\n  register(3807, parseJsonArray); // jsonb[]\n  register(3907, parseStringArray); // numrange[]\n  register(2951, parseStringArray); // uuid[]\n  register(791, parseStringArray); // money[]\n  register(1183, parseStringArray); // time[]\n  register(1270, parseStringArray); // timetz[]\n};\n\nmodule.exports = {\n  init: init\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-types/lib/textParsers.js?");

/***/ }),

/***/ "./node_modules/pg/lib/client.js":
/*!***************************************!*\
  !*** ./node_modules/pg/lib/client.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter)\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/pg/lib/utils.js\")\nvar sasl = __webpack_require__(/*! ./crypto/sasl */ \"./node_modules/pg/lib/crypto/sasl.js\")\nvar TypeOverrides = __webpack_require__(/*! ./type-overrides */ \"./node_modules/pg/lib/type-overrides.js\")\n\nvar ConnectionParameters = __webpack_require__(/*! ./connection-parameters */ \"./node_modules/pg/lib/connection-parameters.js\")\nvar Query = __webpack_require__(/*! ./query */ \"./node_modules/pg/lib/query.js\")\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/pg/lib/defaults.js\")\nvar Connection = __webpack_require__(/*! ./connection */ \"./node_modules/pg/lib/connection.js\")\nconst crypto = __webpack_require__(/*! ./crypto/utils */ \"./node_modules/pg/lib/crypto/utils.js\")\n\nclass Client extends EventEmitter {\n  constructor(config) {\n    super()\n\n    this.connectionParameters = new ConnectionParameters(config)\n    this.user = this.connectionParameters.user\n    this.database = this.connectionParameters.database\n    this.port = this.connectionParameters.port\n    this.host = this.connectionParameters.host\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: this.connectionParameters.password,\n    })\n\n    this.replication = this.connectionParameters.replication\n\n    var c = config || {}\n\n    this._Promise = c.Promise || global.Promise\n    this._types = new TypeOverrides(c.types)\n    this._ending = false\n    this._ended = false\n    this._connecting = false\n    this._connected = false\n    this._connectionError = false\n    this._queryable = true\n\n    this.connection =\n      c.connection ||\n      new Connection({\n        stream: c.stream,\n        ssl: this.connectionParameters.ssl,\n        keepAlive: c.keepAlive || false,\n        keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n        encoding: this.connectionParameters.client_encoding || 'utf8',\n      })\n    this.queryQueue = []\n    this.binary = c.binary || defaults.binary\n    this.processID = null\n    this.secretKey = null\n    this.ssl = this.connectionParameters.ssl || false\n    // As with Password, make SSL->Key (the private key) non-enumerable.\n    // It won't show up in stack traces\n    // or if the client is console.logged\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n  }\n\n  _errorAllQueries(err) {\n    const enqueueError = (query) => {\n      process.nextTick(() => {\n        query.handleError(err, this.connection)\n      })\n    }\n\n    if (this.activeQuery) {\n      enqueueError(this.activeQuery)\n      this.activeQuery = null\n    }\n\n    this.queryQueue.forEach(enqueueError)\n    this.queryQueue.length = 0\n  }\n\n  _connect(callback) {\n    var self = this\n    var con = this.connection\n    this._connectionCallback = callback\n\n    if (this._connecting || this._connected) {\n      const err = new Error('Client has already been connected. You cannot reuse a client.')\n      process.nextTick(() => {\n        callback(err)\n      })\n      return\n    }\n    this._connecting = true\n\n    this.connectionTimeoutHandle\n    if (this._connectionTimeoutMillis > 0) {\n      this.connectionTimeoutHandle = setTimeout(() => {\n        con._ending = true\n        con.stream.destroy(new Error('timeout expired'))\n      }, this._connectionTimeoutMillis)\n    }\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send startup message\n    con.on('connect', function () {\n      if (self.ssl) {\n        con.requestSsl()\n      } else {\n        con.startup(self.getStartupConf())\n      }\n    })\n\n    con.on('sslconnect', function () {\n      con.startup(self.getStartupConf())\n    })\n\n    this._attachListeners(con)\n\n    con.once('end', () => {\n      const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly')\n\n      clearTimeout(this.connectionTimeoutHandle)\n      this._errorAllQueries(error)\n      this._ended = true\n\n      if (!this._ending) {\n        // if the connection is ended without us calling .end()\n        // on this client then we have an unexpected disconnection\n        // treat this as an error unless we've already emitted an error\n        // during connection.\n        if (this._connecting && !this._connectionError) {\n          if (this._connectionCallback) {\n            this._connectionCallback(error)\n          } else {\n            this._handleErrorEvent(error)\n          }\n        } else if (!this._connectionError) {\n          this._handleErrorEvent(error)\n        }\n      }\n\n      process.nextTick(() => {\n        this.emit('end')\n      })\n    })\n  }\n\n  connect(callback) {\n    if (callback) {\n      this._connect(callback)\n      return\n    }\n\n    return new this._Promise((resolve, reject) => {\n      this._connect((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  _attachListeners(con) {\n    // password request handling\n    con.on('authenticationCleartextPassword', this._handleAuthCleartextPassword.bind(this))\n    // password request handling\n    con.on('authenticationMD5Password', this._handleAuthMD5Password.bind(this))\n    // password request handling (SASL)\n    con.on('authenticationSASL', this._handleAuthSASL.bind(this))\n    con.on('authenticationSASLContinue', this._handleAuthSASLContinue.bind(this))\n    con.on('authenticationSASLFinal', this._handleAuthSASLFinal.bind(this))\n    con.on('backendKeyData', this._handleBackendKeyData.bind(this))\n    con.on('error', this._handleErrorEvent.bind(this))\n    con.on('errorMessage', this._handleErrorMessage.bind(this))\n    con.on('readyForQuery', this._handleReadyForQuery.bind(this))\n    con.on('notice', this._handleNotice.bind(this))\n    con.on('rowDescription', this._handleRowDescription.bind(this))\n    con.on('dataRow', this._handleDataRow.bind(this))\n    con.on('portalSuspended', this._handlePortalSuspended.bind(this))\n    con.on('emptyQuery', this._handleEmptyQuery.bind(this))\n    con.on('commandComplete', this._handleCommandComplete.bind(this))\n    con.on('parseComplete', this._handleParseComplete.bind(this))\n    con.on('copyInResponse', this._handleCopyInResponse.bind(this))\n    con.on('copyData', this._handleCopyData.bind(this))\n    con.on('notification', this._handleNotification.bind(this))\n  }\n\n  // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n  // it can be supplied by the user if required - this is a breaking change!\n  _checkPgPass(cb) {\n    const con = this.connection\n    if (typeof this.password === 'function') {\n      this._Promise\n        .resolve()\n        .then(() => this.password())\n        .then((pass) => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'))\n              return\n            }\n            this.connectionParameters.password = this.password = pass\n          } else {\n            this.connectionParameters.password = this.password = null\n          }\n          cb()\n        })\n        .catch((err) => {\n          con.emit('error', err)\n        })\n    } else if (this.password !== null) {\n      cb()\n    } else {\n      try {\n        const pgPass = __webpack_require__(/*! pgpass */ \"./node_modules/pgpass/lib/index.js\")\n        pgPass(this.connectionParameters, (pass) => {\n          if (undefined !== pass) {\n            this.connectionParameters.password = this.password = pass\n          }\n          cb()\n        })\n      } catch (e) {\n        this.emit('error', e)\n      }\n    }\n  }\n\n  _handleAuthCleartextPassword(msg) {\n    this._checkPgPass(() => {\n      this.connection.password(this.password)\n    })\n  }\n\n  _handleAuthMD5Password(msg) {\n    this._checkPgPass(async () => {\n      try {\n        const hashedPassword = await crypto.postgresMd5PasswordHash(this.user, this.password, msg.salt)\n        this.connection.password(hashedPassword)\n      } catch (e) {\n        this.emit('error', e)\n      }\n    })\n  }\n\n  _handleAuthSASL(msg) {\n    this._checkPgPass(() => {\n      try {\n        this.saslSession = sasl.startSession(msg.mechanisms)\n        this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response)\n      } catch (err) {\n        this.connection.emit('error', err)\n      }\n    })\n  }\n\n  async _handleAuthSASLContinue(msg) {\n    try {\n      await sasl.continueSession(this.saslSession, this.password, msg.data)\n      this.connection.sendSCRAMClientFinalMessage(this.saslSession.response)\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleAuthSASLFinal(msg) {\n    try {\n      sasl.finalizeSession(this.saslSession, msg.data)\n      this.saslSession = null\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleBackendKeyData(msg) {\n    this.processID = msg.processID\n    this.secretKey = msg.secretKey\n  }\n\n  _handleReadyForQuery(msg) {\n    if (this._connecting) {\n      this._connecting = false\n      this._connected = true\n      clearTimeout(this.connectionTimeoutHandle)\n\n      // process possible callback argument to Client#connect\n      if (this._connectionCallback) {\n        this._connectionCallback(null, this)\n        // remove callback for proper error handling\n        // after the connect event\n        this._connectionCallback = null\n      }\n      this.emit('connect')\n    }\n    const { activeQuery } = this\n    this.activeQuery = null\n    this.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(this.connection)\n    }\n    this._pulseQueryQueue()\n  }\n\n  // if we receieve an error event or error message\n  // during the connection process we handle it here\n  _handleErrorWhileConnecting(err) {\n    if (this._connectionError) {\n      // TODO(bmc): this is swallowing errors - we shouldn't do this\n      return\n    }\n    this._connectionError = true\n    clearTimeout(this.connectionTimeoutHandle)\n    if (this._connectionCallback) {\n      return this._connectionCallback(err)\n    }\n    this.emit('error', err)\n  }\n\n  // if we're connected and we receive an error event from the connection\n  // this means the socket is dead - do a hard abort of all queries and emit\n  // the socket error on the client as well\n  _handleErrorEvent(err) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(err)\n    }\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  // handle error messages from the postgres backend\n  _handleErrorMessage(msg) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(msg)\n    }\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      this._handleErrorEvent(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, this.connection)\n  }\n\n  _handleRowDescription(msg) {\n    // delegate rowDescription to active query\n    this.activeQuery.handleRowDescription(msg)\n  }\n\n  _handleDataRow(msg) {\n    // delegate dataRow to active query\n    this.activeQuery.handleDataRow(msg)\n  }\n\n  _handlePortalSuspended(msg) {\n    // delegate portalSuspended to active query\n    this.activeQuery.handlePortalSuspended(this.connection)\n  }\n\n  _handleEmptyQuery(msg) {\n    // delegate emptyQuery to active query\n    this.activeQuery.handleEmptyQuery(this.connection)\n  }\n\n  _handleCommandComplete(msg) {\n    // delegate commandComplete to active query\n    this.activeQuery.handleCommandComplete(msg, this.connection)\n  }\n\n  _handleParseComplete(msg) {\n    // if a prepared statement has a name and properly parses\n    // we track that its already been executed so we don't parse\n    // it again on the same client\n    if (this.activeQuery.name) {\n      this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text\n    }\n  }\n\n  _handleCopyInResponse(msg) {\n    this.activeQuery.handleCopyInResponse(this.connection)\n  }\n\n  _handleCopyData(msg) {\n    this.activeQuery.handleCopyData(msg, this.connection)\n  }\n\n  _handleNotification(msg) {\n    this.emit('notification', msg)\n  }\n\n  _handleNotice(msg) {\n    this.emit('notice', msg)\n  }\n\n  getStartupConf() {\n    var params = this.connectionParameters\n\n    var data = {\n      user: params.user,\n      database: params.database,\n    }\n\n    var appName = params.application_name || params.fallback_application_name\n    if (appName) {\n      data.application_name = appName\n    }\n    if (params.replication) {\n      data.replication = '' + params.replication\n    }\n    if (params.statement_timeout) {\n      data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n    }\n    if (params.lock_timeout) {\n      data.lock_timeout = String(parseInt(params.lock_timeout, 10))\n    }\n    if (params.idle_in_transaction_session_timeout) {\n      data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n    }\n    if (params.options) {\n      data.options = params.options\n    }\n\n    return data\n  }\n\n  cancel(client, query) {\n    if (client.activeQuery === query) {\n      var con = this.connection\n\n      if (this.host && this.host.indexOf('/') === 0) {\n        con.connect(this.host + '/.s.PGSQL.' + this.port)\n      } else {\n        con.connect(this.port, this.host)\n      }\n\n      // once connection is established send cancel message\n      con.on('connect', function () {\n        con.cancel(client.processID, client.secretKey)\n      })\n    } else if (client.queryQueue.indexOf(query) !== -1) {\n      client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n    }\n  }\n\n  setTypeParser(oid, format, parseFn) {\n    return this._types.setTypeParser(oid, format, parseFn)\n  }\n\n  getTypeParser(oid, format) {\n    return this._types.getTypeParser(oid, format)\n  }\n\n  // escapeIdentifier and escapeLiteral moved to utility functions & exported\n  // on PG\n  // re-exported here for backwards compatibility\n  escapeIdentifier(str) {\n    return utils.escapeIdentifier(str)\n  }\n\n  escapeLiteral(str) {\n    return utils.escapeLiteral(str)\n  }\n\n  _pulseQueryQueue() {\n    if (this.readyForQuery === true) {\n      this.activeQuery = this.queryQueue.shift()\n      if (this.activeQuery) {\n        this.readyForQuery = false\n        this.hasExecuted = true\n\n        const queryError = this.activeQuery.submit(this.connection)\n        if (queryError) {\n          process.nextTick(() => {\n            this.activeQuery.handleError(queryError, this.connection)\n            this.readyForQuery = true\n            this._pulseQueryQueue()\n          })\n        }\n      } else if (this.hasExecuted) {\n        this.activeQuery = null\n        this.emit('drain')\n      }\n    }\n  }\n\n  query(config, values, callback) {\n    // can take in strings, config object or query object\n    var query\n    var result\n    var readTimeout\n    var readTimeoutTimer\n    var queryCallback\n\n    if (config === null || config === undefined) {\n      throw new TypeError('Client was passed a null or undefined query')\n    } else if (typeof config.submit === 'function') {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      result = query = config\n      if (typeof values === 'function') {\n        query.callback = query.callback || values\n      }\n    } else {\n      readTimeout = this.connectionParameters.query_timeout\n      query = new Query(config, values, callback)\n      if (!query.callback) {\n        result = new this._Promise((resolve, reject) => {\n          query.callback = (err, res) => (err ? reject(err) : resolve(res))\n        }).catch(err => {\n          // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n          // application that created the query\n          Error.captureStackTrace(err);\n          throw err;\n        })\n      }\n    }\n\n    if (readTimeout) {\n      queryCallback = query.callback\n\n      readTimeoutTimer = setTimeout(() => {\n        var error = new Error('Query read timeout')\n\n        process.nextTick(() => {\n          query.handleError(error, this.connection)\n        })\n\n        queryCallback(error)\n\n        // we already returned an error,\n        // just do nothing if query completes\n        query.callback = () => {}\n\n        // Remove from queue\n        var index = this.queryQueue.indexOf(query)\n        if (index > -1) {\n          this.queryQueue.splice(index, 1)\n        }\n\n        this._pulseQueryQueue()\n      }, readTimeout)\n\n      query.callback = (err, res) => {\n        clearTimeout(readTimeoutTimer)\n        queryCallback(err, res)\n      }\n    }\n\n    if (this.binary && !query.binary) {\n      query.binary = true\n    }\n\n    if (query._result && !query._result._types) {\n      query._result._types = this._types\n    }\n\n    if (!this._queryable) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    if (this._ending) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    this.queryQueue.push(query)\n    this._pulseQueryQueue()\n    return result\n  }\n\n  ref() {\n    this.connection.ref()\n  }\n\n  unref() {\n    this.connection.unref()\n  }\n\n  end(cb) {\n    this._ending = true\n\n    // if we have never connected, then end is a noop, callback immediately\n    if (!this.connection._connecting || this._ended) {\n      if (cb) {\n        cb()\n      } else {\n        return this._Promise.resolve()\n      }\n    }\n\n    if (this.activeQuery || !this._queryable) {\n      // if we have an active query we need to force a disconnect\n      // on the socket - otherwise a hung query could block end forever\n      this.connection.stream.destroy()\n    } else {\n      this.connection.end()\n    }\n\n    if (cb) {\n      this.connection.once('end', cb)\n    } else {\n      return new this._Promise((resolve) => {\n        this.connection.once('end', resolve)\n      })\n    }\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/client.js?");

/***/ }),

/***/ "./node_modules/pg/lib/connection-parameters.js":
/*!******************************************************!*\
  !*** ./node_modules/pg/lib/connection-parameters.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar dns = __webpack_require__(/*! dns */ \"dns\")\n\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/pg/lib/defaults.js\")\n\nvar parse = (__webpack_require__(/*! pg-connection-string */ \"./node_modules/pg-connection-string/index.js\").parse) // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString))\n    }\n\n    this.user = val('user', config)\n    this.database = val('database', config)\n\n    if (this.database === undefined) {\n      this.database = this.user\n    }\n\n    this.port = parseInt(val('port', config), 10)\n    this.host = val('host', config)\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config),\n    })\n\n    this.binary = val('binary', config)\n    this.options = val('options', config)\n\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = { rejectUnauthorized: false }\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.client_encoding = val('client_encoding', config)\n    this.replication = val('replication', config)\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/')\n\n    this.application_name = val('application_name', config, 'PGAPPNAME')\n    this.fallback_application_name = val('fallback_application_name', config, false)\n    this.statement_timeout = val('statement_timeout', config, false)\n    this.lock_timeout = val('lock_timeout', config, false)\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n    this.query_timeout = val('query_timeout', config, false)\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    var params = []\n    add(params, this, 'user')\n    add(params, this, 'password')\n    add(params, this, 'port')\n    add(params, this, 'application_name')\n    add(params, this, 'fallback_application_name')\n    add(params, this, 'connect_timeout')\n    add(params, this, 'options')\n\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n    add(params, ssl, 'sslmode')\n    add(params, ssl, 'sslca')\n    add(params, ssl, 'sslkey')\n    add(params, ssl, 'sslcert')\n    add(params, ssl, 'sslrootcert')\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database))\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication))\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host))\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '))\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null)\n      params.push('hostaddr=' + quoteParamValue(address))\n      return cb(null, params.join(' '))\n    })\n  }\n}\n\nmodule.exports = ConnectionParameters\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/connection-parameters.js?");

/***/ }),

/***/ "./node_modules/pg/lib/connection.js":
/*!*******************************************!*\
  !*** ./node_modules/pg/lib/connection.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar net = __webpack_require__(/*! net */ \"net\")\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter)\n\nconst { parse, serialize } = __webpack_require__(/*! pg-protocol */ \"./node_modules/pg-protocol/dist/index.js\")\nconst { getStream, getSecureStream } = __webpack_require__(/*! ./stream */ \"./node_modules/pg/lib/stream.js\")\n\nconst flushBuffer = serialize.flush()\nconst syncBuffer = serialize.sync()\nconst endBuffer = serialize.end()\n\n// TODO(bmc) support binary mode at some point\nclass Connection extends EventEmitter {\n  constructor(config) {\n    super()\n    config = config || {}\n\n    this.stream = config.stream || getStream(config.ssl)\n    if (typeof this.stream === 'function') {\n      this.stream = this.stream(config)\n    }\n\n    this._keepAlive = config.keepAlive\n    this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis\n    this.lastBuffer = false\n    this.parsedStatements = {}\n    this.ssl = config.ssl || false\n    this._ending = false\n    this._emitMessage = false\n    var self = this\n    this.on('newListener', function (eventName) {\n      if (eventName === 'message') {\n        self._emitMessage = true\n      }\n    })\n  }\n\n  connect(port, host) {\n    var self = this\n\n    this._connecting = true\n    this.stream.setNoDelay(true)\n    this.stream.connect(port, host)\n\n    this.stream.once('connect', function () {\n      if (self._keepAlive) {\n        self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis)\n      }\n      self.emit('connect')\n    })\n\n    const reportStreamError = function (error) {\n      // errors about disconnections should be ignored during disconnect\n      if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n        return\n      }\n      self.emit('error', error)\n    }\n    this.stream.on('error', reportStreamError)\n\n    this.stream.on('close', function () {\n      self.emit('end')\n    })\n\n    if (!this.ssl) {\n      return this.attachListeners(this.stream)\n    }\n\n    this.stream.once('data', function (buffer) {\n      var responseCode = buffer.toString('utf8')\n      switch (responseCode) {\n        case 'S': // Server supports SSL connections, continue with a secure connection\n          break\n        case 'N': // Server does not support SSL connections\n          self.stream.end()\n          return self.emit('error', new Error('The server does not support SSL connections'))\n        default:\n          // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n          self.stream.end()\n          return self.emit('error', new Error('There was an error establishing an SSL connection'))\n      }\n      const options = {\n        socket: self.stream,\n      }\n\n      if (self.ssl !== true) {\n        Object.assign(options, self.ssl)\n\n        if ('key' in self.ssl) {\n          options.key = self.ssl.key\n        }\n      }\n\n      var net = __webpack_require__(/*! net */ \"net\")\n      if (net.isIP && net.isIP(host) === 0) {\n        options.servername = host\n      }\n      try {\n        self.stream = getSecureStream(options)\n      } catch (err) {\n        return self.emit('error', err)\n      }\n      self.attachListeners(self.stream)\n      self.stream.on('error', reportStreamError)\n\n      self.emit('sslconnect')\n    })\n  }\n\n  attachListeners(stream) {\n    parse(stream, (msg) => {\n      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name\n      if (this._emitMessage) {\n        this.emit('message', msg)\n      }\n      this.emit(eventName, msg)\n    })\n  }\n\n  requestSsl() {\n    this.stream.write(serialize.requestSsl())\n  }\n\n  startup(config) {\n    this.stream.write(serialize.startup(config))\n  }\n\n  cancel(processID, secretKey) {\n    this._send(serialize.cancel(processID, secretKey))\n  }\n\n  password(password) {\n    this._send(serialize.password(password))\n  }\n\n  sendSASLInitialResponseMessage(mechanism, initialResponse) {\n    this._send(serialize.sendSASLInitialResponseMessage(mechanism, initialResponse))\n  }\n\n  sendSCRAMClientFinalMessage(additionalData) {\n    this._send(serialize.sendSCRAMClientFinalMessage(additionalData))\n  }\n\n  _send(buffer) {\n    if (!this.stream.writable) {\n      return false\n    }\n    return this.stream.write(buffer)\n  }\n\n  query(text) {\n    this._send(serialize.query(text))\n  }\n\n  // send parse message\n  parse(query) {\n    this._send(serialize.parse(query))\n  }\n\n  // send bind message\n  bind(config) {\n    this._send(serialize.bind(config))\n  }\n\n  // send execute message\n  execute(config) {\n    this._send(serialize.execute(config))\n  }\n\n  flush() {\n    if (this.stream.writable) {\n      this.stream.write(flushBuffer)\n    }\n  }\n\n  sync() {\n    this._ending = true\n    this._send(syncBuffer)\n  }\n\n  ref() {\n    this.stream.ref()\n  }\n\n  unref() {\n    this.stream.unref()\n  }\n\n  end() {\n    // 0x58 = 'X'\n    this._ending = true\n    if (!this._connecting || !this.stream.writable) {\n      this.stream.end()\n      return\n    }\n    return this.stream.write(endBuffer, () => {\n      this.stream.end()\n    })\n  }\n\n  close(msg) {\n    this._send(serialize.close(msg))\n  }\n\n  describe(msg) {\n    this._send(serialize.describe(msg))\n  }\n\n  sendCopyFromChunk(chunk) {\n    this._send(serialize.copyData(chunk))\n  }\n\n  endCopyFrom() {\n    this._send(serialize.copyDone())\n  }\n\n  sendCopyFail(msg) {\n    this._send(serialize.copyFail(msg))\n  }\n}\n\nmodule.exports = Connection\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/connection.js?");

/***/ }),

/***/ "./node_modules/pg/lib/crypto/sasl.js":
/*!********************************************!*\
  !*** ./node_modules/pg/lib/crypto/sasl.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst crypto = __webpack_require__(/*! ./utils */ \"./node_modules/pg/lib/crypto/utils.js\")\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nasync function continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string')\n  }\n  if (password === '') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string')\n  }\n\n  const sv = parseServerFirstMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')\n  }\n\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  var saltBytes = Buffer.from(sv.salt, 'base64')\n  var saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration)\n  var clientKey = await crypto.hmacSha256(saltedPassword, 'Client Key')\n  var storedKey = await crypto.sha256(clientKey)\n  var clientSignature = await crypto.hmacSha256(storedKey, authMessage)\n  var clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString('base64')\n  var serverKey = await crypto.hmacSha256(saltedPassword, 'Server Key')\n  var serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = Buffer.from(serverSignatureBytes).toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string')\n  }\n\n  const { serverSignature } = parseServerFinalMessage(serverData)\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string')\n  }\n  return text\n    .split('')\n    .map((_, i) => text.charCodeAt(i))\n    .every((c) => (c >= 0x21 && c <= 0x2b) || (c >= 0x2d && c <= 0x7e))\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text)\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string')\n  }\n\n  return new Map(\n    text.split(',').map((attrValue) => {\n      if (!/^.=/.test(attrValue)) {\n        throw new Error('SASL: Invalid attribute pair entry')\n      }\n      const name = attrValue[0]\n      const value = attrValue.substring(2)\n      return [name, value]\n    })\n  )\n}\n\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data)\n\n  const nonce = attrPairs.get('r')\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters')\n  }\n  const salt = attrPairs.get('s')\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64')\n  }\n  const iterationText = attrPairs.get('i')\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count')\n  }\n  const iteration = parseInt(iterationText, 10)\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData)\n  const serverSignature = attrPairs.get('v')\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing')\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64')\n  }\n  return {\n    serverSignature,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer')\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer')\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match')\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty')\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]))\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/crypto/sasl.js?");

/***/ }),

/***/ "./node_modules/pg/lib/crypto/utils-legacy.js":
/*!****************************************************!*\
  !*** ./node_modules/pg/lib/crypto/utils-legacy.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\n\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\")\n\nfunction md5(string) {\n  return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n  var inner = md5(password + user)\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nfunction sha256(text) {\n  return nodeCrypto.createHash('sha256').update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return nodeCrypto.createHmac('sha256', key).update(msg).digest()\n}\n\nasync function deriveKey(password, salt, iterations) {\n  return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256')\n}\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes: nodeCrypto.randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5,\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/crypto/utils-legacy.js?");

/***/ }),

/***/ "./node_modules/pg/lib/crypto/utils-webcrypto.js":
/*!*******************************************************!*\
  !*** ./node_modules/pg/lib/crypto/utils-webcrypto.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\")\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5,\n}\n\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */\nconst webCrypto = nodeCrypto.webcrypto || globalThis.crypto\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */\nconst subtleCrypto = webCrypto.subtle\nconst textEncoder = new TextEncoder()\n\n/**\n *\n * @param {*} length\n * @returns\n */\nfunction randomBytes(length) {\n  return webCrypto.getRandomValues(Buffer.alloc(length))\n}\n\nasync function md5(string) {\n  try {\n    return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n  } catch (e) {\n    // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n    // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n    // This is why we cannot just use WebCrypto in all environments.\n    const data = typeof string === 'string' ? textEncoder.encode(string) : string\n    const hash = await subtleCrypto.digest('MD5', data)\n    return Array.from(new Uint8Array(hash))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')\n  }\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n  var inner = await md5(password + user)\n  var outer = await md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */\nasync function sha256(text) {\n  return await subtleCrypto.digest('SHA-256', text)\n}\n\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */\nasync function hmacSha256(keyBuffer, msg) {\n  const key = await subtleCrypto.importKey('raw', keyBuffer, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign'])\n  return await subtleCrypto.sign('HMAC', key, textEncoder.encode(msg))\n}\n\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */\nasync function deriveKey(password, salt, iterations) {\n  const key = await subtleCrypto.importKey('raw', textEncoder.encode(password), 'PBKDF2', false, ['deriveBits'])\n  const params = { name: 'PBKDF2', hash: 'SHA-256', salt: salt, iterations: iterations }\n  return await subtleCrypto.deriveBits(params, key, 32 * 8, ['deriveBits'])\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/crypto/utils-webcrypto.js?");

/***/ }),

/***/ "./node_modules/pg/lib/crypto/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/pg/lib/crypto/utils.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst useLegacyCrypto = parseInt(process.versions && process.versions.node && process.versions.node.split('.')[0]) < 15\nif (useLegacyCrypto) {\n  // We are on an old version of Node.js that requires legacy crypto utilities.\n  module.exports = __webpack_require__(/*! ./utils-legacy */ \"./node_modules/pg/lib/crypto/utils-legacy.js\")\n} else {\n  module.exports = __webpack_require__(/*! ./utils-webcrypto */ \"./node_modules/pg/lib/crypto/utils-webcrypto.js\");\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/crypto/utils.js?");

/***/ }),

/***/ "./node_modules/pg/lib/defaults.js":
/*!*****************************************!*\
  !*** ./node_modules/pg/lib/defaults.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  // name of database to connect\n  database: undefined,\n\n  // database user's password\n  password: null,\n\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n\n  // database port\n  port: 5432,\n\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n\n  client_encoding: '',\n\n  ssl: false,\n\n  application_name: undefined,\n\n  fallback_application_name: undefined,\n\n  options: undefined,\n\n  parseInputDatesAsUTC: false,\n\n  // max milliseconds any query using this connection will execute for before timing out in error.\n  // false=unlimited\n  statement_timeout: false,\n\n  // Abort any statement that waits longer than the specified duration in milliseconds while attempting to acquire a lock.\n  // false=unlimited\n  lock_timeout: false,\n\n  // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n  // false=unlimited\n  idle_in_transaction_session_timeout: false,\n\n  // max milliseconds to wait for query to complete (client side)\n  query_timeout: false,\n\n  connect_timeout: 0,\n\n  keepalives: 1,\n\n  keepalives_idle: 0,\n}\n\nvar pgTypes = __webpack_require__(/*! pg-types */ \"./node_modules/pg-types/index.js\")\n// save default parsers\nvar parseBigInteger = pgTypes.getTypeParser(20, 'text')\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')\n\n// parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger)\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray)\n})\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/defaults.js?");

/***/ }),

/***/ "./node_modules/pg/lib/index.js":
/*!**************************************!*\
  !*** ./node_modules/pg/lib/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Client = __webpack_require__(/*! ./client */ \"./node_modules/pg/lib/client.js\")\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/pg/lib/defaults.js\")\nvar Connection = __webpack_require__(/*! ./connection */ \"./node_modules/pg/lib/connection.js\")\nvar Pool = __webpack_require__(/*! pg-pool */ \"./node_modules/pg-pool/index.js\")\nconst { DatabaseError } = __webpack_require__(/*! pg-protocol */ \"./node_modules/pg-protocol/dist/index.js\")\nconst { escapeIdentifier, escapeLiteral } = __webpack_require__(/*! ./utils */ \"./node_modules/pg/lib/utils.js\")\n\nconst poolFactory = (Client) => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client)\n    }\n  }\n}\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = __webpack_require__(/*! pg-types */ \"./node_modules/pg-types/index.js\")\n  this.DatabaseError = DatabaseError\n  this.escapeIdentifier = escapeIdentifier\n  this.escapeLiteral = escapeLiteral\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(__webpack_require__(/*! ./native */ \"./node_modules/pg/lib/native/index.js\"))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, \"native\", ({\n    configurable: true,\n    enumerable: false,\n    get() {\n      var native = null\n      try {\n        native = new PG(__webpack_require__(/*! ./native */ \"./node_modules/pg/lib/native/index.js\"))\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err\n        }\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, \"native\", ({\n        value: native,\n      }))\n\n      return native\n    },\n  }))\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/index.js?");

/***/ }),

/***/ "./node_modules/pg/lib/native/client.js":
/*!**********************************************!*\
  !*** ./node_modules/pg/lib/native/client.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// eslint-disable-next-line\nvar Native\ntry {\n  // Wrap this `require()` in a try-catch to avoid upstream bundlers from complaining that this might not be available since it is an optional import\n  Native = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'pg-native'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))\n} catch (e) {\n  throw e\n}\nvar TypeOverrides = __webpack_require__(/*! ../type-overrides */ \"./node_modules/pg/lib/type-overrides.js\")\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter)\nvar util = __webpack_require__(/*! util */ \"util\")\nvar ConnectionParameters = __webpack_require__(/*! ../connection-parameters */ \"./node_modules/pg/lib/connection-parameters.js\")\n\nvar NativeQuery = __webpack_require__(/*! ./query */ \"./node_modules/pg/lib/native/query.js\")\n\nvar Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = (this.connectionParameters = new ConnectionParameters(config))\n  if (config.nativeConnectionString) cp.nativeConnectionString = config.nativeConnectionString\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (self.connectionParameters.nativeConnectionString) conString = self.connectionParameters.nativeConnectionString\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      }).catch(err => {\n        Error.captureStackTrace(err);\n        throw err;\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.ref = function () {}\nClient.prototype.unref = function () {}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/native/client.js?");

/***/ }),

/***/ "./node_modules/pg/lib/native/index.js":
/*!*********************************************!*\
  !*** ./node_modules/pg/lib/native/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./client */ \"./node_modules/pg/lib/native/client.js\")\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/native/index.js?");

/***/ }),

/***/ "./node_modules/pg/lib/native/query.js":
/*!*********************************************!*\
  !*** ./node_modules/pg/lib/native/query.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter)\nvar util = __webpack_require__(/*! util */ \"util\")\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/pg/lib/utils.js\")\n\nvar NativeQuery = (module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n  this._emitRowEvents = false\n  this.on(\n    'newListener',\n    function (event) {\n      if (event === 'row') this._emitRowEvents = true\n    }.bind(this)\n  )\n})\n\nutil.inherits(NativeQuery, EventEmitter)\n\nvar errorFieldMap = {\n  /* eslint-disable quote-props */\n  sqlState: 'code',\n  statementPosition: 'position',\n  messagePrimary: 'message',\n  context: 'where',\n  schemaName: 'schema',\n  tableName: 'table',\n  columnName: 'column',\n  dataTypeName: 'dataType',\n  constraintName: 'constraint',\n  sourceFile: 'file',\n  sourceLine: 'line',\n  sourceFunction: 'routine',\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(\n    function (resolve, reject) {\n      this._once('end', resolve)\n      this._once('error', reject)\n    }.bind(this)\n  )\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  var self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach((row) => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      /* eslint-disable no-console */\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied %s (%s)', this.name, this.name.length)\n      console.error('This can cause conflicts and silent errors executing queries')\n      /* eslint-enable no-console */\n    }\n    var values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n        return after(err)\n      }\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = self.text\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    var vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/native/query.js?");

/***/ }),

/***/ "./node_modules/pg/lib/query.js":
/*!**************************************!*\
  !*** ./node_modules/pg/lib/query.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\")\n\nconst Result = __webpack_require__(/*! ./result */ \"./node_modules/pg/lib/result.js\")\nconst utils = __webpack_require__(/*! ./utils */ \"./node_modules/pg/lib/utils.js\")\n\nclass Query extends EventEmitter {\n  constructor(config, values, callback) {\n    super()\n\n    config = utils.normalizeQueryConfig(config, values, callback)\n\n    this.text = config.text\n    this.values = config.values\n    this.rows = config.rows\n    this.types = config.types\n    this.name = config.name\n    this.binary = config.binary\n    // use unique portal name each time\n    this.portal = config.portal || ''\n    this.callback = config.callback\n    this._rowMode = config.rowMode\n    if (process.domain && config.callback) {\n      this.callback = process.domain.bind(config.callback)\n    }\n    this._result = new Result(this._rowMode, this.types)\n\n    // potential for multiple results\n    this._results = this._result\n    this.isPreparedStatement = false\n    this._canceledDueToError = false\n    this._promise = null\n  }\n\n  requiresPreparation() {\n    // named queries must always be prepared\n    if (this.name) {\n      return true\n    }\n    // always prepare if there are max number of rows expected per\n    // portal execution\n    if (this.rows) {\n      return true\n    }\n    // don't prepare empty text queries\n    if (!this.text) {\n      return false\n    }\n    // prepare if there are values\n    if (!this.values) {\n      return false\n    }\n    return this.values.length > 0\n  }\n\n  _checkForMultirow() {\n    // if we already have a result with a command property\n    // then we've already executed one query in a multi-statement simple query\n    // turn our results into an array of results\n    if (this._result.command) {\n      if (!Array.isArray(this._results)) {\n        this._results = [this._result]\n      }\n      this._result = new Result(this._rowMode, this.types)\n      this._results.push(this._result)\n    }\n  }\n\n  // associates row metadata from the supplied\n  // message with this query object\n  // metadata used when parsing row results\n  handleRowDescription(msg) {\n    this._checkForMultirow()\n    this._result.addFields(msg.fields)\n    this._accumulateRows = this.callback || !this.listeners('row').length\n  }\n\n  handleDataRow(msg) {\n    let row\n\n    if (this._canceledDueToError) {\n      return\n    }\n\n    try {\n      row = this._result.parseRow(msg.fields)\n    } catch (err) {\n      this._canceledDueToError = err\n      return\n    }\n\n    this.emit('row', row, this._result)\n    if (this._accumulateRows) {\n      this._result.addRow(row)\n    }\n  }\n\n  handleCommandComplete(msg, connection) {\n    this._checkForMultirow()\n    this._result.addCommandComplete(msg)\n    // need to sync after each command complete of a prepared statement\n    // if we were using a row count which results in multiple calls to _getRows\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  // if a named prepared statement is created with empty query text\n  // the backend will send an emptyQuery message but *not* a command complete message\n  // since we pipeline sync immediately after execute we don't need to do anything here\n  // unless we have rows specified, in which case we did not pipeline the intial sync call\n  handleEmptyQuery(connection) {\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  handleError(err, connection) {\n    // need to sync after error during a prepared statement\n    if (this._canceledDueToError) {\n      err = this._canceledDueToError\n      this._canceledDueToError = false\n    }\n    // if callback supplied do not emit error event as uncaught error\n    // events will bubble up to node process\n    if (this.callback) {\n      return this.callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  handleReadyForQuery(con) {\n    if (this._canceledDueToError) {\n      return this.handleError(this._canceledDueToError, con)\n    }\n    if (this.callback) {\n      try {\n        this.callback(null, this._results)\n      }\n      catch(err) {\n        process.nextTick(() => {\n          throw err\n        })\n      }\n    }\n    this.emit('end', this._results)\n  }\n\n  submit(connection) {\n    if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n      return new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    }\n    const previous = connection.parsedStatements[this.name]\n    if (this.text && previous && this.text !== previous) {\n      return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n    }\n    if (this.values && !Array.isArray(this.values)) {\n      return new Error('Query values must be an array')\n    }\n    if (this.requiresPreparation()) {\n      this.prepare(connection)\n    } else {\n      connection.query(this.text)\n    }\n    return null\n  }\n\n  hasBeenParsed(connection) {\n    return this.name && connection.parsedStatements[this.name]\n  }\n\n  handlePortalSuspended(connection) {\n    this._getRows(connection, this.rows)\n  }\n\n  _getRows(connection, rows) {\n    connection.execute({\n      portal: this.portal,\n      rows: rows,\n    })\n    // if we're not reading pages of rows send the sync command\n    // to indicate the pipeline is finished\n    if (!rows) {\n      connection.sync()\n    } else {\n      // otherwise flush the call out to read more rows\n      connection.flush()\n    }\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  prepare(connection) {\n    // prepared statements need sync to be called after each command\n    // complete or when an error is encountered\n    this.isPreparedStatement = true\n\n    // TODO refactor this poor encapsulation\n    if (!this.hasBeenParsed(connection)) {\n      connection.parse({\n        text: this.text,\n        name: this.name,\n        types: this.types,\n      })\n    }\n\n    // because we're mapping user supplied values to\n    // postgres wire protocol compatible values it could\n    // throw an exception, so try/catch this section\n    try {\n      connection.bind({\n        portal: this.portal,\n        statement: this.name,\n        values: this.values,\n        binary: this.binary,\n        valueMapper: utils.prepareValue,\n      })\n    } catch (err) {\n      this.handleError(err, connection)\n      return\n    }\n\n    connection.describe({\n      type: 'P',\n      name: this.portal || '',\n    })\n\n    this._getRows(connection, this.rows)\n  }\n\n  handleCopyInResponse(connection) {\n    connection.sendCopyFail('No source stream defined')\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  handleCopyData(msg, connection) {\n    // noop\n  }\n}\n\nmodule.exports = Query\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/query.js?");

/***/ }),

/***/ "./node_modules/pg/lib/result.js":
/*!***************************************!*\
  !*** ./node_modules/pg/lib/result.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar types = __webpack_require__(/*! pg-types */ \"./node_modules/pg-types/index.js\")\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n    this._prebuiltEmptyResultObject = null\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length)\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    var row = { ... this._prebuiltEmptyResultObject }\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      var field = this.fields[i].name\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue)\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i]\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n    this._createPrebuiltEmptyResultObject()\n  }\n  _createPrebuiltEmptyResultObject() {\n    var row = {}\n    for (var i = 0; i < this.fields.length; i++) {\n      row[this.fields[i].name] = null\n    }\n    this._prebuiltEmptyResultObject = { ... row }\n  }\n}\n\nmodule.exports = Result\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/result.js?");

/***/ }),

/***/ "./node_modules/pg/lib/stream.js":
/*!***************************************!*\
  !*** ./node_modules/pg/lib/stream.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Get a socket stream compatible with the current runtime environment.\n * @returns {Duplex}\n */\nmodule.exports.getStream = function getStream(ssl) {\n  const net = __webpack_require__(/*! net */ \"net\")\n  if (typeof net.Socket === 'function') {\n    return new net.Socket()\n  } else {\n    const { CloudflareSocket } = __webpack_require__(/*! pg-cloudflare */ \"./node_modules/pg-cloudflare/dist/empty.js\")\n    return new CloudflareSocket(ssl)\n  }\n}\n\n/**\n * Get a TLS secured socket, compatible with the current environment,\n * using the socket and other settings given in `options`.\n * @returns {Duplex}\n */\nmodule.exports.getSecureStream = function getSecureStream(options) {\n  var tls = __webpack_require__(/*! tls */ \"tls\")\n  if (tls.connect) {\n    return tls.connect(options)\n  } else {\n    options.socket.startTls(options)\n    return options.socket\n  }\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/stream.js?");

/***/ }),

/***/ "./node_modules/pg/lib/type-overrides.js":
/*!***********************************************!*\
  !*** ./node_modules/pg/lib/type-overrides.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar types = __webpack_require__(/*! pg-types */ \"./node_modules/pg-types/index.js\")\n\nfunction TypeOverrides(userTypes) {\n  this._types = userTypes || types\n  this.text = {}\n  this.binary = {}\n}\n\nTypeOverrides.prototype.getOverrides = function (format) {\n  switch (format) {\n    case 'text':\n      return this.text\n    case 'binary':\n      return this.binary\n    default:\n      return {}\n  }\n}\n\nTypeOverrides.prototype.setTypeParser = function (oid, format, parseFn) {\n  if (typeof format === 'function') {\n    parseFn = format\n    format = 'text'\n  }\n  this.getOverrides(format)[oid] = parseFn\n}\n\nTypeOverrides.prototype.getTypeParser = function (oid, format) {\n  format = format || 'text'\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format)\n}\n\nmodule.exports = TypeOverrides\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/type-overrides.js?");

/***/ }),

/***/ "./node_modules/pg/lib/utils.js":
/*!**************************************!*\
  !*** ./node_modules/pg/lib/utils.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/pg/lib/defaults.js\")\n\nfunction escapeElement(elementRepresentation) {\n  var escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\n\n  return '\"' + escaped + '\"'\n}\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n  var result = '{'\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i])\n    } else if (val[i] instanceof Buffer) {\n      result += '\\\\\\\\x' + val[i].toString('hex')\n    } else {\n      result += escapeElement(prepareValue(val[i]))\n    }\n  }\n  result = result + '}'\n  return result\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function (val, seen) {\n  // null and undefined are both null for postgres\n  if (val == null) {\n    return null\n  }\n  if (val instanceof Buffer) {\n    return val\n  }\n  if (ArrayBuffer.isView(val)) {\n    var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)\n    if (buf.length === val.byteLength) {\n      return buf\n    }\n    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n  }\n  if (val instanceof Date) {\n    if (defaults.parseInputDatesAsUTC) {\n      return dateToStringUTC(val)\n    } else {\n      return dateToString(val)\n    }\n  }\n  if (Array.isArray(val)) {\n    return arrayString(val)\n  }\n  if (typeof val === 'object') {\n    return prepareObject(val, seen)\n  }\n  return val.toString()\n}\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return JSON.stringify(val)\n}\n\nfunction pad(number, digits) {\n  number = '' + number\n  while (number.length < digits) {\n    number = '0' + number\n  }\n  return number\n}\n\nfunction dateToString(date) {\n  var offset = -date.getTimezoneOffset()\n\n  var year = date.getFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    pad(year, 4) +\n    '-' +\n    pad(date.getMonth() + 1, 2) +\n    '-' +\n    pad(date.getDate(), 2) +\n    'T' +\n    pad(date.getHours(), 2) +\n    ':' +\n    pad(date.getMinutes(), 2) +\n    ':' +\n    pad(date.getSeconds(), 2) +\n    '.' +\n    pad(date.getMilliseconds(), 3)\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else {\n    ret += '+'\n  }\n\n  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2)\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC(date) {\n  var year = date.getUTCFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    pad(year, 4) +\n    '-' +\n    pad(date.getUTCMonth() + 1, 2) +\n    '-' +\n    pad(date.getUTCDate(), 2) +\n    'T' +\n    pad(date.getUTCHours(), 2) +\n    ':' +\n    pad(date.getUTCMinutes(), 2) +\n    ':' +\n    pad(date.getUTCSeconds(), 2) +\n    '.' +\n    pad(date.getUTCMilliseconds(), 3)\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nconst escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n}\n\nconst escapeLiteral = function (str) {\n  var hasBackslash = false\n  var escaped = \"'\"\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i]\n    if (c === \"'\") {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += \"'\"\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value)\n  },\n  normalizeQueryConfig,\n  escapeIdentifier,\n  escapeLiteral,\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg/lib/utils.js?");

/***/ }),

/***/ "./node_modules/pgpass/lib/helper.js":
/*!*******************************************!*\
  !*** ./node_modules/pgpass/lib/helper.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar path = __webpack_require__(/*! path */ \"path\")\n  , Stream = (__webpack_require__(/*! stream */ \"stream\").Stream)\n  , split = __webpack_require__(/*! split2 */ \"./node_modules/split2/index.js\")\n  , util = __webpack_require__(/*! util */ \"util\")\n  , defaultPort = 5432\n  , isWin = (process.platform === 'win32')\n  , warnStream = process.stderr\n;\n\n\nvar S_IRWXG = 56     //    00070(8)\n  , S_IRWXO = 7      //    00007(8)\n  , S_IFMT  = 61440  // 00170000(8)\n  , S_IFREG = 32768  //  0100000(8)\n;\nfunction isRegFile(mode) {\n    return ((mode & S_IFMT) == S_IFREG);\n}\n\nvar fieldNames = [ 'host', 'port', 'database', 'user', 'password' ];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[ nrOfFields -1 ];\n\n\nfunction warn() {\n    var isWritable = (\n        warnStream instanceof Stream &&\n          true === warnStream.writable\n    );\n\n    if (isWritable) {\n        var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n        warnStream.write( util.format.apply(util, args) );\n    }\n}\n\n\nObject.defineProperty(module.exports, \"isWin\", ({\n    get : function() {\n        return isWin;\n    } ,\n    set : function(val) {\n        isWin = val;\n    }\n}));\n\n\nmodule.exports.warnTo = function(stream) {\n    var old = warnStream;\n    warnStream = stream;\n    return old;\n};\n\nmodule.exports.getFileName = function(rawEnv){\n    var env = rawEnv || process.env;\n    var file = env.PGPASSFILE || (\n        isWin ?\n          path.join( env.APPDATA || './' , 'postgresql', 'pgpass.conf' ) :\n          path.join( env.HOME || './', '.pgpass' )\n    );\n    return file;\n};\n\nmodule.exports.usePgPass = function(stats, fname) {\n    if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {\n        return false;\n    }\n\n    if (isWin) {\n        return true;\n    }\n\n    fname = fname || '<unkn>';\n\n    if (! isRegFile(stats.mode)) {\n        warn('WARNING: password file \"%s\" is not a plain file', fname);\n        return false;\n    }\n\n    if (stats.mode & (S_IRWXG | S_IRWXO)) {\n        /* If password file is insecure, alert the user and ignore it. */\n        warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n        return false;\n    }\n\n    return true;\n};\n\n\nvar matcher = module.exports.match = function(connInfo, entry) {\n    return fieldNames.slice(0, -1).reduce(function(prev, field, idx){\n        if (idx == 1) {\n            // the port\n            if ( Number( connInfo[field] || defaultPort ) === Number( entry[field] ) ) {\n                return prev && true;\n            }\n        }\n        return prev && (\n            entry[field] === '*' ||\n              entry[field] === connInfo[field]\n        );\n    }, true);\n};\n\n\nmodule.exports.getPassword = function(connInfo, stream, cb) {\n    var pass;\n    var lineStream = stream.pipe(split());\n\n    function onLine(line) {\n        var entry = parseLine(line);\n        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n            pass = entry[passKey];\n            lineStream.end(); // -> calls onEnd(), but pass is set now\n        }\n    }\n\n    var onEnd = function() {\n        stream.destroy();\n        cb(pass);\n    };\n\n    var onErr = function(err) {\n        stream.destroy();\n        warn('WARNING: error on reading file: %s', err);\n        cb(undefined);\n    };\n\n    stream.on('error', onErr);\n    lineStream\n        .on('data', onLine)\n        .on('end', onEnd)\n        .on('error', onErr)\n    ;\n\n};\n\n\nvar parseLine = module.exports.parseLine = function(line) {\n    if (line.length < 11 || line.match(/^\\s+#/)) {\n        return null;\n    }\n\n    var curChar = '';\n    var prevChar = '';\n    var fieldIdx = 0;\n    var startIdx = 0;\n    var endIdx = 0;\n    var obj = {};\n    var isLastField = false;\n    var addToObj = function(idx, i0, i1) {\n        var field = line.substring(i0, i1);\n\n        if (! Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {\n            field = field.replace(/\\\\([:\\\\])/g, '$1');\n        }\n\n        obj[ fieldNames[idx] ] = field;\n    };\n\n    for (var i = 0 ; i < line.length-1 ; i += 1) {\n        curChar = line.charAt(i+1);\n        prevChar = line.charAt(i);\n\n        isLastField = (fieldIdx == nrOfFields-1);\n\n        if (isLastField) {\n            addToObj(fieldIdx, startIdx);\n            break;\n        }\n\n        if (i >= 0 && curChar == ':' && prevChar !== '\\\\') {\n            addToObj(fieldIdx, startIdx, i+1);\n\n            startIdx = i+2;\n            fieldIdx += 1;\n        }\n    }\n\n    obj = ( Object.keys(obj).length === nrOfFields ) ? obj : null;\n\n    return obj;\n};\n\n\nvar isValidEntry = module.exports.isValidEntry = function(entry){\n    var rules = {\n        // host\n        0 : function(x){\n            return x.length > 0;\n        } ,\n        // port\n        1 : function(x){\n            if (x === '*') {\n                return true;\n            }\n            x = Number(x);\n            return (\n                isFinite(x) &&\n                  x > 0 &&\n                  x < 9007199254740992 &&\n                  Math.floor(x) === x\n            );\n        } ,\n        // database\n        2 : function(x){\n            return x.length > 0;\n        } ,\n        // username\n        3 : function(x){\n            return x.length > 0;\n        } ,\n        // password\n        4 : function(x){\n            return x.length > 0;\n        }\n    };\n\n    for (var idx = 0 ; idx < fieldNames.length ; idx += 1) {\n        var rule = rules[idx];\n        var value = entry[ fieldNames[idx] ] || '';\n\n        var res = rule(value);\n        if (!res) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pgpass/lib/helper.js?");

/***/ }),

/***/ "./node_modules/pgpass/lib/index.js":
/*!******************************************!*\
  !*** ./node_modules/pgpass/lib/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar path = __webpack_require__(/*! path */ \"path\")\n  , fs = __webpack_require__(/*! fs */ \"fs\")\n  , helper = __webpack_require__(/*! ./helper.js */ \"./node_modules/pgpass/lib/helper.js\")\n;\n\n\nmodule.exports = function(connInfo, cb) {\n    var file = helper.getFileName();\n    \n    fs.stat(file, function(err, stat){\n        if (err || !helper.usePgPass(stat, file)) {\n            return cb(undefined);\n        }\n\n        var st = fs.createReadStream(file);\n\n        helper.getPassword(connInfo, st, cb);\n    });\n};\n\nmodule.exports.warnTo = helper.warnTo;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pgpass/lib/index.js?");

/***/ }),

/***/ "./node_modules/postgres-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/postgres-array/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse()\n}\n\nclass ArrayParser {\n  constructor (source, transform) {\n    this.source = source\n    this.transform = transform || identity\n    this.position = 0\n    this.entries = []\n    this.recorded = []\n    this.dimension = 0\n  }\n\n  isEof () {\n    return this.position >= this.source.length\n  }\n\n  nextCharacter () {\n    var character = this.source[this.position++]\n    if (character === '\\\\') {\n      return {\n        value: this.source[this.position++],\n        escaped: true\n      }\n    }\n    return {\n      value: character,\n      escaped: false\n    }\n  }\n\n  record (character) {\n    this.recorded.push(character)\n  }\n\n  newEntry (includeEmpty) {\n    var entry\n    if (this.recorded.length > 0 || includeEmpty) {\n      entry = this.recorded.join('')\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null\n      }\n      if (entry !== null) entry = this.transform(entry)\n      this.entries.push(entry)\n      this.recorded = []\n    }\n  }\n\n  consumeDimensions () {\n    if (this.source[0] === '[') {\n      while (!this.isEof()) {\n        var char = this.nextCharacter()\n        if (char.value === '=') break\n      }\n    }\n  }\n\n  parse (nested) {\n    var character, parser, quote\n    this.consumeDimensions()\n    while (!this.isEof()) {\n      character = this.nextCharacter()\n      if (character.value === '{' && !quote) {\n        this.dimension++\n        if (this.dimension > 1) {\n          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)\n          this.entries.push(parser.parse(true))\n          this.position += parser.position - 2\n        }\n      } else if (character.value === '}' && !quote) {\n        this.dimension--\n        if (!this.dimension) {\n          this.newEntry()\n          if (nested) return this.entries\n        }\n      } else if (character.value === '\"' && !character.escaped) {\n        if (quote) this.newEntry(true)\n        quote = !quote\n      } else if (character.value === ',' && !quote) {\n        this.newEntry()\n      } else {\n        this.record(character.value)\n      }\n    }\n    if (this.dimension !== 0) {\n      throw new Error('array dimension not balanced')\n    }\n    return this.entries\n  }\n}\n\nfunction identity (value) {\n  return value\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/postgres-array/index.js?");

/***/ }),

/***/ "./node_modules/postgres-bytea/index.js":
/*!**********************************************!*\
  !*** ./node_modules/postgres-bytea/index.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function parseBytea (input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex')\n  }\n  var output = ''\n  var i = 0\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i]\n      ++i\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))\n        i += 4\n      } else {\n        var backslashes = 1\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++\n        }\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\'\n        }\n        i += Math.floor(backslashes / 2) * 2\n      }\n    }\n  }\n  return new Buffer(output, 'binary')\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/postgres-bytea/index.js?");

/***/ }),

/***/ "./node_modules/postgres-date/index.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres-date/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/postgres-date/index.js?");

/***/ }),

/***/ "./node_modules/postgres-interval/index.js":
/*!*************************************************!*\
  !*** ./node_modules/postgres-interval/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar extend = __webpack_require__(/*! xtend/mutable */ \"./node_modules/xtend/mutable.js\")\n\nmodule.exports = PostgresInterval\n\nfunction PostgresInterval (raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw)\n  }\n  extend(this, parse(raw))\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this)\n\n  // In addition to `properties`, we need to account for fractions of seconds.\n  if (this.milliseconds && filtered.indexOf('seconds') < 0) {\n    filtered.push('seconds')\n  }\n\n  if (filtered.length === 0) return '0'\n  return filtered\n    .map(function (property) {\n      var value = this[property] || 0\n\n      // Account for fractional part of seconds,\n      // remove trailing zeroes.\n      if (property === 'seconds' && this.milliseconds) {\n        value = (value + this.milliseconds / 1000).toFixed(6).replace(/\\.?0+$/, '')\n      }\n\n      return value + ' ' + property\n    }, this)\n    .join(' ')\n}\n\nvar propertiesISOEquivalent = {\n  years: 'Y',\n  months: 'M',\n  days: 'D',\n  hours: 'H',\n  minutes: 'M',\n  seconds: 'S'\n}\nvar dateProperties = ['years', 'months', 'days']\nvar timeProperties = ['hours', 'minutes', 'seconds']\n// according to ISO 8601\nPostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function () {\n  var datePart = dateProperties\n    .map(buildProperty, this)\n    .join('')\n\n  var timePart = timeProperties\n    .map(buildProperty, this)\n    .join('')\n\n  return 'P' + datePart + 'T' + timePart\n\n  function buildProperty (property) {\n    var value = this[property] || 0\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, '')\n    }\n\n    return value + propertiesISOEquivalent[property]\n  }\n}\n\nvar NUMBER = '([+-]?\\\\d+)'\nvar YEAR = NUMBER + '\\\\s+years?'\nvar MONTH = NUMBER + '\\\\s+mons?'\nvar DAY = NUMBER + '\\\\s+days?'\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?'\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?'\n})\n  .join('\\\\s*'))\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n}\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds', 'milliseconds']\n\nfunction parseMilliseconds (fraction) {\n  // add omitted zeroes\n  var microseconds = fraction + '000000'.slice(fraction.length)\n  return parseInt(microseconds, 10) / 1000\n}\n\nfunction parse (interval) {\n  if (!interval) return {}\n  var matches = INTERVAL.exec(interval)\n  var isNegative = matches[8] === '-'\n  return Object.keys(positions)\n    .reduce(function (parsed, property) {\n      var position = positions[property]\n      var value = matches[position]\n      // no empty string\n      if (!value) return parsed\n      // milliseconds are actually microseconds (up to 6 digits)\n      // with omitted trailing zeroes.\n      value = property === 'milliseconds'\n        ? parseMilliseconds(value)\n        : parseInt(value, 10)\n      // no zeros\n      if (!value) return parsed\n      if (isNegative && ~negatives.indexOf(property)) {\n        value *= -1\n      }\n      parsed[property] = value\n      return parsed\n    }, {})\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/postgres-interval/index.js?");

/***/ }),

/***/ "./node_modules/safe-compare/index.js":
/*!********************************************!*\
  !*** ./node_modules/safe-compare/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * @author Michael Raith\n * @date   24.02.2016 12:04\n */\n\n\n\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar bufferAlloc = __webpack_require__(/*! buffer-alloc */ \"./node_modules/buffer-alloc/index.js\");\n\n\n/**\n * Do a constant time string comparison. Always compare the complete strings\n * against each other to get a constant time. This method does not short-cut\n * if the two string's length differs.\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar safeCompare = function safeCompare(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var lenA = strA.length;\n    var result = 0;\n\n    if (lenA !== strB.length) {\n        strB = strA;\n        result = 1;\n    }\n\n    for (var i = 0; i < lenA; i++) {\n        result |= (strA.charCodeAt(i) ^ strB.charCodeAt(i));\n    }\n\n    return result === 0;\n};\n\n\n/**\n * Call native \"crypto.timingSafeEqual\" methods.\n * All passed values will be converted into strings first.\n *\n * Runtime is always corresponding to the length of the first parameter (string\n * a).\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar nativeTimingSafeEqual = function nativeTimingSafeEqual(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var aLen = Buffer.byteLength(strA);\n    var bLen = Buffer.byteLength(strB);\n\n    // Always use length of a to avoid leaking the length. Even if this is a\n    // false positive because one is a prefix of the other, the explicit length\n    // check at the end will catch that.\n    var bufA = bufferAlloc(aLen, 0, 'utf8');\n    bufA.write(strA);\n    var bufB = bufferAlloc(aLen, 0, 'utf8');\n    bufB.write(strB);\n\n    return crypto.timingSafeEqual(bufA, bufB) && aLen === bLen;\n};\n\n\nmodule.exports = (\n    typeof crypto.timingSafeEqual !== 'undefined' ?\n        nativeTimingSafeEqual :\n        safeCompare\n);\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/safe-compare/index.js?");

/***/ }),

/***/ "./node_modules/spex/lib/adapter.js":
/*!******************************************!*\
  !*** ./node_modules/spex/lib/adapter.js ***!
  \******************************************/
/***/ ((module) => {

eval("/**\r\n * @class PromiseAdapter\r\n * @description\r\n * Adapter for the primary promise operations.\r\n *\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * #### Example\r\n *\r\n * Below is an example of setting up a [client-side]{@tutorial client} adapter for AngularJS $q.\r\n *\r\n * ```js\r\n * const spexLib = require('spex'); // or include client-side spex.js\r\n *\r\n * const adapter = new spexLib.PromiseAdapter(\r\n *    cb => $q(cb), // creating a new promise;\r\n *    data => $q.when(data), // resolving a promise;\r\n *    reason => $q.reject(reason) // rejecting a promise;\r\n *    );\r\n *\r\n * const spex = spexLib(adapter);\r\n * ```\r\n *\r\n * @param {Function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {Function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {Function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @see {@tutorial client}\r\n *\r\n */\r\nclass PromiseAdapter {\r\n    constructor(create, resolve, reject) {\r\n        this.create = create;\r\n        this.resolve = resolve;\r\n        this.reject = reject;\r\n\r\n        if (typeof create !== 'function') {\r\n            throw new TypeError('Adapter requires a function to create a promise.');\r\n        }\r\n\r\n        if (typeof resolve !== 'function') {\r\n            throw new TypeError('Adapter requires a function to resolve a promise.');\r\n        }\r\n\r\n        if (typeof reject !== 'function') {\r\n            throw new TypeError('Adapter requires a function to reject a promise.');\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = PromiseAdapter;\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/adapter.js?");

/***/ }),

/***/ "./node_modules/spex/lib/errors/batch.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/errors/batch.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    u: __webpack_require__(/*! util */ \"util\"),\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils/static */ \"./node_modules/spex/lib/utils/static.js\")\r\n};\r\n\r\n/**\r\n * @class errors.BatchError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link batch}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `BatchError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * It represents the message of the first error encountered in the batch, and is a safe\r\n * version of using `first.message`.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {array} data\r\n * Array of objects `{success, result, [origin]}`:\r\n * - `success` = true/false, indicates whether the corresponding value in the input array was resolved.\r\n * - `result` = resolved data, if `success`=`true`, or else the rejection reason.\r\n * - `origin` - set only when failed as a result of an unsuccessful call into the notification callback\r\n *    (parameter `cb` of method {@link batch})\r\n *\r\n * The array has the same size as the input one that was passed into method {@link batch}, providing direct mapping.\r\n *\r\n * @property {} stat\r\n * Resolution Statistics.\r\n *\r\n * @property {number} stat.total\r\n * Total number of elements in the batch.\r\n *\r\n * @property {number} stat.succeeded\r\n * Number of resolved values in the batch.\r\n *\r\n * @property {number} stat.failed\r\n * Number of rejected values in the batch.\r\n *\r\n * @property {number} stat.duration\r\n * Time in milliseconds it took to settle all values.\r\n *\r\n * @property {} first\r\n * The very first error within the batch, with support for nested batch results, it is also the same error\r\n * as $[promise.all] would provide.\r\n *\r\n * @see {@link batch}\r\n *\r\n */\r\nclass BatchError extends Error {\r\n\r\n    constructor(result, errors, duration) {\r\n\r\n        function getErrors() {\r\n            const err = new Array(errors.length);\r\n            for (let i = 0; i < errors.length; i++) {\r\n                err[i] = result[errors[i]].result;\r\n                if (err[i] instanceof BatchError) {\r\n                    err[i] = err[i].getErrors();\r\n                }\r\n            }\r\n            npm.utils.extend(err, '$isErrorList', true);\r\n            return err;\r\n        }\r\n\r\n        const e = getErrors();\r\n\r\n        let first = e[0];\r\n\r\n        while (first && first.$isErrorList) {\r\n            first = first[0];\r\n        }\r\n\r\n        let message;\r\n\r\n        if (first instanceof Error) {\r\n            message = first.message;\r\n        } else {\r\n            if (typeof first !== 'string') {\r\n                first = npm.u.inspect(first);\r\n            }\r\n            message = first;\r\n        }\r\n\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n\r\n        this.data = result;\r\n\r\n        // we do not show it within the inspect, because when the error\r\n        // happens for a nested result, the output becomes a mess.\r\n        this.first = first;\r\n\r\n        this.stat = {\r\n            total: result.length,\r\n            succeeded: result.length - e.length,\r\n            failed: e.length,\r\n            duration: duration\r\n        };\r\n\r\n        this.getErrors = getErrors;\r\n\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n\r\n    /**\r\n     * @method errors.BatchError.getErrors\r\n     * @description\r\n     * Returns the complete list of errors only.\r\n     *\r\n     * It supports nested batch results, presented as a sub-array.\r\n     *\r\n     * @returns {array}\r\n     */\r\n}\r\n\r\n/**\r\n * @method errors.BatchError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * The output is an abbreviated version of the error, because the complete error\r\n * is often too much for displaying or even logging, as a batch can be of any size.\r\n * Therefore, only errors are rendered from the `data` property, alongside their indexes,\r\n * and only up to the first 5, to avoid polluting the screen or the log file.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nBatchError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        gap2 = npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'BatchError {',\r\n            gap1 + 'stat: { total: ' + this.stat.total + ', succeeded: ' + this.stat.succeeded +\r\n            ', failed: ' + this.stat.failed + ', duration: ' + this.stat.duration + ' }',\r\n            gap1 + 'errors: ['\r\n        ];\r\n\r\n    // In order to avoid polluting the error log or the console, \r\n    // we limit the log output to the top 5 errors:\r\n    const maxErrors = 5;\r\n    let counter = 0;\r\n    this.data.forEach((d, index) => {\r\n        if (!d.success && counter < maxErrors) {\r\n            lines.push(gap2 + index + ': ' + npm.utils.formatError(d.result, level + 2));\r\n            counter++;\r\n        }\r\n    });\r\n    lines.push(gap1 + ']');\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(BatchError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {BatchError};\r\n\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/errors/batch.js?");

/***/ }),

/***/ "./node_modules/spex/lib/errors/index.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/errors/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {BatchError} = __webpack_require__(/*! ./batch */ \"./node_modules/spex/lib/errors/batch.js\");\r\nconst {PageError} = __webpack_require__(/*! ./page */ \"./node_modules/spex/lib/errors/page.js\");\r\nconst {SequenceError} = __webpack_require__(/*! ./sequence */ \"./node_modules/spex/lib/errors/sequence.js\");\r\n\r\n\r\n/**\r\n * @namespace errors\r\n * @description\r\n * Namespace for all custom error types supported by the library.\r\n *\r\n * In addition to the custom error type used by each method (regular error), they can also reject with\r\n * {@link external:TypeError TypeError} when receiving invalid input parameters.\r\n *\r\n * @property {function} BatchError\r\n * {@link errors.BatchError BatchError} class.\r\n *\r\n * Represents regular errors that can be reported by method {@link batch}.\r\n *\r\n * @property {function} PageError\r\n * {@link errors.PageError PageError} class.\r\n *\r\n * Represents regular errors that can be reported by method {@link page}.\r\n *\r\n * @property {function} SequenceError\r\n * {@link errors.SequenceError SequenceError} class.\r\n *\r\n * Represents regular errors that can be reported by method {@link sequence}.\r\n *\r\n */\r\nmodule.exports = {\r\n    BatchError,\r\n    PageError,\r\n    SequenceError\r\n};\r\n\r\nObject.freeze(module.exports);\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/errors/index.js?");

/***/ }),

/***/ "./node_modules/spex/lib/errors/page.js":
/*!**********************************************!*\
  !*** ./node_modules/spex/lib/errors/page.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    u: __webpack_require__(/*! util */ \"util\"),\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils/static */ \"./node_modules/spex/lib/utils/static.js\")\r\n};\r\n\r\nconst errorReasons = {\r\n    0: 'Page with index %d rejected.',\r\n    1: 'Source %s returned a rejection at index %d.',\r\n    2: 'Source %s threw an error at index %d.',\r\n    3: 'Destination %s returned a rejection at index %d.',\r\n    4: 'Destination %s threw an error at index %d.',\r\n    5: 'Source %s returned a non-array value at index %d.'\r\n};\r\n\r\n/**\r\n * @class errors.PageError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link page}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PageError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown, or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see\r\n * {@link page},\r\n * {@link batch}\r\n *\r\n */\r\nclass PageError extends Error {\r\n\r\n    constructor(e, code, cbName, duration) {\r\n\r\n        let message;\r\n        if (e.error instanceof Error) {\r\n            message = e.error.message;\r\n        } else {\r\n            message = e.error;\r\n            if (typeof message !== 'string') {\r\n                message = npm.u.inspect(message);\r\n            }\r\n        }\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n\r\n        this.index = e.index;\r\n        this.duration = duration;\r\n        this.error = e.error;\r\n\r\n        if ('source' in e) {\r\n            this.source = e.source;\r\n        }\r\n\r\n        if ('dest' in e) {\r\n            this.dest = e.dest;\r\n        }\r\n\r\n        if (code) {\r\n            cbName = cbName ? ('\\'' + cbName + '\\'') : '<anonymous>';\r\n            this.reason = npm.u.format(errorReasons[code], cbName, e.index);\r\n        } else {\r\n            this.reason = npm.u.format(errorReasons[code], e.index);\r\n        }\r\n\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @method errors.PageError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPageError.prototype.toString = function (level) {\r\n\r\n    level = level > 0 ? parseInt(level) : 0;\r\n\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'PageError {',\r\n            gap1 + 'message: ' + JSON.stringify(this.message),\r\n            gap1 + 'reason: ' + this.reason,\r\n            gap1 + 'index: ' + this.index,\r\n            gap1 + 'duration: ' + this.duration\r\n        ];\r\n\r\n    lines.push(gap1 + 'error: ' + npm.utils.formatError(this.error, level + 1));\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(PageError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {PageError};\r\n\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/errors/page.js?");

/***/ }),

/***/ "./node_modules/spex/lib/errors/sequence.js":
/*!**************************************************!*\
  !*** ./node_modules/spex/lib/errors/sequence.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    u: __webpack_require__(/*! util */ \"util\"),\r\n    os: __webpack_require__(/*! os */ \"os\"),\r\n    utils: __webpack_require__(/*! ../utils/static */ \"./node_modules/spex/lib/utils/static.js\")\r\n};\r\n\r\nconst errorReasons = {\r\n    0: 'Source %s returned a rejection at index %d.',\r\n    1: 'Source %s threw an error at index %d.',\r\n    2: 'Destination %s returned a rejection at index %d.',\r\n    3: 'Destination %s threw an error at index %d.'\r\n};\r\n\r\n/**\r\n * @class errors.SequenceError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link sequence}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `SequenceError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see {@link sequence}\r\n *\r\n */\r\nclass SequenceError extends Error {\r\n\r\n    constructor(e, code, cbName, duration) {\r\n\r\n        let message;\r\n        if (e.error instanceof Error) {\r\n            message = e.error.message;\r\n        } else {\r\n            message = e.error;\r\n            if (typeof message !== 'string') {\r\n                message = npm.u.inspect(message);\r\n            }\r\n        }\r\n\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n\r\n        this.index = e.index;\r\n        this.duration = duration;\r\n        this.error = e.error;\r\n\r\n        if ('source' in e) {\r\n            this.source = e.source;\r\n        } else {\r\n            this.dest = e.dest;\r\n        }\r\n\r\n        cbName = cbName ? ('\\'' + cbName + '\\'') : '<anonymous>';\r\n        this.reason = npm.u.format(errorReasons[code], cbName, e.index);\r\n\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.SequenceError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nSequenceError.prototype.toString = function (level) {\r\n\r\n    level = level > 0 ? parseInt(level) : 0;\r\n\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'SequenceError {',\r\n            gap1 + 'message: ' + JSON.stringify(this.message),\r\n            gap1 + 'reason: ' + this.reason,\r\n            gap1 + 'index: ' + this.index,\r\n            gap1 + 'duration: ' + this.duration\r\n        ];\r\n\r\n    lines.push(gap1 + 'error: ' + npm.utils.formatError(this.error, level + 1));\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(SequenceError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {SequenceError};\r\n\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/errors/sequence.js?");

/***/ }),

/***/ "./node_modules/spex/lib/ext/batch.js":
/*!********************************************!*\
  !*** ./node_modules/spex/lib/ext/batch.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {BatchError} = __webpack_require__(/*! ../errors/batch */ \"./node_modules/spex/lib/errors/batch.js\");\r\n\r\n/**\r\n * @method batch\r\n * @description\r\n * Settles (resolves or rejects) every [mixed value]{@tutorial mixed} in the input array.\r\n *\r\n * The method resolves with an array of results, the same as the standard $[promise.all],\r\n * while providing comprehensive error details in case of a reject, in the form of\r\n * type {@link errors.BatchError BatchError}.\r\n *\r\n * @param {Array} values\r\n * Array of [mixed values]{@tutorial mixed} (it can be empty), to be resolved asynchronously, in no particular order.\r\n *\r\n * Passing in anything other than an array will reject with {@link external:TypeError TypeError} =\r\n * `Method 'batch' requires an array of values.`\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Function|generator} [options.cb]\r\n * Optional callback (or generator) to receive the result for each settled value.\r\n *\r\n * Callback Parameters:\r\n *  - `index` = index of the value in the source array\r\n *  - `success` - indicates whether the value was resolved (`true`), or rejected (`false`)\r\n *  - `result` = resolved data, if `success`=`true`, or else the rejection reason\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise to indicate that notifications are handled asynchronously.\r\n * And if the returned promise resolves, it signals a successful handling, while any resolved\r\n * data is ignored.\r\n *\r\n * If the function returns a rejected promise or throws an error, the entire method rejects\r\n * with {@link errors.BatchError BatchError} where the corresponding value in property `data`\r\n * is set to `{success, result, origin}`:\r\n *  - `success` = `false`\r\n *  - `result` = the rejection reason or the error thrown by the notification callback\r\n *  - `origin` = the original data passed into the callback as object `{success, result}`\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * The method resolves with an array of individual resolved results, the same as the standard $[promise.all].\r\n * In addition, the array is extended with a hidden read-only property `duration` - number of milliseconds\r\n * spent resolving all the data.\r\n *\r\n * The method rejects with {@link errors.BatchError BatchError} when any of the following occurs:\r\n *  - one or more values rejected or threw an error while being resolved as a [mixed value]{@tutorial mixed}\r\n *  - notification callback `cb` returned a rejected promise or threw an error\r\n *\r\n */\r\nfunction batch(values, options, config) {\r\n\r\n    const $p = config.promise, utils = config.utils;\r\n\r\n    if (!Array.isArray(values)) {\r\n        return $p.reject(new TypeError('Method \\'batch\\' requires an array of values.'));\r\n    }\r\n\r\n    if (!values.length) {\r\n        const empty = [];\r\n        utils.extend(empty, 'duration', 0);\r\n        return $p.resolve(empty);\r\n    }\r\n\r\n    options = options || {};\r\n\r\n    const cb = utils.wrap(options.cb),\r\n        self = this, start = Date.now();\r\n\r\n    return $p((resolve, reject) => {\r\n        let cbTime, remaining = values.length;\r\n        const errors = [], result = new Array(remaining);\r\n        values.forEach((item, i) => {\r\n            utils.resolve.call(self, item, null, data => {\r\n                result[i] = data;\r\n                step(i, true, data);\r\n            }, reason => {\r\n                result[i] = {success: false, result: reason};\r\n                errors.push(i);\r\n                step(i, false, reason);\r\n            });\r\n        });\r\n\r\n        function step(idx, pass, data) {\r\n            if (cb) {\r\n                const cbNow = Date.now(),\r\n                    cbDelay = idx ? (cbNow - cbTime) : undefined;\r\n                let cbResult;\r\n                cbTime = cbNow;\r\n                try {\r\n                    cbResult = cb.call(self, idx, pass, data, cbDelay);\r\n                } catch (e) {\r\n                    setError(e);\r\n                }\r\n                if (utils.isPromise(cbResult)) {\r\n                    cbResult\r\n                        .then(check)\r\n                        .catch(error => {\r\n                            setError(error);\r\n                            check();\r\n                        });\r\n                } else {\r\n                    check();\r\n                }\r\n            } else {\r\n                check();\r\n            }\r\n\r\n            function setError(e) {\r\n                const r = pass ? {success: false} : result[idx];\r\n                if (pass) {\r\n                    result[idx] = r;\r\n                    errors.push(idx);\r\n                }\r\n                r.result = e;\r\n                r.origin = {success: pass, result: data};\r\n            }\r\n\r\n            function check() {\r\n                if (!--remaining) {\r\n                    if (errors.length) {\r\n                        errors.sort();\r\n                        if (errors.length < result.length) {\r\n                            for (let i = 0, k = 0; i < result.length; i++) {\r\n                                if (i === errors[k]) {\r\n                                    k++;\r\n                                } else {\r\n                                    result[i] = {success: true, result: result[i]};\r\n                                }\r\n                            }\r\n                        }\r\n                        reject(new BatchError(result, errors, Date.now() - start));\r\n                    } else {\r\n                        utils.extend(result, 'duration', Date.now() - start);\r\n                        resolve(result);\r\n                    }\r\n                }\r\n                return null; // this dummy return is just to prevent Bluebird warnings;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (values, options) {\r\n        return batch.call(this, values, options, config);\r\n    };\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/ext/batch.js?");

/***/ }),

/***/ "./node_modules/spex/lib/ext/page.js":
/*!*******************************************!*\
  !*** ./node_modules/spex/lib/ext/page.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {PageError} = __webpack_require__(/*! ../errors/page */ \"./node_modules/spex/lib/errors/page.js\");\r\n\r\n/**\r\n * @method page\r\n * @description\r\n * Resolves a dynamic sequence of pages/arrays with [mixed values]{@tutorial mixed}.\r\n *\r\n * The method acquires pages (arrays of [mixed values]{@tutorial mixed}) from the `source` function, one by one,\r\n * and resolves each page as a {@link batch}, till no more pages left or an error/reject occurs.\r\n *\r\n * @param {Function|generator} source\r\n * Expected to return a [mixed value]{@tutorial mixed} that resolves with the next page of data (array of [mixed values]{@tutorial mixed}).\r\n * Returning or resolving with `undefined` ends the sequence, and the method resolves.\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * Parameters:\r\n *  - `index` = index of the page being requested\r\n *  - `data` = previously returned page, resolved as a {@link batch} (`undefined` when `index=0`)\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * If the function throws an error or returns a rejected promise, the method rejects with\r\n * {@link errors.PageError PageError}, which will have property `source` set.\r\n *\r\n * And if the function returns or resolves with anything other than an array or `undefined`,\r\n * the method rejects with the same {@link errors.PageError PageError}, but with `error` set to\r\n * `Unexpected data returned from the source.`\r\n *\r\n * Passing in anything other than a function will reject with {@link external:TypeError TypeError} = `Parameter 'source' must be a function.`\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Function|generator} [options.dest]\r\n * Optional destination function (or generator), to receive a resolved {@link batch} of data\r\n * for each page, process it and respond as required.\r\n *\r\n * Parameters:\r\n *  - `index` = page index in the sequence\r\n *  - `data` = page data resolved as a {@link batch}\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise object, if notifications are handled asynchronously.\r\n * And if a promise is returned, the method will not request another page from the `source`\r\n * function until the promise has been resolved.\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.PageError PageError}, which will have property `dest` set.\r\n *\r\n * @param {Number} [options.limit=0]\r\n * Limits the maximum number of pages to be requested from the `source`. If the value is greater\r\n * than 0, the method will successfully resolve once the specified limit has been reached.\r\n *\r\n * When `limit` isn't specified (default), the sequence is unlimited, and it will continue\r\n * till one of the following occurs:\r\n *  - `source` returns or resolves with `undefined` or an invalid value (non-array)\r\n *  - either `source` or `dest` functions throw an error or return a rejected promise\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When successful, the method resolves with object `{pages, total, duration}`:\r\n *  - `pages` = number of pages resolved\r\n *  - `total` = the sum of all page sizes (total number of values resolved)\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When the method fails, it rejects with {@link errors.PageError PageError}.\r\n *\r\n */\r\nfunction page(source, options, config) {\r\n\r\n    const $p = config.promise, spex = config.spex, utils = config.utils;\r\n\r\n    if (typeof source !== 'function') {\r\n        return $p.reject(new TypeError('Parameter \\'source\\' must be a function.'));\r\n    }\r\n\r\n    options = options || {};\r\n    source = utils.wrap(source);\r\n\r\n    const limit = (options.limit > 0) ? parseInt(options.limit) : 0,\r\n        dest = utils.wrap(options.dest), self = this, start = Date.now();\r\n    let request, srcTime, destTime, total = 0;\r\n\r\n    return $p((resolve, reject) => {\r\n\r\n        function loop(idx) {\r\n            const srcNow = Date.now(),\r\n                srcDelay = idx ? (srcNow - srcTime) : undefined;\r\n            srcTime = srcNow;\r\n            utils.resolve.call(self, source, [idx, request, srcDelay], value => {\r\n                if (value === undefined) {\r\n                    success();\r\n                } else {\r\n                    if (value instanceof Array) {\r\n                        spex.batch(value)\r\n                            .then(data => {\r\n                                request = data;\r\n                                total += data.length;\r\n                                if (dest) {\r\n                                    const destNow = Date.now(),\r\n                                        destDelay = idx ? (destNow - destTime) : undefined;\r\n                                    let destResult;\r\n                                    destTime = destNow;\r\n                                    try {\r\n                                        destResult = dest.call(self, idx, data, destDelay);\r\n                                    } catch (err) {\r\n                                        fail({\r\n                                            error: err,\r\n                                            dest: data\r\n                                        }, 4, dest.name);\r\n                                        return;\r\n                                    }\r\n                                    if (utils.isPromise(destResult)) {\r\n                                        destResult\r\n                                            .then(next)\r\n                                            .catch(error => {\r\n                                                fail({\r\n                                                    error: error,\r\n                                                    dest: data\r\n                                                }, 3, dest.name);\r\n                                            });\r\n                                    } else {\r\n                                        next();\r\n                                    }\r\n                                } else {\r\n                                    next();\r\n                                }\r\n                                return null; // this dummy return is just to prevent Bluebird warnings;\r\n                            })\r\n                            .catch(error => {\r\n                                fail({\r\n                                    error: error\r\n                                }, 0);\r\n                            });\r\n                    } else {\r\n                        fail({\r\n                            error: new Error('Unexpected data returned from the source.'),\r\n                            source: request\r\n                        }, 5, source.name);\r\n                    }\r\n                }\r\n            }, (reason, isRej) => {\r\n                fail({\r\n                    error: reason,\r\n                    source: request\r\n                }, isRej ? 1 : 2, source.name);\r\n            });\r\n\r\n            function next() {\r\n                if (limit === ++idx) {\r\n                    success();\r\n                } else {\r\n                    loop(idx);\r\n                }\r\n                return null; // this dummy return is just to prevent Bluebird warnings;\r\n            }\r\n\r\n            function success() {\r\n                resolve({\r\n                    pages: idx,\r\n                    total: total,\r\n                    duration: Date.now() - start\r\n                });\r\n            }\r\n\r\n            function fail(reason, code, cbName) {\r\n                reason.index = idx;\r\n                reject(new PageError(reason, code, cbName, Date.now() - start));\r\n            }\r\n        }\r\n\r\n        loop(0);\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (source, options) {\r\n        return page.call(this, source, options, config);\r\n    };\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/ext/page.js?");

/***/ }),

/***/ "./node_modules/spex/lib/ext/sequence.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/ext/sequence.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {SequenceError} = __webpack_require__(/*! ../errors/sequence */ \"./node_modules/spex/lib/errors/sequence.js\");\r\n\r\n/**\r\n * @method sequence\r\n * @description\r\n * Resolves a dynamic sequence of [mixed values]{@tutorial mixed}.\r\n *\r\n * The method acquires [mixed values]{@tutorial mixed} from the `source` function, one at a time, and resolves them,\r\n * till either no more values left in the sequence or an error/reject occurs.\r\n *\r\n * It supports both [linked and detached sequencing]{@tutorial sequencing}.\r\n *\r\n * @param {Function|generator} source\r\n * Expected to return the next [mixed value]{@tutorial mixed} to be resolved. Returning or resolving\r\n * with `undefined` ends the sequence, and the method resolves.\r\n *\r\n * Parameters:\r\n *  - `index` = current request index in the sequence\r\n *  - `data` = resolved data from the previous call (`undefined` when `index=0`)\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.SequenceError SequenceError}, which will have property `source` set.\r\n *\r\n * Passing in anything other than a function will reject with {@link external:TypeError TypeError} = `Parameter 'source' must be a function.`\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Function|generator} [options.dest=null]\r\n * Optional destination function (or generator), to receive resolved data for each index,\r\n * process it and respond as required.\r\n *\r\n * Parameters:\r\n *  - `index` = index of the resolved data in the sequence\r\n *  - `data` = the data resolved\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise object, if data processing is done asynchronously.\r\n * If a promise is returned, the method will not request another value from the `source` function,\r\n * until the promise has been resolved (the resolved value is ignored).\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.SequenceError SequenceError}, which will have property `dest` set.\r\n *\r\n * @param {Number} [options.limit=0]\r\n * Limits the maximum size of the sequence. If the value is greater than 0, the method will\r\n * successfully resolve once the specified limit has been reached.\r\n *\r\n * When `limit` isn't specified (default), the sequence is unlimited, and it will continue\r\n * till one of the following occurs:\r\n *  - `source` either returns or resolves with `undefined`\r\n *  - either `source` or `dest` functions throw an error or return a rejected promise\r\n *\r\n * @param {Boolean} [options.track=false]\r\n * Changes the type of data to be resolved by this method. By default, it is `false`\r\n * (see the return result). When set to be `true`, the method tracks/collects all resolved data\r\n * into an array internally, and resolves with that array once the method has finished successfully.\r\n *\r\n * It must be used with caution, as to the size of the sequence, because accumulating data for\r\n * a very large sequence can result in consuming too much memory.\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When successful, the resolved data depends on parameter `track`. When `track` is `false`\r\n * (default), the method resolves with object `{total, duration}`:\r\n *  - `total` = number of values resolved by the sequence\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When `track` is `true`, the method resolves with an array of all the data that has been resolved,\r\n * the same way that the standard $[promise.all] resolves. In addition, the array comes extended with\r\n * a hidden read-only property `duration` - number of milliseconds consumed by the method.\r\n *\r\n * When the method fails, it rejects with {@link errors.SequenceError SequenceError}.\r\n */\r\nfunction sequence(source, options, config) {\r\n\r\n    const $p = config.promise, utils = config.utils;\r\n\r\n    if (typeof source !== 'function') {\r\n        return $p.reject(new TypeError('Parameter \\'source\\' must be a function.'));\r\n    }\r\n\r\n    source = utils.wrap(source);\r\n\r\n    options = options || {};\r\n\r\n    const limit = (options.limit > 0) ? parseInt(options.limit) : 0,\r\n        dest = utils.wrap(options.dest),\r\n        self = this, start = Date.now();\r\n    let data, srcTime, destTime, result = [];\r\n\r\n    return $p((resolve, reject) => {\r\n\r\n        function loop(idx) {\r\n            const srcNow = Date.now(),\r\n                srcDelay = idx ? (srcNow - srcTime) : undefined;\r\n            srcTime = srcNow;\r\n            utils.resolve.call(self, source, [idx, data, srcDelay], (value, delayed) => {\r\n                data = value;\r\n                if (data === undefined) {\r\n                    success();\r\n                } else {\r\n                    if (options.track) {\r\n                        result.push(data);\r\n                    }\r\n                    if (dest) {\r\n                        const destNow = Date.now(),\r\n                            destDelay = idx ? (destNow - destTime) : undefined;\r\n                        let destResult;\r\n                        destTime = destNow;\r\n                        try {\r\n                            destResult = dest.call(self, idx, data, destDelay);\r\n                        } catch (e) {\r\n                            fail({\r\n                                error: e,\r\n                                dest: data\r\n                            }, 3, dest.name);\r\n                            return;\r\n                        }\r\n                        if (utils.isPromise(destResult)) {\r\n                            destResult\r\n                                .then(() => {\r\n                                    next(true);\r\n                                    return null; // this dummy return is just to prevent Bluebird warnings;\r\n                                })\r\n                                .catch(error => {\r\n                                    fail({\r\n                                        error: error,\r\n                                        dest: data\r\n                                    }, 2, dest.name);\r\n                                });\r\n                        } else {\r\n                            next(delayed);\r\n                        }\r\n                    } else {\r\n                        next(delayed);\r\n                    }\r\n                }\r\n            }, (reason, isRej) => {\r\n                fail({\r\n                    error: reason,\r\n                    source: data\r\n                }, isRej ? 0 : 1, source.name);\r\n            });\r\n\r\n            function next(delayed) {\r\n                if (limit === ++idx) {\r\n                    success();\r\n                } else {\r\n                    if (delayed) {\r\n                        loop(idx);\r\n                    } else {\r\n                        $p.resolve()\r\n                            .then(() => {\r\n                                loop(idx);\r\n                                return null; // this dummy return is just to prevent Bluebird warnings;\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function success() {\r\n                const length = Date.now() - start;\r\n                if (options.track) {\r\n                    utils.extend(result, 'duration', length);\r\n                } else {\r\n                    result = {\r\n                        total: idx,\r\n                        duration: length\r\n                    };\r\n                }\r\n                resolve(result);\r\n            }\r\n\r\n            function fail(reason, code, cbName) {\r\n                reason.index = idx;\r\n                reject(new SequenceError(reason, code, cbName, Date.now() - start));\r\n            }\r\n        }\r\n\r\n        loop(0);\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (source, options) {\r\n        return sequence.call(this, source, options, config);\r\n    };\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/ext/sequence.js?");

/***/ }),

/***/ "./node_modules/spex/lib/ext/stream/index.js":
/*!***************************************************!*\
  !*** ./node_modules/spex/lib/ext/stream/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    read: __webpack_require__(/*! ./read */ \"./node_modules/spex/lib/ext/stream/read.js\")\r\n};\r\n\r\n/**\r\n * @namespace stream\r\n * @description\r\n * Namespace with methods that implement stream operations, and {@link stream.read read} is the only method currently supported.\r\n *\r\n * **Synchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    console.log('RECEIVED:', index, data, delay);\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *     });\r\n * ```\r\n *\r\n * **Asynchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    return new Promise(resolve => {\r\n *        console.log('RECEIVED:', index, data, delay);\r\n *        resolve();\r\n *    });\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *    });\r\n * ```\r\n *\r\n * @property {function} stream.read\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n */\r\nmodule.exports = function (config) {\r\n    const res = {\r\n        read: npm.read(config)\r\n    };\r\n    Object.freeze(res);\r\n    return res;\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/ext/stream/index.js?");

/***/ }),

/***/ "./node_modules/spex/lib/ext/stream/read.js":
/*!**************************************************!*\
  !*** ./node_modules/spex/lib/ext/stream/read.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/**\r\n * @method stream.read\r\n * @description\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n * It reads the entire stream, using either **paused mode** (default), or in chunks (see `options.readChunks`)\r\n * with support for both synchronous and asynchronous data processing.\r\n *\r\n * **NOTE:** Once the method has finished, the onus is on the caller to release the stream\r\n * according to its protocol.\r\n *\r\n * @param {Object} stream\r\n * $[Readable] stream object.\r\n *\r\n * Passing in anything else will throw `Readable stream is required.`\r\n *\r\n * @param {Function|generator} receiver\r\n * Data processing callback (or generator).\r\n *\r\n * Passing in anything else will throw `Invalid stream receiver.`\r\n *\r\n * Parameters:\r\n *  - `index` = index of the call made to the function\r\n *  - `data` = array of all data reads from the stream's buffer\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function is called with the same `this` context as the calling method.\r\n *\r\n * It can optionally return a promise object, if data processing is asynchronous.\r\n * And if a promise is returned, the method will not read data from the stream again,\r\n * until the promise has been resolved.\r\n *\r\n * If the function throws an error or returns a rejected promise, the method rejects\r\n * with the same error / rejection reason.\r\n *\r\n * @param {Object} [options]\r\n * Optional Parameters.\r\n *\r\n * @param {Boolean} [options.closable=false]\r\n * Instructs the method to resolve on event `close` supported by the stream, as opposed to event\r\n * `end` that's used by default.\r\n *\r\n * @param {Boolean} [options.readChunks=false]\r\n * By default, the method handles event `readable` of the stream to consume data in a simplified form,\r\n * item by item. If you enable this option, the method will instead handle event `data` of the stream,\r\n * to consume chunks of data.\r\n *\r\n * @param {Number} [options.readSize]\r\n * When the value is greater than 0, it sets the read size from the stream's buffer\r\n * when the next data is available. By default, the method uses as few reads as possible\r\n * to get all the data currently available in the buffer.\r\n *\r\n * NOTE: This option is ignored when option `readChunks` is enabled.\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When finished successfully, resolves with object `{calls, reads, length, duration}`:\r\n *  - `calls` = number of calls made into the `receiver`\r\n *  - `reads` = number of successful reads from the stream\r\n *  - `length` = total length for all the data reads from the stream\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When it fails, the method rejects with the error/reject specified,\r\n * which can happen as a result of:\r\n *  - event `error` emitted by the stream\r\n *  - receiver throws an error or returns a rejected promise\r\n */\r\nfunction read(stream, receiver, options, config) {\r\n\r\n    const $p = config.promise, utils = config.utils;\r\n\r\n    if (!utils.isReadableStream(stream)) {\r\n        return $p.reject(new TypeError('Readable stream is required.'));\r\n    }\r\n\r\n    if (typeof receiver !== 'function') {\r\n        return $p.reject(new TypeError('Invalid stream receiver.'));\r\n    }\r\n\r\n    receiver = utils.wrap(receiver);\r\n\r\n    options = options || {};\r\n\r\n    const readSize = (options.readSize > 0) ? parseInt(options.readSize) : null,\r\n        self = this, start = Date.now(), receiveEvent = options.readChunks ? 'data' : 'readable';\r\n    let cbTime, ready, waiting, stop, reads = 0, length = 0, index = 0;\r\n\r\n    return $p((resolve, reject) => {\r\n\r\n        function onReceive(data) {\r\n            ready = true;\r\n            process(data);\r\n        }\r\n\r\n        function onEnd() {\r\n            if (!options.closable) {\r\n                success();\r\n            }\r\n        }\r\n\r\n        function onClose() {\r\n            success();\r\n        }\r\n\r\n        function onError(error) {\r\n            fail(error);\r\n        }\r\n\r\n        stream.on(receiveEvent, onReceive);\r\n        stream.on('end', onEnd);\r\n        stream.on('close', onClose);\r\n        stream.on('error', onError);\r\n\r\n        function process(data) {\r\n            if (!ready || stop || waiting) {\r\n                return;\r\n            }\r\n            ready = false;\r\n            let cache;\r\n            if (options.readChunks) {\r\n                cache = data;\r\n                // istanbul ignore else;\r\n                // we cannot test the else condition, as it requires a special broken stream interface.\r\n                if (!Array.isArray(cache)) {\r\n                    cache = [cache];\r\n                }\r\n                length += cache.length;\r\n                reads++;\r\n            } else {\r\n                cache = [];\r\n                waiting = true;\r\n                let page;\r\n                do {\r\n                    page = stream.read(readSize);\r\n                    if (page) {\r\n                        cache.push(page);\r\n                        // istanbul ignore next: requires a unique stream that\r\n                        // creates objects without property `length` defined.\r\n                        length += page.length || 0;\r\n                        reads++;\r\n                    }\r\n                } while (page);\r\n\r\n                if (!cache.length) {\r\n                    waiting = false;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const cbNow = Date.now(),\r\n                cbDelay = index ? (cbNow - cbTime) : undefined;\r\n            let result;\r\n            cbTime = cbNow;\r\n            try {\r\n                result = receiver.call(self, index++, cache, cbDelay);\r\n            } catch (e) {\r\n                fail(e);\r\n                return;\r\n            }\r\n\r\n            if (utils.isPromise(result)) {\r\n                result\r\n                    .then(() => {\r\n                        waiting = false;\r\n                        process();\r\n                        return null; // this dummy return is just to prevent Bluebird warnings;\r\n                    })\r\n                    .catch(error => {\r\n                        fail(error);\r\n                    });\r\n            } else {\r\n                waiting = false;\r\n                process();\r\n            }\r\n        }\r\n\r\n        function success() {\r\n            cleanup();\r\n            resolve({\r\n                calls: index,\r\n                reads: reads,\r\n                length: length,\r\n                duration: Date.now() - start\r\n            });\r\n        }\r\n\r\n        function fail(error) {\r\n            stop = true;\r\n            cleanup();\r\n            reject(error);\r\n        }\r\n\r\n        function cleanup() {\r\n            stream.removeListener(receiveEvent, onReceive);\r\n            stream.removeListener('close', onClose);\r\n            stream.removeListener('error', onError);\r\n            stream.removeListener('end', onEnd);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (stream, receiver, options) {\r\n        return read.call(this, stream, receiver, options, config);\r\n    };\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/ext/stream/read.js?");

/***/ }),

/***/ "./node_modules/spex/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/spex/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    utils: __webpack_require__(/*! ./utils */ \"./node_modules/spex/lib/utils/index.js\"),\r\n    batch: __webpack_require__(/*! ./ext/batch */ \"./node_modules/spex/lib/ext/batch.js\"),\r\n    page: __webpack_require__(/*! ./ext/page */ \"./node_modules/spex/lib/ext/page.js\"),\r\n    sequence: __webpack_require__(/*! ./ext/sequence */ \"./node_modules/spex/lib/ext/sequence.js\"),\r\n    stream: __webpack_require__(/*! ./ext/stream */ \"./node_modules/spex/lib/ext/stream/index.js\"),\r\n    errors: __webpack_require__(/*! ./errors */ \"./node_modules/spex/lib/errors/index.js\")\r\n};\r\n\r\n/**\r\n * @module spex\r\n * @summary Specialized Promise Extensions\r\n * @author Vitaly Tomilov\r\n *\r\n * @description\r\n * Attaches to an external promise library and provides additional methods built solely\r\n * on the basic promise operations:\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * ### usage\r\n * For any third-party promise library:\r\n * ```js\r\n * const promise = require('bluebird');\r\n * const spex = require('spex')(promise);\r\n * ```\r\n * For ES6 promises:\r\n * ```js\r\n * const spex = require('spex')(Promise);\r\n * ```\r\n *\r\n * @param {Object|Function} promiseLib\r\n * Instance of a promise library to be used by this module.\r\n *\r\n * Some implementations use `Promise` constructor to create a new promise, while\r\n * others use the module's function for it. Both types are supported the same.\r\n *\r\n * Alternatively, an object of type {@link PromiseAdapter} can be passed in, which provides\r\n * compatibility with any promise library outside of the standard.\r\n *\r\n * Passing in a promise library that cannot be recognized will throw\r\n * `Invalid promise library specified.`\r\n *\r\n * @returns {Object}\r\n * Namespace with all supported methods.\r\n *\r\n * @see {@link PromiseAdapter}, {@link batch}, {@link page}, {@link sequence}, {@link stream}\r\n */\r\nfunction main(promiseLib) {\r\n\r\n    const spex = {}, // library instance;\r\n        promise = parsePromiseLib(promiseLib); // promise library parsing;\r\n\r\n    const config = {\r\n        spex: spex,\r\n        promise: promise,\r\n        utils: npm.utils(promise)\r\n    };\r\n\r\n    spex.errors = npm.errors;\r\n    spex.batch = npm.batch(config);\r\n    spex.page = npm.page(config);\r\n    spex.sequence = npm.sequence(config);\r\n    spex.stream = npm.stream(config);\r\n\r\n    config.utils.extend(spex, '$p', promise);\r\n\r\n    Object.freeze(spex);\r\n\r\n    return spex;\r\n}\r\n\r\n//////////////////////////////////////////\r\n// Parses and validates a promise library;\r\nfunction parsePromiseLib(lib) {\r\n    if (lib) {\r\n        let promise;\r\n        if (lib instanceof main.PromiseAdapter) {\r\n            promise = function (func) {\r\n                return lib.create(func);\r\n            };\r\n            promise.resolve = lib.resolve;\r\n            promise.reject = lib.reject;\r\n            return promise;\r\n        }\r\n        const t = typeof lib;\r\n        if (t === 'function' || t === 'object') {\r\n            const Root = typeof lib.Promise === 'function' ? lib.Promise : lib;\r\n            promise = function (func) {\r\n                return new Root(func);\r\n            };\r\n            promise.resolve = Root.resolve;\r\n            promise.reject = Root.reject;\r\n            if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {\r\n                return promise;\r\n            }\r\n        }\r\n    }\r\n    throw new TypeError('Invalid promise library specified.');\r\n}\r\n\r\nmain.PromiseAdapter = __webpack_require__(/*! ./adapter */ \"./node_modules/spex/lib/adapter.js\");\r\nmain.errors = npm.errors;\r\n\r\nObject.freeze(main);\r\n\r\nmodule.exports = main;\r\n\r\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/index.js?");

/***/ }),

/***/ "./node_modules/spex/lib/utils/index.js":
/*!**********************************************!*\
  !*** ./node_modules/spex/lib/utils/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    stat: __webpack_require__(/*! ./static */ \"./node_modules/spex/lib/utils/static.js\")\r\n};\r\n\r\nmodule.exports = function ($p) {\r\n\r\n    const exp = {\r\n        formatError: npm.stat.formatError,\r\n        isPromise: npm.stat.isPromise,\r\n        isReadableStream: npm.stat.isReadableStream,\r\n        messageGap: npm.stat.messageGap,\r\n        extend: npm.stat.extend,\r\n        resolve: resolve,\r\n        wrap: wrap\r\n    };\r\n\r\n    return exp;\r\n\r\n    //////////////////////////////////////////\r\n    // Checks if the function is a generator,\r\n    // and if so - wraps it up into a promise;\r\n    function wrap(func) {\r\n        if (typeof func === 'function') {\r\n            if (func.constructor.name === 'GeneratorFunction') {\r\n                return asyncAdapter(func);\r\n            }\r\n            return func;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////\r\n    // Resolves a mixed value into the actual value,\r\n    // consistent with the way mixed values are defined:\r\n    // https://github.com/vitaly-t/spex/wiki/Mixed-Values\r\n    function resolve(value, params, onSuccess, onError) {\r\n\r\n        const self = this;\r\n        let delayed = false;\r\n\r\n        function loop() {\r\n            while (typeof value === 'function') {\r\n                if (value.constructor.name === 'GeneratorFunction') {\r\n                    value = asyncAdapter(value);\r\n                }\r\n                try {\r\n                    value = params ? value.apply(self, params) : value.call(self);\r\n                } catch (e) {\r\n                    onError(e, false); // false means 'threw an error'\r\n                    return;\r\n                }\r\n            }\r\n            if (exp.isPromise(value)) {\r\n                value\r\n                    .then(data => {\r\n                        delayed = true;\r\n                        value = data;\r\n                        loop();\r\n                        return null; // this dummy return is just to prevent Bluebird warnings;\r\n                    })\r\n                    .catch(error => {\r\n                        onError(error, true); // true means 'rejected'\r\n                    });\r\n            } else {\r\n                onSuccess(value, delayed);\r\n            }\r\n        }\r\n\r\n        loop();\r\n    }\r\n\r\n    // Generator-to-Promise adapter;\r\n    // Based on: https://www.promisejs.org/generators/#both\r\n    function asyncAdapter(generator) {\r\n        return function () {\r\n            const g = generator.apply(this, arguments);\r\n\r\n            function handle(result) {\r\n                if (result.done) {\r\n                    return $p.resolve(result.value);\r\n                }\r\n                return $p.resolve(result.value)\r\n                    .then(res => handle(g.next(res)), err => handle(g.throw(err)));\r\n            }\r\n\r\n            return handle(g.next());\r\n        };\r\n    }\r\n\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/utils/index.js?");

/***/ }),

/***/ "./node_modules/spex/lib/utils/static.js":
/*!***********************************************!*\
  !*** ./node_modules/spex/lib/utils/static.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const npm = {\r\n    stream: __webpack_require__(/*! stream */ \"stream\"),\r\n    util: __webpack_require__(/*! util */ \"util\")\r\n};\r\n\r\n/////////////////////////////////////\r\n// Checks if the value is a promise;\r\nfunction isPromise(value) {\r\n    return value && typeof value.then === 'function';\r\n}\r\n\r\n////////////////////////////////////////////\r\n// Checks object for being a readable stream;\r\nfunction isReadableStream(obj) {\r\n    return obj instanceof npm.stream.Stream &&\r\n        typeof obj._read === 'function' &&\r\n        typeof obj._readableState === 'object';\r\n}\r\n\r\n////////////////////////////////////////////////////////////\r\n// Sets an object property as read-only and non-enumerable.\r\nfunction extend(obj, name, value) {\r\n    Object.defineProperty(obj, name, {\r\n        value: value,\r\n        configurable: false,\r\n        enumerable: false,\r\n        writable: false\r\n    });\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output;\r\nfunction messageGap(level) {\r\n    return ' '.repeat(level * 4);\r\n}\r\n\r\nfunction formatError(error, level) {\r\n    const names = ['BatchError', 'PageError', 'SequenceError'];\r\n    let msg = npm.util.inspect(error);\r\n    if (error instanceof Error) {\r\n        if (names.indexOf(error.name) === -1) {\r\n            const gap = messageGap(level);\r\n            msg = msg.split('\\n').map((line, index) => {\r\n                return (index ? gap : '') + line;\r\n            }).join('\\n');\r\n        } else {\r\n            msg = error.toString(level);\r\n        }\r\n    }\r\n    return msg;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Adds prototype inspection, with support of the newer\r\n// Custom Inspection, which was added in Node.js 6.x\r\nfunction addInspection(type, cb) {\r\n    // istanbul ignore next;\r\n    if (npm.util.inspect.custom) {\r\n        // Custom inspection is supported:\r\n        type.prototype[npm.util.inspect.custom] = cb;\r\n    } else {\r\n        // Use classic inspection:\r\n        type.prototype.inspect = cb;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    addInspection: addInspection,\r\n    formatError: formatError,\r\n    isPromise: isPromise,\r\n    isReadableStream: isReadableStream,\r\n    messageGap: messageGap,\r\n    extend: extend\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/spex/lib/utils/static.js?");

/***/ }),

/***/ "./node_modules/split2/index.js":
/*!**************************************!*\
  !*** ./node_modules/split2/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\nCopyright (c) 2014-2021, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\n\n\nconst { Transform } = __webpack_require__(/*! stream */ \"stream\")\nconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"string_decoder\")\nconst kLast = Symbol('last')\nconst kDecoder = Symbol('decoder')\n\nfunction transform (chunk, enc, cb) {\n  let list\n  if (this.overflow) { // Line buffer is full. Skip to start of next line.\n    const buf = this[kDecoder].write(chunk)\n    list = buf.split(this.matcher)\n\n    if (list.length === 1) return cb() // Line ending not found. Discard entire chunk.\n\n    // Line ending found. Discard trailing fragment of previous line and reset overflow state.\n    list.shift()\n    this.overflow = false\n  } else {\n    this[kLast] += this[kDecoder].write(chunk)\n    list = this[kLast].split(this.matcher)\n  }\n\n  this[kLast] = list.pop()\n\n  for (let i = 0; i < list.length; i++) {\n    try {\n      push(this, this.mapper(list[i]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  this.overflow = this[kLast].length > this.maxLength\n  if (this.overflow && !this.skipOverflow) {\n    cb(new Error('maximum buffer reached'))\n    return\n  }\n\n  cb()\n}\n\nfunction flush (cb) {\n  // forward any gibberish left in there\n  this[kLast] += this[kDecoder].end()\n\n  if (this[kLast]) {\n    try {\n      push(this, this.mapper(this[kLast]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  cb()\n}\n\nfunction push (self, val) {\n  if (val !== undefined) {\n    self.push(val)\n  }\n}\n\nfunction noop (incoming) {\n  return incoming\n}\n\nfunction split (matcher, mapper, options) {\n  // Set defaults for any arguments not supplied.\n  matcher = matcher || /\\r?\\n/\n  mapper = mapper || noop\n  options = options || {}\n\n  // Test arguments explicitly.\n  switch (arguments.length) {\n    case 1:\n      // If mapper is only argument.\n      if (typeof matcher === 'function') {\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If options is only argument.\n      } else if (typeof matcher === 'object' && !(matcher instanceof RegExp) && !matcher[Symbol.split]) {\n        options = matcher\n        matcher = /\\r?\\n/\n      }\n      break\n\n    case 2:\n      // If mapper and options are arguments.\n      if (typeof matcher === 'function') {\n        options = mapper\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If matcher and options are arguments.\n      } else if (typeof mapper === 'object') {\n        options = mapper\n        mapper = noop\n      }\n  }\n\n  options = Object.assign({}, options)\n  options.autoDestroy = true\n  options.transform = transform\n  options.flush = flush\n  options.readableObjectMode = true\n\n  const stream = new Transform(options)\n\n  stream[kLast] = ''\n  stream[kDecoder] = new StringDecoder('utf8')\n  stream.matcher = matcher\n  stream.mapper = mapper\n  stream.maxLength = options.maxLength\n  stream.skipOverflow = options.skipOverflow || false\n  stream.overflow = false\n  stream._destroy = function (err, cb) {\n    // Weird Node v12 bug that we need to work around\n    this._writableState.errorEmitted = false\n    cb(err)\n  }\n\n  return stream\n}\n\nmodule.exports = split\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/split2/index.js?");

/***/ }),

/***/ "./node_modules/supports-color/index.js":
/*!**********************************************!*\
  !*** ./node_modules/supports-color/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst hasFlag = __webpack_require__(/*! has-flag */ \"./node_modules/has-flag/index.js\");\n\nconst env = process.env;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false')) {\n\tforceColor = false;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = true;\n}\nif ('FORCE_COLOR' in env) {\n\tforceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(stream) {\n\tif (forceColor === false) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (stream && !stream.isTTY && forceColor !== true) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor ? 1 : 0;\n\n\tif (process.platform === 'win32') {\n\t\t// Node.js 7.5.0 is the first version of Node.js to include a patch to\n\t\t// libuv that enables 256 color output on Windows. Anything earlier and it\n\t\t// won't work. However, here we target Node.js 8 at minimum as it is an LTS\n\t\t// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\n\t\t// release that supports 256 colors. Windows 10 build 14931 is the first release\n\t\t// that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(process.versions.node.split('.')[0]) >= 8 &&\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: getSupportLevel(process.stdout),\n\tstderr: getSupportLevel(process.stderr)\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/supports-color/index.js?");

/***/ }),

/***/ "./node_modules/telegraf/node_modules/debug/src/browser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/telegraf/node_modules/debug/src/browser.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/telegraf/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/telegraf/node_modules/debug/src/common.js":
/*!****************************************************************!*\
  !*** ./node_modules/telegraf/node_modules/debug/src/common.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/telegraf/node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/telegraf/node_modules/debug/src/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/telegraf/node_modules/debug/src/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = __webpack_require__(/*! ./browser.js */ \"./node_modules/telegraf/node_modules/debug/src/browser.js\");\n} else {\n\tmodule.exports = __webpack_require__(/*! ./node.js */ \"./node_modules/telegraf/node_modules/debug/src/node.js\");\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/node_modules/debug/src/index.js?");

/***/ }),

/***/ "./node_modules/telegraf/node_modules/debug/src/node.js":
/*!**************************************************************!*\
  !*** ./node_modules/telegraf/node_modules/debug/src/node.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nconst tty = __webpack_require__(/*! tty */ \"tty\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = __webpack_require__(/*! supports-color */ \"./node_modules/supports-color/index.js\");\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/telegraf/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/node_modules/debug/src/node.js?");

/***/ }),

/***/ "./node_modules/telegraf/node_modules/ms/index.js":
/*!********************************************************!*\
  !*** ./node_modules/telegraf/node_modules/ms/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/tr46/index.js":
/*!************************************!*\
  !*** ./node_modules/tr46/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar punycode = __webpack_require__(/*! punycode */ \"punycode\");\nvar mappingTable = __webpack_require__(/*! ./lib/mappingTable.json */ \"./node_modules/tr46/lib/mappingTable.json\");\n\nvar PROCESSING_OPTIONS = {\n  TRANSITIONAL: 0,\n  NONTRANSITIONAL: 1\n};\n\nfunction normalize(str) { // fix bug in v8\n  return str.split('\\u0000').map(function (s) { return s.normalize('NFC'); }).join('\\u0000');\n}\n\nfunction findStatus(val) {\n  var start = 0;\n  var end = mappingTable.length - 1;\n\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n\n    var target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      return target;\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction countSymbols(string) {\n  return string\n    // replace every surrogate pair with a BMP symbol\n    .replace(regexAstralSymbols, '_')\n    // then get the length\n    .length;\n}\n\nfunction mapChars(domain_name, useSTD3, processing_option) {\n  var hasError = false;\n  var processed = \"\";\n\n  var len = countSymbols(domain_name);\n  for (var i = 0; i < len; ++i) {\n    var codePoint = domain_name.codePointAt(i);\n    var status = findStatus(codePoint);\n\n    switch (status[1]) {\n      case \"disallowed\":\n        hasError = true;\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += String.fromCodePoint.apply(String, status[2]);\n        break;\n      case \"deviation\":\n        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        } else {\n          processed += String.fromCodePoint(codePoint);\n        }\n        break;\n      case \"valid\":\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"disallowed_STD3_mapped\":\n        if (useSTD3) {\n          hasError = true;\n          processed += String.fromCodePoint(codePoint);\n        } else {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        }\n        break;\n      case \"disallowed_STD3_valid\":\n        if (useSTD3) {\n          hasError = true;\n        }\n\n        processed += String.fromCodePoint(codePoint);\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nvar combiningMarksRegex = /[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2D]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDE2C-\\uDE37\\uDEDF-\\uDEEA\\uDF01-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDE30-\\uDE40\\uDEAB-\\uDEB7]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nfunction validateLabel(label, processing_option) {\n  if (label.substr(0, 4) === \"xn--\") {\n    label = punycode.toUnicode(label);\n    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;\n  }\n\n  var error = false;\n\n  if (normalize(label) !== label ||\n      (label[3] === \"-\" && label[4] === \"-\") ||\n      label[0] === \"-\" || label[label.length - 1] === \"-\" ||\n      label.indexOf(\".\") !== -1 ||\n      label.search(combiningMarksRegex) === 0) {\n    error = true;\n  }\n\n  var len = countSymbols(label);\n  for (var i = 0; i < len; ++i) {\n    var status = findStatus(label.codePointAt(i));\n    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== \"valid\") ||\n        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&\n         status[1] !== \"valid\" && status[1] !== \"deviation\")) {\n      error = true;\n      break;\n    }\n  }\n\n  return {\n    label: label,\n    error: error\n  };\n}\n\nfunction processing(domain_name, useSTD3, processing_option) {\n  var result = mapChars(domain_name, useSTD3, processing_option);\n  result.string = normalize(result.string);\n\n  var labels = result.string.split(\".\");\n  for (var i = 0; i < labels.length; ++i) {\n    try {\n      var validation = validateLabel(labels[i]);\n      labels[i] = validation.label;\n      result.error = result.error || validation.error;\n    } catch(e) {\n      result.error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error: result.error\n  };\n}\n\nmodule.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {\n  var result = processing(domain_name, useSTD3, processing_option);\n  var labels = result.string.split(\".\");\n  labels = labels.map(function(l) {\n    try {\n      return punycode.toASCII(l);\n    } catch(e) {\n      result.error = true;\n      return l;\n    }\n  });\n\n  if (verifyDnsLength) {\n    var total = labels.slice(0, labels.length - 1).join(\".\").length;\n    if (total.length > 253 || total.length === 0) {\n      result.error = true;\n    }\n\n    for (var i=0; i < labels.length; ++i) {\n      if (labels.length > 63 || labels.length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) return null;\n  return labels.join(\".\");\n};\n\nmodule.exports.toUnicode = function(domain_name, useSTD3) {\n  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n};\n\nmodule.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/tr46/index.js?");

/***/ }),

/***/ "./node_modules/webidl-conversions/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/webidl-conversions/lib/index.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar conversions = {};\nmodule.exports = conversions;\n\nfunction sign(x) {\n    return x < 0 ? -1 : 1;\n}\n\nfunction evenRound(x) {\n    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\n    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)\n        return Math.floor(x);\n    } else {\n        return Math.round(x);\n    }\n}\n\nfunction createNumberConversion(bitLength, typeOpts) {\n    if (!typeOpts.unsigned) {\n        --bitLength;\n    }\n    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\n    const upperBound = Math.pow(2, bitLength) - 1;\n\n    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\n    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\n\n    return function(V, opts) {\n        if (!opts) opts = {};\n\n        let x = +V;\n\n        if (opts.enforceRange) {\n            if (!Number.isFinite(x)) {\n                throw new TypeError(\"Argument is not a finite number\");\n            }\n\n            x = sign(x) * Math.floor(Math.abs(x));\n            if (x < lowerBound || x > upperBound) {\n                throw new TypeError(\"Argument is not in byte range\");\n            }\n\n            return x;\n        }\n\n        if (!isNaN(x) && opts.clamp) {\n            x = evenRound(x);\n\n            if (x < lowerBound) x = lowerBound;\n            if (x > upperBound) x = upperBound;\n            return x;\n        }\n\n        if (!Number.isFinite(x) || x === 0) {\n            return 0;\n        }\n\n        x = sign(x) * Math.floor(Math.abs(x));\n        x = x % moduloVal;\n\n        if (!typeOpts.unsigned && x >= moduloBound) {\n            return x - moduloVal;\n        } else if (typeOpts.unsigned) {\n            if (x < 0) {\n              x += moduloVal;\n            } else if (x === -0) { // don't return negative zero\n              return 0;\n            }\n        }\n\n        return x;\n    }\n}\n\nconversions[\"void\"] = function () {\n    return undefined;\n};\n\nconversions[\"boolean\"] = function (val) {\n    return !!val;\n};\n\nconversions[\"byte\"] = createNumberConversion(8, { unsigned: false });\nconversions[\"octet\"] = createNumberConversion(8, { unsigned: true });\n\nconversions[\"short\"] = createNumberConversion(16, { unsigned: false });\nconversions[\"unsigned short\"] = createNumberConversion(16, { unsigned: true });\n\nconversions[\"long\"] = createNumberConversion(32, { unsigned: false });\nconversions[\"unsigned long\"] = createNumberConversion(32, { unsigned: true });\n\nconversions[\"long long\"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });\nconversions[\"unsigned long long\"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });\n\nconversions[\"double\"] = function (V) {\n    const x = +V;\n\n    if (!Number.isFinite(x)) {\n        throw new TypeError(\"Argument is not a finite floating-point value\");\n    }\n\n    return x;\n};\n\nconversions[\"unrestricted double\"] = function (V) {\n    const x = +V;\n\n    if (isNaN(x)) {\n        throw new TypeError(\"Argument is NaN\");\n    }\n\n    return x;\n};\n\n// not quite valid, but good enough for JS\nconversions[\"float\"] = conversions[\"double\"];\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\n\nconversions[\"DOMString\"] = function (V, opts) {\n    if (!opts) opts = {};\n\n    if (opts.treatNullAsEmptyString && V === null) {\n        return \"\";\n    }\n\n    return String(V);\n};\n\nconversions[\"ByteString\"] = function (V, opts) {\n    const x = String(V);\n    let c = undefined;\n    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n        if (c > 255) {\n            throw new TypeError(\"Argument is not a valid bytestring\");\n        }\n    }\n\n    return x;\n};\n\nconversions[\"USVString\"] = function (V) {\n    const S = String(V);\n    const n = S.length;\n    const U = [];\n    for (let i = 0; i < n; ++i) {\n        const c = S.charCodeAt(i);\n        if (c < 0xD800 || c > 0xDFFF) {\n            U.push(String.fromCodePoint(c));\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\n            U.push(String.fromCodePoint(0xFFFD));\n        } else {\n            if (i === n - 1) {\n                U.push(String.fromCodePoint(0xFFFD));\n            } else {\n                const d = S.charCodeAt(i + 1);\n                if (0xDC00 <= d && d <= 0xDFFF) {\n                    const a = c & 0x3FF;\n                    const b = d & 0x3FF;\n                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\n                    ++i;\n                } else {\n                    U.push(String.fromCodePoint(0xFFFD));\n                }\n            }\n        }\n    }\n\n    return U.join('');\n};\n\nconversions[\"Date\"] = function (V, opts) {\n    if (!(V instanceof Date)) {\n        throw new TypeError(\"Argument is not a Date object\");\n    }\n    if (isNaN(V)) {\n        return undefined;\n    }\n\n    return V;\n};\n\nconversions[\"RegExp\"] = function (V, opts) {\n    if (!(V instanceof RegExp)) {\n        V = new RegExp(V);\n    }\n\n    return V;\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/webidl-conversions/lib/index.js?");

/***/ }),

/***/ "./node_modules/whatwg-url/lib/URL-impl.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL-impl.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/whatwg-url/lib/URL-impl.js?");

/***/ }),

/***/ "./node_modules/whatwg-url/lib/URL.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"./node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"./node_modules/whatwg-url/lib/utils.js\");\nconst Impl = __webpack_require__(/*! .//URL-impl.js */ \"./node_modules/whatwg-url/lib/URL-impl.js\");\n\nconst impl = utils.implSymbol;\n\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n  args[1] = conversions[\"USVString\"](args[1]);\n  }\n\n  module.exports.setup(this, args);\n}\n\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\n\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\n\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: { URL: URL },\n    Worker: { URL: URL }\n  }\n};\n\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/whatwg-url/lib/URL.js?");

/***/ }),

/***/ "./node_modules/whatwg-url/lib/public-api.js":
/*!***************************************************!*\
  !*** ./node_modules/whatwg-url/lib/public-api.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.URL = __webpack_require__(/*! ./URL */ \"./node_modules/whatwg-url/lib/URL.js\")[\"interface\"];\nexports.serializeURL = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").serializeURL;\nexports.serializeURLOrigin = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").serializeURLOrigin;\nexports.basicURLParse = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").basicURLParse;\nexports.setTheUsername = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").setTheUsername;\nexports.setThePassword = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").setThePassword;\nexports.serializeHost = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").serializeHost;\nexports.serializeInteger = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").serializeInteger;\nexports.parseURL = __webpack_require__(/*! ./url-state-machine */ \"./node_modules/whatwg-url/lib/url-state-machine.js\").parseURL;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/whatwg-url/lib/public-api.js?");

/***/ }),

/***/ "./node_modules/whatwg-url/lib/url-state-machine.js":
/*!**********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/url-state-machine.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\r\nconst tr46 = __webpack_require__(/*! tr46 */ \"./node_modules/tr46/index.js\");\r\n\r\nconst specialSchemes = {\r\n  ftp: 21,\r\n  file: null,\r\n  gopher: 70,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443\r\n};\r\n\r\nconst failure = Symbol(\"failure\");\r\n\r\nfunction countSymbols(str) {\r\n  return punycode.ucs2.decode(str).length;\r\n}\r\n\r\nfunction at(input, idx) {\r\n  const c = input[idx];\r\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\r\n}\r\n\r\nfunction isASCIIDigit(c) {\r\n  return c >= 0x30 && c <= 0x39;\r\n}\r\n\r\nfunction isASCIIAlpha(c) {\r\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\r\n}\r\n\r\nfunction isASCIIAlphanumeric(c) {\r\n  return isASCIIAlpha(c) || isASCIIDigit(c);\r\n}\r\n\r\nfunction isASCIIHex(c) {\r\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\r\n}\r\n\r\nfunction isSingleDot(buffer) {\r\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\r\n}\r\n\r\nfunction isDoubleDot(buffer) {\r\n  buffer = buffer.toLowerCase();\r\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\r\n}\r\n\r\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\r\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\r\n}\r\n\r\nfunction isWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\r\n}\r\n\r\nfunction containsForbiddenHostCodePoint(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction isSpecialScheme(scheme) {\r\n  return specialSchemes[scheme] !== undefined;\r\n}\r\n\r\nfunction isSpecial(url) {\r\n  return isSpecialScheme(url.scheme);\r\n}\r\n\r\nfunction defaultPort(scheme) {\r\n  return specialSchemes[scheme];\r\n}\r\n\r\nfunction percentEncode(c) {\r\n  let hex = c.toString(16).toUpperCase();\r\n  if (hex.length === 1) {\r\n    hex = \"0\" + hex;\r\n  }\r\n\r\n  return \"%\" + hex;\r\n}\r\n\r\nfunction utf8PercentEncode(c) {\r\n  const buf = new Buffer(c);\r\n\r\n  let str = \"\";\r\n\r\n  for (let i = 0; i < buf.length; ++i) {\r\n    str += percentEncode(buf[i]);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\nfunction utf8PercentDecode(str) {\r\n  const input = new Buffer(str);\r\n  const output = [];\r\n  for (let i = 0; i < input.length; ++i) {\r\n    if (input[i] !== 37) {\r\n      output.push(input[i]);\r\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\r\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\r\n      i += 2;\r\n    } else {\r\n      output.push(input[i]);\r\n    }\r\n  }\r\n  return new Buffer(output).toString();\r\n}\r\n\r\nfunction isC0ControlPercentEncode(c) {\r\n  return c <= 0x1F || c > 0x7E;\r\n}\r\n\r\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\r\nfunction isPathPercentEncode(c) {\r\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\r\n}\r\n\r\nconst extraUserinfoPercentEncodeSet =\r\n  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\r\nfunction isUserinfoPercentEncode(c) {\r\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\r\n}\r\n\r\nfunction percentEncodeChar(c, encodeSetPredicate) {\r\n  const cStr = String.fromCodePoint(c);\r\n\r\n  if (encodeSetPredicate(c)) {\r\n    return utf8PercentEncode(cStr);\r\n  }\r\n\r\n  return cStr;\r\n}\r\n\r\nfunction parseIPv4Number(input) {\r\n  let R = 10;\r\n\r\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\r\n    input = input.substring(2);\r\n    R = 16;\r\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\r\n    input = input.substring(1);\r\n    R = 8;\r\n  }\r\n\r\n  if (input === \"\") {\r\n    return 0;\r\n  }\r\n\r\n  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);\r\n  if (regex.test(input)) {\r\n    return failure;\r\n  }\r\n\r\n  return parseInt(input, R);\r\n}\r\n\r\nfunction parseIPv4(input) {\r\n  const parts = input.split(\".\");\r\n  if (parts[parts.length - 1] === \"\") {\r\n    if (parts.length > 1) {\r\n      parts.pop();\r\n    }\r\n  }\r\n\r\n  if (parts.length > 4) {\r\n    return input;\r\n  }\r\n\r\n  const numbers = [];\r\n  for (const part of parts) {\r\n    if (part === \"\") {\r\n      return input;\r\n    }\r\n    const n = parseIPv4Number(part);\r\n    if (n === failure) {\r\n      return input;\r\n    }\r\n\r\n    numbers.push(n);\r\n  }\r\n\r\n  for (let i = 0; i < numbers.length - 1; ++i) {\r\n    if (numbers[i] > 255) {\r\n      return failure;\r\n    }\r\n  }\r\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\r\n    return failure;\r\n  }\r\n\r\n  let ipv4 = numbers.pop();\r\n  let counter = 0;\r\n\r\n  for (const n of numbers) {\r\n    ipv4 += n * Math.pow(256, 3 - counter);\r\n    ++counter;\r\n  }\r\n\r\n  return ipv4;\r\n}\r\n\r\nfunction serializeIPv4(address) {\r\n  let output = \"\";\r\n  let n = address;\r\n\r\n  for (let i = 1; i <= 4; ++i) {\r\n    output = String(n % 256) + output;\r\n    if (i !== 4) {\r\n      output = \".\" + output;\r\n    }\r\n    n = Math.floor(n / 256);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseIPv6(input) {\r\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\r\n  let pieceIndex = 0;\r\n  let compress = null;\r\n  let pointer = 0;\r\n\r\n  input = punycode.ucs2.decode(input);\r\n\r\n  if (input[pointer] === 58) {\r\n    if (input[pointer + 1] !== 58) {\r\n      return failure;\r\n    }\r\n\r\n    pointer += 2;\r\n    ++pieceIndex;\r\n    compress = pieceIndex;\r\n  }\r\n\r\n  while (pointer < input.length) {\r\n    if (pieceIndex === 8) {\r\n      return failure;\r\n    }\r\n\r\n    if (input[pointer] === 58) {\r\n      if (compress !== null) {\r\n        return failure;\r\n      }\r\n      ++pointer;\r\n      ++pieceIndex;\r\n      compress = pieceIndex;\r\n      continue;\r\n    }\r\n\r\n    let value = 0;\r\n    let length = 0;\r\n\r\n    while (length < 4 && isASCIIHex(input[pointer])) {\r\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\r\n      ++pointer;\r\n      ++length;\r\n    }\r\n\r\n    if (input[pointer] === 46) {\r\n      if (length === 0) {\r\n        return failure;\r\n      }\r\n\r\n      pointer -= length;\r\n\r\n      if (pieceIndex > 6) {\r\n        return failure;\r\n      }\r\n\r\n      let numbersSeen = 0;\r\n\r\n      while (input[pointer] !== undefined) {\r\n        let ipv4Piece = null;\r\n\r\n        if (numbersSeen > 0) {\r\n          if (input[pointer] === 46 && numbersSeen < 4) {\r\n            ++pointer;\r\n          } else {\r\n            return failure;\r\n          }\r\n        }\r\n\r\n        if (!isASCIIDigit(input[pointer])) {\r\n          return failure;\r\n        }\r\n\r\n        while (isASCIIDigit(input[pointer])) {\r\n          const number = parseInt(at(input, pointer));\r\n          if (ipv4Piece === null) {\r\n            ipv4Piece = number;\r\n          } else if (ipv4Piece === 0) {\r\n            return failure;\r\n          } else {\r\n            ipv4Piece = ipv4Piece * 10 + number;\r\n          }\r\n          if (ipv4Piece > 255) {\r\n            return failure;\r\n          }\r\n          ++pointer;\r\n        }\r\n\r\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\r\n\r\n        ++numbersSeen;\r\n\r\n        if (numbersSeen === 2 || numbersSeen === 4) {\r\n          ++pieceIndex;\r\n        }\r\n      }\r\n\r\n      if (numbersSeen !== 4) {\r\n        return failure;\r\n      }\r\n\r\n      break;\r\n    } else if (input[pointer] === 58) {\r\n      ++pointer;\r\n      if (input[pointer] === undefined) {\r\n        return failure;\r\n      }\r\n    } else if (input[pointer] !== undefined) {\r\n      return failure;\r\n    }\r\n\r\n    address[pieceIndex] = value;\r\n    ++pieceIndex;\r\n  }\r\n\r\n  if (compress !== null) {\r\n    let swaps = pieceIndex - compress;\r\n    pieceIndex = 7;\r\n    while (pieceIndex !== 0 && swaps > 0) {\r\n      const temp = address[compress + swaps - 1];\r\n      address[compress + swaps - 1] = address[pieceIndex];\r\n      address[pieceIndex] = temp;\r\n      --pieceIndex;\r\n      --swaps;\r\n    }\r\n  } else if (compress === null && pieceIndex !== 8) {\r\n    return failure;\r\n  }\r\n\r\n  return address;\r\n}\r\n\r\nfunction serializeIPv6(address) {\r\n  let output = \"\";\r\n  const seqResult = findLongestZeroSequence(address);\r\n  const compress = seqResult.idx;\r\n  let ignore0 = false;\r\n\r\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\r\n    if (ignore0 && address[pieceIndex] === 0) {\r\n      continue;\r\n    } else if (ignore0) {\r\n      ignore0 = false;\r\n    }\r\n\r\n    if (compress === pieceIndex) {\r\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\r\n      output += separator;\r\n      ignore0 = true;\r\n      continue;\r\n    }\r\n\r\n    output += address[pieceIndex].toString(16);\r\n\r\n    if (pieceIndex !== 7) {\r\n      output += \":\";\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseHost(input, isSpecialArg) {\r\n  if (input[0] === \"[\") {\r\n    if (input[input.length - 1] !== \"]\") {\r\n      return failure;\r\n    }\r\n\r\n    return parseIPv6(input.substring(1, input.length - 1));\r\n  }\r\n\r\n  if (!isSpecialArg) {\r\n    return parseOpaqueHost(input);\r\n  }\r\n\r\n  const domain = utf8PercentDecode(input);\r\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\r\n  if (asciiDomain === null) {\r\n    return failure;\r\n  }\r\n\r\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\r\n    return failure;\r\n  }\r\n\r\n  const ipv4Host = parseIPv4(asciiDomain);\r\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\r\n    return ipv4Host;\r\n  }\r\n\r\n  return asciiDomain;\r\n}\r\n\r\nfunction parseOpaqueHost(input) {\r\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\r\n    return failure;\r\n  }\r\n\r\n  let output = \"\";\r\n  const decoded = punycode.ucs2.decode(input);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction findLongestZeroSequence(arr) {\r\n  let maxIdx = null;\r\n  let maxLen = 1; // only find elements > 1\r\n  let currStart = null;\r\n  let currLen = 0;\r\n\r\n  for (let i = 0; i < arr.length; ++i) {\r\n    if (arr[i] !== 0) {\r\n      if (currLen > maxLen) {\r\n        maxIdx = currStart;\r\n        maxLen = currLen;\r\n      }\r\n\r\n      currStart = null;\r\n      currLen = 0;\r\n    } else {\r\n      if (currStart === null) {\r\n        currStart = i;\r\n      }\r\n      ++currLen;\r\n    }\r\n  }\r\n\r\n  // if trailing zeros\r\n  if (currLen > maxLen) {\r\n    maxIdx = currStart;\r\n    maxLen = currLen;\r\n  }\r\n\r\n  return {\r\n    idx: maxIdx,\r\n    len: maxLen\r\n  };\r\n}\r\n\r\nfunction serializeHost(host) {\r\n  if (typeof host === \"number\") {\r\n    return serializeIPv4(host);\r\n  }\r\n\r\n  // IPv6 serializer\r\n  if (host instanceof Array) {\r\n    return \"[\" + serializeIPv6(host) + \"]\";\r\n  }\r\n\r\n  return host;\r\n}\r\n\r\nfunction trimControlChars(url) {\r\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\r\n}\r\n\r\nfunction trimTabAndNewline(url) {\r\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\r\n}\r\n\r\nfunction shortenPath(url) {\r\n  const path = url.path;\r\n  if (path.length === 0) {\r\n    return;\r\n  }\r\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\r\n    return;\r\n  }\r\n\r\n  path.pop();\r\n}\r\n\r\nfunction includesCredentials(url) {\r\n  return url.username !== \"\" || url.password !== \"\";\r\n}\r\n\r\nfunction cannotHaveAUsernamePasswordPort(url) {\r\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetter(string) {\r\n  return /^[A-Za-z]:$/.test(string);\r\n}\r\n\r\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\r\n  this.pointer = 0;\r\n  this.input = input;\r\n  this.base = base || null;\r\n  this.encodingOverride = encodingOverride || \"utf-8\";\r\n  this.stateOverride = stateOverride;\r\n  this.url = url;\r\n  this.failure = false;\r\n  this.parseError = false;\r\n\r\n  if (!this.url) {\r\n    this.url = {\r\n      scheme: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      host: null,\r\n      port: null,\r\n      path: [],\r\n      query: null,\r\n      fragment: null,\r\n\r\n      cannotBeABaseURL: false\r\n    };\r\n\r\n    const res = trimControlChars(this.input);\r\n    if (res !== this.input) {\r\n      this.parseError = true;\r\n    }\r\n    this.input = res;\r\n  }\r\n\r\n  const res = trimTabAndNewline(this.input);\r\n  if (res !== this.input) {\r\n    this.parseError = true;\r\n  }\r\n  this.input = res;\r\n\r\n  this.state = stateOverride || \"scheme start\";\r\n\r\n  this.buffer = \"\";\r\n  this.atFlag = false;\r\n  this.arrFlag = false;\r\n  this.passwordTokenSeenFlag = false;\r\n\r\n  this.input = punycode.ucs2.decode(this.input);\r\n\r\n  for (; this.pointer <= this.input.length; ++this.pointer) {\r\n    const c = this.input[this.pointer];\r\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\r\n\r\n    // exec state machine\r\n    const ret = this[\"parse \" + this.state](c, cStr);\r\n    if (!ret) {\r\n      break; // terminate algorithm\r\n    } else if (ret === failure) {\r\n      this.failure = true;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\r\n  if (isASCIIAlpha(c)) {\r\n    this.buffer += cStr.toLowerCase();\r\n    this.state = \"scheme\";\r\n  } else if (!this.stateOverride) {\r\n    this.state = \"no scheme\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\r\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\r\n    this.buffer += cStr.toLowerCase();\r\n  } else if (c === 58) {\r\n    if (this.stateOverride) {\r\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\r\n        return false;\r\n      }\r\n\r\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\r\n        return false;\r\n      }\r\n    }\r\n    this.url.scheme = this.buffer;\r\n    this.buffer = \"\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    if (this.url.scheme === \"file\") {\r\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\r\n        this.parseError = true;\r\n      }\r\n      this.state = \"file\";\r\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\r\n      this.state = \"special relative or authority\";\r\n    } else if (isSpecial(this.url)) {\r\n      this.state = \"special authority slashes\";\r\n    } else if (this.input[this.pointer + 1] === 47) {\r\n      this.state = \"path or authority\";\r\n      ++this.pointer;\r\n    } else {\r\n      this.url.cannotBeABaseURL = true;\r\n      this.url.path.push(\"\");\r\n      this.state = \"cannot-be-a-base-URL path\";\r\n    }\r\n  } else if (!this.stateOverride) {\r\n    this.buffer = \"\";\r\n    this.state = \"no scheme\";\r\n    this.pointer = -1;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\r\n  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {\r\n    return failure;\r\n  } else if (this.base.cannotBeABaseURL && c === 35) {\r\n    this.url.scheme = this.base.scheme;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.url.cannotBeABaseURL = true;\r\n    this.state = \"fragment\";\r\n  } else if (this.base.scheme === \"file\") {\r\n    this.state = \"file\";\r\n    --this.pointer;\r\n  } else {\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\r\n  if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\r\n  this.url.scheme = this.base.scheme;\r\n  if (isNaN(c)) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n  } else if (c === 47) {\r\n    this.state = \"relative slash\";\r\n  } else if (c === 63) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (isSpecial(this.url) && c === 92) {\r\n    this.parseError = true;\r\n    this.state = \"relative slash\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\r\n\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\r\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"special authority ignore slashes\";\r\n  } else if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"special authority ignore slashes\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\r\n  if (c !== 47 && c !== 92) {\r\n    this.state = \"authority\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\r\n  if (c === 64) {\r\n    this.parseError = true;\r\n    if (this.atFlag) {\r\n      this.buffer = \"%40\" + this.buffer;\r\n    }\r\n    this.atFlag = true;\r\n\r\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\r\n    const len = countSymbols(this.buffer);\r\n    for (let pointer = 0; pointer < len; ++pointer) {\r\n      const codePoint = this.buffer.codePointAt(pointer);\r\n\r\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\r\n        this.passwordTokenSeenFlag = true;\r\n        continue;\r\n      }\r\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\r\n      if (this.passwordTokenSeenFlag) {\r\n        this.url.password += encodedCodePoints;\r\n      } else {\r\n        this.url.username += encodedCodePoints;\r\n      }\r\n    }\r\n    this.buffer = \"\";\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    if (this.atFlag && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n    this.pointer -= countSymbols(this.buffer) + 1;\r\n    this.buffer = \"\";\r\n    this.state = \"host\";\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse hostname\"] =\r\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\r\n  if (this.stateOverride && this.url.scheme === \"file\") {\r\n    --this.pointer;\r\n    this.state = \"file host\";\r\n  } else if (c === 58 && !this.arrFlag) {\r\n    if (this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"port\";\r\n    if (this.stateOverride === \"hostname\") {\r\n      return false;\r\n    }\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    --this.pointer;\r\n    if (isSpecial(this.url) && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    } else if (this.stateOverride && this.buffer === \"\" &&\r\n               (includesCredentials(this.url) || this.url.port !== null)) {\r\n      this.parseError = true;\r\n      return false;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"path start\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n  } else {\r\n    if (c === 91) {\r\n      this.arrFlag = true;\r\n    } else if (c === 93) {\r\n      this.arrFlag = false;\r\n    }\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\r\n  if (isASCIIDigit(c)) {\r\n    this.buffer += cStr;\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92) ||\r\n             this.stateOverride) {\r\n    if (this.buffer !== \"\") {\r\n      const port = parseInt(this.buffer);\r\n      if (port > Math.pow(2, 16) - 1) {\r\n        this.parseError = true;\r\n        return failure;\r\n      }\r\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\r\n      this.buffer = \"\";\r\n    }\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    this.state = \"path start\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\r\n\r\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\r\n  this.url.scheme = \"file\";\r\n\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file slash\";\r\n  } else if (this.base !== null && this.base.scheme === \"file\") {\r\n    if (isNaN(c)) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n    } else if (c === 63) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    } else if (c === 35) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    } else {\r\n      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points\r\n          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||\r\n          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points\r\n           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {\r\n        this.url.host = this.base.host;\r\n        this.url.path = this.base.path.slice();\r\n        shortenPath(this.url);\r\n      } else {\r\n        this.parseError = true;\r\n      }\r\n\r\n      this.state = \"path\";\r\n      --this.pointer;\r\n    }\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file host\";\r\n  } else {\r\n    if (this.base !== null && this.base.scheme === \"file\") {\r\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\r\n        this.url.path.push(this.base.path[0]);\r\n      } else {\r\n        this.url.host = this.base.host;\r\n      }\r\n    }\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\r\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\r\n    --this.pointer;\r\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\r\n      this.parseError = true;\r\n      this.state = \"path\";\r\n    } else if (this.buffer === \"\") {\r\n      this.url.host = \"\";\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n      this.state = \"path start\";\r\n    } else {\r\n      let host = parseHost(this.buffer, isSpecial(this.url));\r\n      if (host === failure) {\r\n        return failure;\r\n      }\r\n      if (host === \"localhost\") {\r\n        host = \"\";\r\n      }\r\n      this.url.host = host;\r\n\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n\r\n      this.buffer = \"\";\r\n      this.state = \"path start\";\r\n    }\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\r\n  if (isSpecial(this.url)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"path\";\r\n\r\n    if (c !== 47 && c !== 92) {\r\n      --this.pointer;\r\n    }\r\n  } else if (!this.stateOverride && c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (!this.stateOverride && c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (c !== undefined) {\r\n    this.state = \"path\";\r\n    if (c !== 47) {\r\n      --this.pointer;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\r\n  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||\r\n      (!this.stateOverride && (c === 63 || c === 35))) {\r\n    if (isSpecial(this.url) && c === 92) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (isDoubleDot(this.buffer)) {\r\n      shortenPath(this.url);\r\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\r\n        this.url.path.push(\"\");\r\n      }\r\n    } else if (isSingleDot(this.buffer) && c !== 47 &&\r\n               !(isSpecial(this.url) && c === 92)) {\r\n      this.url.path.push(\"\");\r\n    } else if (!isSingleDot(this.buffer)) {\r\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\r\n        if (this.url.host !== \"\" && this.url.host !== null) {\r\n          this.parseError = true;\r\n          this.url.host = \"\";\r\n        }\r\n        this.buffer = this.buffer[0] + \":\";\r\n      }\r\n      this.url.path.push(this.buffer);\r\n    }\r\n    this.buffer = \"\";\r\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\r\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\r\n        this.parseError = true;\r\n        this.url.path.shift();\r\n      }\r\n    }\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    }\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\r\n  if (c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else {\r\n    // TODO: Add: not a URL code point\r\n    if (!isNaN(c) && c !== 37) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (c === 37 &&\r\n        (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n         !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (!isNaN(c)) {\r\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\r\n  if (isNaN(c) || (!this.stateOverride && c === 35)) {\r\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\r\n      this.encodingOverride = \"utf-8\";\r\n    }\r\n\r\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\r\n    for (let i = 0; i < buffer.length; ++i) {\r\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||\r\n          buffer[i] === 0x3C || buffer[i] === 0x3E) {\r\n        this.url.query += percentEncode(buffer[i]);\r\n      } else {\r\n        this.url.query += String.fromCodePoint(buffer[i]);\r\n      }\r\n    }\r\n\r\n    this.buffer = \"\";\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\r\n  if (isNaN(c)) { // do nothing\r\n  } else if (c === 0x0) {\r\n    this.parseError = true;\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction serializeURL(url, excludeFragment) {\r\n  let output = url.scheme + \":\";\r\n  if (url.host !== null) {\r\n    output += \"//\";\r\n\r\n    if (url.username !== \"\" || url.password !== \"\") {\r\n      output += url.username;\r\n      if (url.password !== \"\") {\r\n        output += \":\" + url.password;\r\n      }\r\n      output += \"@\";\r\n    }\r\n\r\n    output += serializeHost(url.host);\r\n\r\n    if (url.port !== null) {\r\n      output += \":\" + url.port;\r\n    }\r\n  } else if (url.host === null && url.scheme === \"file\") {\r\n    output += \"//\";\r\n  }\r\n\r\n  if (url.cannotBeABaseURL) {\r\n    output += url.path[0];\r\n  } else {\r\n    for (const string of url.path) {\r\n      output += \"/\" + string;\r\n    }\r\n  }\r\n\r\n  if (url.query !== null) {\r\n    output += \"?\" + url.query;\r\n  }\r\n\r\n  if (!excludeFragment && url.fragment !== null) {\r\n    output += \"#\" + url.fragment;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction serializeOrigin(tuple) {\r\n  let result = tuple.scheme + \"://\";\r\n  result += serializeHost(tuple.host);\r\n\r\n  if (tuple.port !== null) {\r\n    result += \":\" + tuple.port;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports.serializeURL = serializeURL;\r\n\r\nmodule.exports.serializeURLOrigin = function (url) {\r\n  // https://url.spec.whatwg.org/#concept-url-origin\r\n  switch (url.scheme) {\r\n    case \"blob\":\r\n      try {\r\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\r\n      } catch (e) {\r\n        // serializing an opaque origin returns \"null\"\r\n        return \"null\";\r\n      }\r\n    case \"ftp\":\r\n    case \"gopher\":\r\n    case \"http\":\r\n    case \"https\":\r\n    case \"ws\":\r\n    case \"wss\":\r\n      return serializeOrigin({\r\n        scheme: url.scheme,\r\n        host: url.host,\r\n        port: url.port\r\n      });\r\n    case \"file\":\r\n      // spec says \"exercise to the reader\", chrome says \"file://\"\r\n      return \"file://\";\r\n    default:\r\n      // serializing an opaque origin returns \"null\"\r\n      return \"null\";\r\n  }\r\n};\r\n\r\nmodule.exports.basicURLParse = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\r\n  if (usm.failure) {\r\n    return \"failure\";\r\n  }\r\n\r\n  return usm.url;\r\n};\r\n\r\nmodule.exports.setTheUsername = function (url, username) {\r\n  url.username = \"\";\r\n  const decoded = punycode.ucs2.decode(username);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.setThePassword = function (url, password) {\r\n  url.password = \"\";\r\n  const decoded = punycode.ucs2.decode(password);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.serializeHost = serializeHost;\r\n\r\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\r\n\r\nmodule.exports.serializeInteger = function (integer) {\r\n  return String(integer);\r\n};\r\n\r\nmodule.exports.parseURL = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  // We don't handle blobs, so this just delegates:\r\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\r\n};\r\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/whatwg-url/lib/url-state-machine.js?");

/***/ }),

/***/ "./node_modules/whatwg-url/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/utils.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\n\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\n\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\n\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};\n\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/whatwg-url/lib/utils.js?");

/***/ }),

/***/ "./node_modules/xtend/mutable.js":
/*!***************************************!*\
  !*** ./node_modules/xtend/mutable.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/xtend/mutable.js?");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const path = __webpack_require__(/*! path */ \"path\");\nconst Process = __webpack_require__(/*! process */ \"process\");\nconst dotenvPath = path.resolve(__dirname, '../', '.env'); // Замените 'config' на ваш путь\n(__webpack_require__(/*! dotenv */ \"./node_modules/dotenv/lib/main.js\").config)({\n  path: dotenvPath\n});\nconst databaseConfig = {\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  host: process.env.DB_HOST,\n  port: parseInt(process.env.DB_PORT),\n  database: process.env.DATABASE\n};\nconst botConfig = {\n  botToken: process.env.BOT_TOKEN\n};\nmodule.exports = {\n  databaseConfig,\n  botConfig\n};\n\n//# sourceURL=webpack://ai-lovly-guu/./src/config.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  Scenes,\n  Telegraf,\n  session,\n  Markup\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst {\n  botConfig,\n  databaseConfig\n} = __webpack_require__(/*! ./config */ \"./src/config.js\");\nconst Database = __webpack_require__(/*! ../src/services/DatabaseService */ \"./src/services/DatabaseService.js\");\nconst CreateProfileScene = __webpack_require__(/*! ../src/services/scenes/createProfileScene */ \"./src/services/scenes/createProfileScene.js\");\nconst FindProfileScene = __webpack_require__(/*! ../src/services/scenes/findProfileScene */ \"./src/services/scenes/findProfileScene.js\");\nconst MatchScene = __webpack_require__(/*! ../src/services/scenes/matchScene */ \"./src/services/scenes/matchScene.js\");\nconst {\n  UserRepository\n} = __webpack_require__(/*! ./services/DatabaseRepository */ \"./src/services/DatabaseRepository.js\");\nconst {\n  startMenu,\n  firstMenu\n} = __webpack_require__(/*! ./services/Menu */ \"./src/services/Menu.js\");\nconst DeleteProfileScene = __webpack_require__(/*! ./services/scenes/deleteProfileScene */ \"./src/services/scenes/deleteProfileScene.js\");\nconst LikeScene = __webpack_require__(/*! ./services/scenes/likeScene */ \"./src/services/scenes/likeScene.js\");\nconst db = Database.getInstance(databaseConfig);\nfunction mainBot2() {\n  const createProfileWizard = new CreateProfileScene().createScene();\n  const findProfileWizard = new FindProfileScene().createScene();\n  const matchWizard = new MatchScene().createScene();\n  const deleteProfileWiard = new DeleteProfileScene().createScene();\n  const likeWizard = new LikeScene().createScene();\n  const stage = new Scenes.Stage([createProfileWizard, findProfileWizard, matchWizard, deleteProfileWiard]);\n  const bot = new Telegraf(botConfig.botToken);\n  const userRepository = new UserRepository();\n  bot.use(session());\n  bot.use(stage.middleware());\n  bot.hears('Создать анкету', ctx => ctx.scene.enter('createProfileWizard'));\n  bot.hears('Пересоздать анкету', ctx => ctx.scene.enter('createProfileWizard'));\n  bot.hears('Поиск', ctx => ctx.scene.enter('findProfileScene'));\n  bot.hears('Взаимные симпатии', ctx => ctx.scene.enter('matchScene'));\n  bot.hears('Удалить анкету', ctx => ctx.scene.enter('deleteProfile'));\n  bot.start(async ctx => {\n    try {\n      if ((await userRepository.findByTelegramId(ctx.from.id)) !== null) {\n        await ctx.reply(\":)\", startMenu.oneTime().resize());\n      } else {\n        await ctx.reply(firstMenu.oneTime().resize());\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n  bot.launch();\n}\nmainBot2();\n\n//# sourceURL=webpack://ai-lovly-guu/./src/main.js?");

/***/ }),

/***/ "./src/services/DatabaseRepository.js":
/*!********************************************!*\
  !*** ./src/services/DatabaseRepository.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Database = __webpack_require__(/*! ./DatabaseService */ \"./src/services/DatabaseService.js\");\nclass UserRepository {\n  constructor() {\n    this.db = Database.getInstance();\n  }\n  async findByTelegramId(telegram_id) {\n    const result = await this.db.query(`SELECT * FROM \"user\" WHERE telegram_id = $1`, [telegram_id]);\n    return result[0] || null;\n  }\n  async find(id) {\n    const result = await this.db.query(`SELECT * FROM \"user\" WHERE id = $1`, [id]);\n    return result[0] || null;\n  }\n  async findAll() {\n    return await this.db.query(`SELECT * FROM \"user\"`);\n  }\n}\nclass LikeRepository {\n  constructor() {\n    this.db = Database.getInstance();\n  }\n  async findLikeSender(id) {\n    //const result = await this.db.query(`SELECT * FROM \"like\" WHERE who_liked_user = $1 AND is_like = false LIMIT 1 OFFSET 0`, [id])\n    const result = await this.db.query(`SELECT *\nFROM \"like\"\nWHERE who_liked_user = $1\n  AND rate = true\n  AND NOT EXISTS (\n    SELECT 1\n    FROM \"like\" AS t2\n    WHERE t2.user_id = \"like\".who_liked_user\n      AND t2.who_liked_user = \"like\".user_id\n      AND t2.is_done = true\n      AND t2.is_like = true\n  );\n`, [id]);\n    return result || null;\n  }\n  async findMatch(id) {\n    const result = await this.db.query(`\n    SELECT * \n    FROM \"like\"\n    WHERE \n      EXISTS (\n        SELECT 1 \n        FROM \"like\" AS t2\n        WHERE \n          t2.user_id = \"like\".who_liked_user\n          AND t2.who_liked_user = \"like\".user_id\n          AND t2.rate = true\n      )\n      AND rate = true \n      AND \"like\".user_id =$1\n      AND \"like\".is_done <> true \n        LIMIT 1 OFFSET $2;\n  `, [id, 0]);\n    return result || null;\n  }\n  async findAllMatch() {\n    return await this.db.query(`\n    SELECT * \n    FROM \"like\"\n    WHERE \n      EXISTS (\n        SELECT 1 \n        FROM \"like\" AS t2\n        WHERE \n          t2.user_id = \"like\".who_liked_user\n          AND t2.who_liked_user = \"like\".user_id\n          AND t2.rate = true\n      )\n      AND rate = true \n  `);\n  }\n  async findNoLike(user_id, gender, offset) {\n    return await this.db.query(`SELECT \"user\".*\n   FROM \"user\"\n   LEFT JOIN \"like\" ON \"user\".id = \"like\".who_liked_user AND \"like\".user_id = $1\n   WHERE \"like\".id IS NULL AND \"user\".id != $1 AND \"user\".gender <> $2 LIMIT 1 OFFSET $3;`, [user_id, gender, offset]);\n  }\n}\nmodule.exports = {\n  UserRepository,\n  LikeRepository\n};\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/DatabaseRepository.js?");

/***/ }),

/***/ "./src/services/DatabaseService.js":
/*!*****************************************!*\
  !*** ./src/services/DatabaseService.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const pgPromise = __webpack_require__(/*! pg-promise */ \"./node_modules/pg-promise/lib/index.js\");\nclass Database {\n  constructor(config) {\n    const pgp = pgPromise();\n    this.db = pgp(config);\n  }\n  static getInstance(config) {\n    if (!Database.instance) {\n      Database.instance = new Database(config);\n    }\n    return Database.instance;\n  }\n  getDB() {\n    return this.db;\n  }\n  async query(sql, values) {\n    try {\n      return await this.db.any(sql, values);\n    } catch (error) {\n      console.error('Error executing SQL query:', error);\n      throw error;\n    }\n  }\n}\nmodule.exports = Database;\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/DatabaseService.js?");

/***/ }),

/***/ "./src/services/ManagerServices.js":
/*!*****************************************!*\
  !*** ./src/services/ManagerServices.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Database = __webpack_require__(/*! ./DatabaseService */ \"./src/services/DatabaseService.js\");\nclass UserManager {\n  constructor() {\n    this.db = Database.getInstance();\n  }\n  async create(item) {\n    try {\n      const result = await this.db.getDB().one('INSERT INTO \"user\"(name, age, photo, description, telegram_id, gender, username, faculty, course) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *', [item.name, item.age, item.photo, item.description, item.telegram_id, item.gender, item.username, item.faculty, item.course]);\n      console.log('Item created:', result);\n      return result;\n    } catch (error) {\n      console.error('Error creating item:', error);\n      throw error;\n    }\n  }\n  async update(id, updatedItem) {\n    try {\n      const result = await this.db.getDB().one('UPDATE \"user\" SET name = $1, age = $2, photo = $3, description = $4 WHERE id = $5 RETURNING *', [updatedItem.name, updatedItem.age, updatedItem.photo, updatedItem.description, id]);\n      console.log('Item updated:', result);\n      return result;\n    } catch (error) {\n      console.error('Error updating item:', error);\n      throw error;\n    }\n  }\n  async delete(id) {\n    try {\n      const result = await this.db.query('DELETE FROM \"user\" WHERE id = $1 RETURNING *', [id]);\n      console.log('Item deleted:', result);\n      return result;\n    } catch (error) {\n      console.error('Error deleting item:', error);\n      throw error;\n    }\n  }\n}\nclass LikeManager {\n  constructor() {\n    this.db = Database.getInstance();\n  }\n  async create(likeData) {\n    try {\n      const result = await this.db.getDB().one('INSERT INTO \"like\" (user_id, who_liked_user, rate, is_done, is_like) VALUES($1, $2, $3, $4, $5) RETURNING *', [likeData.user_id, likeData.who_liked_user, likeData.rate, likeData.is_done, likeData.is_like]);\n      console.log('Like created:', result);\n      return result;\n    } catch (error) {\n      console.error('Error creating like:', error);\n      throw error;\n    }\n  }\n  async update(user_id, isDone) {\n    try {\n      const result = await this.db.query(`UPDATE \"like\" SET is_done = $1 WHERE who_liked_user = $2 RETURNING *`, [isDone, user_id]);\n      return result;\n    } catch (error) {\n      console.error('Error updating like:', error);\n      throw error;\n    }\n  }\n  async updateDone(user_id, who_liked_user) {\n    //likeSender, currentUser\n    try {\n      const result = await this.db.query(\n      //user_id = 17, who_liked_user = 18\n      `UPDATE \"like\" SET is_done = true WHERE user_id = $1 AND who_liked_user = $2 RETURNING *`, [user_id, who_liked_user]);\n      return result;\n    } catch (error) {\n      console.error('Error updating like:', error);\n      throw error;\n    }\n  }\n  async updateLike(user_id, who_liked_user) {\n    //current user, likeSEnder\n    try {\n      const result = await this.db.query(\n      //user_id = 17, who_liked_user = 18\n      `UPDATE \"like\" SET is_like = true WHERE user_id = $1 AND who_liked_user = $2 RETURNING *`, [user_id, who_liked_user]);\n      return result;\n    } catch (error) {\n      console.error('Error updating like:', error);\n      throw error;\n    }\n  }\n  async deleteLike(user_id, who_liked_user) {\n    //likeSender, currentUser\n    try {\n      const result = await this.db.query(\n      //user_id = 17, who_liked_user = 18\n      `UPDATE \"like\" SET is_like = true WHERE user_id = $1 AND who_liked_user = $2 RETURNING *`, [user_id, who_liked_user]);\n      return result;\n    } catch (error) {\n      console.error('Error updating like:', error);\n      throw error;\n    }\n  }\n  async delete(user_id) {\n    try {\n      const result = await this.db.query('DELETE FROM \"like\" WHERE user_id = $1 RETURNING *', [user_id]);\n      console.log('Like deleted:', result);\n      return result;\n    } catch (error) {\n      console.error('Error deleting like:', error);\n      throw error;\n    }\n  }\n}\nmodule.exports = {\n  LikeManager,\n  UserManager\n};\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/ManagerServices.js?");

/***/ }),

/***/ "./src/services/Menu.js":
/*!******************************!*\
  !*** ./src/services/Menu.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  Markup\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst firstMenu = Markup.keyboard([['Создать анкету']]);\nconst startMenu = Markup.keyboard([['Поиск', 'Взаимные симпатии'], ['Пересоздать анкету', 'Удалить анкету']]);\nconst matchMenu = Markup.keyboard([['Перейти к следующей анкете'], ['Выйти']]);\nconst likeSceneMenu = Markup.keyboard([['Лайк', 'Дизлайк'], ['Выйти']]);\nmodule.exports = {\n  startMenu,\n  firstMenu,\n  likeSceneMenu,\n  matchMenu\n};\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/Menu.js?");

/***/ }),

/***/ "./src/services/scenes/createProfileScene.js":
/*!***************************************************!*\
  !*** ./src/services/scenes/createProfileScene.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  Composer,\n  Markup,\n  Scenes\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst {\n  UserManager\n} = __webpack_require__(/*! ../ManagerServices */ \"./src/services/ManagerServices.js\");\nconst {\n  UserRepository\n} = __webpack_require__(/*! ../DatabaseRepository */ \"./src/services/DatabaseRepository.js\");\nconst {\n  startMenu\n} = __webpack_require__(/*! ../Menu */ \"./src/services/Menu.js\");\nclass CreateProfileScene {\n  createScene() {\n    const start = new Composer();\n    const faculty = new Composer();\n    const course = new Composer();\n    const gender = new Composer();\n    const name = new Composer();\n    const age = new Composer();\n    const photo = new Composer();\n    const description = new Composer();\n    const userManager = new UserManager();\n    const userRepository = new UserRepository();\n    start.on('text', async ctx => {\n      try {\n        ctx.wizard.state.data = {};\n        await ctx.reply('Введите ваше имя:');\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    name.on('text', async ctx => {\n      try {\n        const name = ctx.message.text;\n        const isValidName = /^[a-zA-Zа-яА-ЯёЁ]+$/.test(name);\n        console.log(name);\n        if (name.length > 30) {\n          await ctx.reply('Имя слишком длинное. Максимальная длина - 30 символов. Попробуйте снова.');\n          return;\n        }\n        if (!isValidName) {\n          await ctx.reply('Имя может содержать только русские или английские буквы. Попробуйте снова.');\n          return;\n        }\n        ctx.wizard.state.data.name = name;\n        await ctx.reply('Введите ваш возраст:');\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    age.on('text', async ctx => {\n      try {\n        const age = ctx.message.text;\n        if (isNaN(age) || age <= 0 || age > 65) {\n          await ctx.reply('Некорректный возраст. Пожалуйста, введите число от 1 до 65.');\n          return;\n        }\n        ctx.wizard.state.data.age = age;\n        await ctx.reply('Выберите ваш пол:', Markup.keyboard([['Мужской'], ['Женский']]).oneTime().resize());\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    gender.hears(['Мужской', 'Женский'], async ctx => {\n      try {\n        ctx.wizard.state.data.gender = ctx.message.text;\n        const keyboardOptions = {\n          columns: 2 // Количество столбцов кнопок\n        };\n        const facultyKeyboard = Markup.keyboard(['💻ИИС', '💹ИЭФ', '🤝ИУПСиБК', '📈ИМ', '🏭ИОМ', '⚖ИГУиП'], keyboardOptions);\n        await ctx.reply('Выберите факультет:', facultyKeyboard.oneTime().resize());\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    faculty.hears(['💻ИИС', '💹ИЭФ', '🤝ИУПСиБК', '📈ИМ', '🏭ИОМ', '⚖ИГУиП'], async ctx => {\n      try {\n        ctx.wizard.state.data.faculty = ctx.message.text;\n        const keyboardOptions = {\n          columns: 2 // Количество столбцов кнопок\n        };\n        const courseKeyboard = Markup.keyboard(['1', '2', '3', '4', '1М', '2М'], keyboardOptions).oneTime().resize();\n        await ctx.reply('Выберите курс:', courseKeyboard);\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    course.hears(['1', '2', '3', '4', '1М', '2М'], async ctx => {\n      try {\n        ctx.wizard.state.data.course = ctx.message.text;\n        await ctx.reply('Отправьте фотографию:');\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    photo.on('text', async ctx => {\n      try {\n        await ctx.reply('Я жду фото!!!!');\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    photo.on('photo', async ctx => {\n      try {\n        ctx.wizard.state.data.photo = ctx.message.photo[0].file_id;\n        await ctx.reply('Расскажите о себе:');\n        return ctx.wizard.next();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    description.on('text', async ctx => {\n      try {\n        const description = ctx.message.text;\n        const sanitizedDescription = description.replace(/<.*?>/g, '') // Удалить HTML-теги\n        .replace(/\\/\\w+/g, '').replace(/@/g, '').replace(/https ?:\\/\\/\\S+/g, '');\n        if (description.length > 250) {\n          await ctx.reply('Описание слишком длинное. Максимальная длина - 250 символов. Попробуйте снова.');\n          return;\n        }\n        ctx.wizard.state.data.description = sanitizedDescription;\n        const user = await userRepository.findByTelegramId(ctx.from.id);\n        if (user !== null) {\n          await userManager.delete(user.id);\n        }\n        await userManager.create({\n          name: ctx.wizard.state.data.name,\n          age: ctx.wizard.state.data.age,\n          gender: ctx.wizard.state.data.gender,\n          faculty: ctx.wizard.state.data.faculty,\n          course: ctx.wizard.state.data.course,\n          photo: ctx.wizard.state.data.photo,\n          description: ctx.wizard.state.data.description,\n          telegram_id: ctx.from.id,\n          username: ctx.from.username\n        });\n        const formattedDescription = `\n║ *Имя:* ${ctx.wizard.state.data.name}\n║ *Возраст:* ${ctx.wizard.state.data.age}\n║ *Пол:* ${ctx.wizard.state.data.gender}\n║ *Факультет:* ${ctx.wizard.state.data.faculty}\n║ *Курс:* ${ctx.wizard.state.data.course}\n║ *Описание:* ${ctx.wizard.state.data.description}\n`;\n        await ctx.replyWithPhoto(ctx.wizard.state.data.photo, {\n          caption: formattedDescription,\n          parse_mode: 'Markdown'\n        });\n        await ctx.reply('Супер! Анкета создана :)', startMenu.oneTime().resize());\n        return ctx.scene.leave();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    return new Scenes.WizardScene('createProfileWizard', start, name, age, gender, faculty, course, photo, description);\n  }\n}\nmodule.exports = CreateProfileScene;\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/scenes/createProfileScene.js?");

/***/ }),

/***/ "./src/services/scenes/deleteProfileScene.js":
/*!***************************************************!*\
  !*** ./src/services/scenes/deleteProfileScene.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  Composer,\n  Markup,\n  Scenes\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst {\n  UserManager\n} = __webpack_require__(/*! ../ManagerServices */ \"./src/services/ManagerServices.js\");\nconst {\n  UserRepository\n} = __webpack_require__(/*! ../DatabaseRepository */ \"./src/services/DatabaseRepository.js\");\nconst {\n  startMenu,\n  firstMenu\n} = __webpack_require__(/*! ../Menu */ \"./src/services/Menu.js\");\nclass DeleteProfileScene {\n  createScene() {\n    const start = new Composer();\n    const choice = new Composer();\n    const userManager = new UserManager();\n    const userRepository = new UserRepository();\n    start.on('text', async ctx => {\n      try {\n        const keyboardOptions = {\n          columns: 2 // Количество столбцов кнопок\n        };\n        await ctx.reply('При удалении анкеты ты выходишь из поиска, и чтобы вернутся обратно, нужно будет создать новую');\n        const choiceKeyboard = Markup.keyboard(['Да', 'Нет'], keyboardOptions);\n        await ctx.reply('Ты действительно хочешь удалить?', choiceKeyboard.oneTime().resize());\n        return ctx.wizard.next();\n      } catch (e) {\n        await ctx.reply(`Произошла ошибка, ${e}`);\n        return ctx.scene.leave();\n      }\n    });\n    choice.hears('Да', async ctx => {\n      try {\n        const user = await userRepository.findByTelegramId(ctx.from.id);\n        if (user !== null) {\n          await userManager.delete(user.id);\n          ctx.reply('Анкета удалена успешно!', firstMenu.oneTime().resize());\n        } else {\n          ctx.reply('Анкета не найдена');\n        }\n        return ctx.scene.leave();\n      } catch (e) {\n        await ctx.reply(`Произошла ошибка, ${e}`);\n        return ctx.scene.leave();\n      }\n    });\n    choice.hears('Нет', async ctx => {\n      await ctx.reply(':)', startMenu.oneTime().resize());\n      return ctx.scene.leave();\n    });\n    return new Scenes.WizardScene('deleteProfile', start, choice);\n  }\n}\nmodule.exports = DeleteProfileScene;\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/scenes/deleteProfileScene.js?");

/***/ }),

/***/ "./src/services/scenes/findProfileScene.js":
/*!*************************************************!*\
  !*** ./src/services/scenes/findProfileScene.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  Composer,\n  Scenes,\n  Markup\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst Database = __webpack_require__(/*! ../DatabaseService */ \"./src/services/DatabaseService.js\");\nconst {\n  databaseConfig\n} = __webpack_require__(/*! ../../config */ \"./src/config.js\");\nconst {\n  UserRepository,\n  LikeRepository\n} = __webpack_require__(/*! ../DatabaseRepository */ \"./src/services/DatabaseRepository.js\");\nconst {\n  LikeManager\n} = __webpack_require__(/*! ../ManagerServices */ \"./src/services/ManagerServices.js\");\nconst {\n  startMenu\n} = __webpack_require__(/*! ../Menu */ \"./src/services/Menu.js\");\nclass FindProfileScene {\n  constructor() {\n    this.db = Database.getInstance(databaseConfig);\n    this.offset = 0;\n  }\n  createScene() {\n    const start = new Composer();\n    const choice = new Composer();\n    const userRepository = new UserRepository();\n    const likeRepository = new LikeRepository();\n    const likeManager = new LikeManager();\n    const findMenu = Markup.keyboard([['Лайк', 'Дизлайк'], ['Остановить поиск']]);\n    start.on('text', async ctx => {\n      const currentUser = await userRepository.findByTelegramId(ctx.from.id);\n      if (currentUser === null) {\n        await ctx.reply(\"Нужно создать анкету)\", Markup.keyboard([['Создать анкету']]).oneTime().resize());\n        return ctx.scene.leave();\n      }\n      const result = await likeRepository.findNoLike(currentUser.id, currentUser.gender, this.offset);\n      const user = result[0];\n      if (user === undefined) {\n        await ctx.reply('Записи в БД закончились, новых анкет пока не создали...');\n        await ctx.reply('Но не переживай, скоро появятся :)', startMenu.oneTime().resize());\n        return ctx.scene.leave();\n      }\n      ctx.wizard.state.data = {\n        user_id: currentUser.id,\n        who_liked_user: user.id,\n        offset: this.offset\n      };\n      const userInfo = `\n║ *Имя:* ${user.name}\n║ *Возраст:* ${user.age}\n║ *Институт:* ${user.faculty}\n║ *Курс:* ${user.course}\n║ *Описание:* ${user.description}\n`;\n      try {\n        await ctx.replyWithPhoto(user.photo, {\n          caption: userInfo,\n          parse_mode: 'Markdown'\n        });\n      } catch (e) {\n        console.log(e);\n      }\n      await ctx.reply(\"ヽ(°□° )ノ\", findMenu.oneTime().resize());\n      return ctx.wizard.next();\n    });\n    choice.hears('Остановить поиск', async ctx => {\n      await ctx.reply(':)', startMenu.oneTime().resize());\n      return ctx.scene.leave();\n    });\n    choice.hears('Лайк', async ctx => {\n      await likeManager.create({\n        user_id: ctx.wizard.state.data.user_id,\n        who_liked_user: ctx.wizard.state.data.who_liked_user,\n        rate: true,\n        is_done: false,\n        is_like: false\n      });\n      const likeRecipient = await userRepository.find(ctx.wizard.state.data.who_liked_user);\n      console.log(likeRecipient, 'лайкер');\n      await ctx.telegram.sendMessage(likeRecipient.telegram_id, 'Тебя кто-то лайкнул :)');\n      return ctx.scene.enter('findProfileScene');\n    });\n    choice.hears('Дизлайк', async ctx => {\n      await likeManager.create({\n        user_id: ctx.wizard.state.data.user_id,\n        who_liked_user: ctx.wizard.state.data.who_liked_user,\n        rate: false,\n        is_done: false,\n        is_like: false\n      });\n      return ctx.scene.enter('findProfileScene');\n    });\n    return new Scenes.WizardScene('findProfileScene', start, choice);\n  }\n}\nmodule.exports = FindProfileScene;\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/scenes/findProfileScene.js?");

/***/ }),

/***/ "./src/services/scenes/likeScene.js":
/*!******************************************!*\
  !*** ./src/services/scenes/likeScene.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Database = __webpack_require__(/*! ../DatabaseService */ \"./src/services/DatabaseService.js\");\nconst {\n  databaseConfig\n} = __webpack_require__(/*! ../../config */ \"./src/config.js\");\nconst {\n  Composer,\n  Markup,\n  Scenes\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst {\n  UserRepository,\n  LikeRepository\n} = __webpack_require__(/*! ../DatabaseRepository */ \"./src/services/DatabaseRepository.js\");\nconst {\n  LikeManager\n} = __webpack_require__(/*! ../ManagerServices */ \"./src/services/ManagerServices.js\");\nconst {\n  startMenu,\n  createMenu,\n  likeSceneMenu\n} = __webpack_require__(/*! ../Menu */ \"./src/services/Menu.js\");\nclass LikeScene {\n  constructor() {\n    this.db = Database.getInstance(databaseConfig);\n  }\n  createScene() {\n    const start = new Composer();\n    const choice = new Composer();\n    const likeRepository = new LikeRepository();\n    const userRepository = new UserRepository();\n    const likeManager = new LikeManager();\n    start.on('text', async ctx => {\n      try {\n        const currentUser = await userRepository.findByTelegramId(ctx.from.id);\n        console.log(currentUser);\n        const likeValue = await likeRepository.findLikeSender(currentUser.id); //WHO_LIKED_USER = currentUser\n        if (likeValue[0] === undefined) {\n          await ctx.reply('Лайков пока нет...');\n          await ctx.reply('Но не переживай, скоро появятся :)', startMenu.oneTime().resize());\n          return ctx.scene.leave();\n        }\n        const likeSender = await userRepository.find(likeValue[0].user_id);\n        ctx.wizard.state.data = {\n          user_id: likeValue[0].user_id,\n          //like sender\n          who_liked_user: likeValue[0].who_liked_user,\n          //current user\n          likeSenderUsername: likeSender.username\n        };\n        const formattedUserInfo = `\n║ *Имя:* ${likeSender.name}\n║ *Возраст:* ${likeSender.age}\n║ *Институт:* ${likeSender.faculty}\n║ *Курс:* ${likeSender.course}\n║ *Описание:* ${likeSender.description}\n`;\n        try {\n          await ctx.replyWithPhoto(likeSender.photo, {\n            caption: formattedUserInfo,\n            parse_mode: 'Markdown'\n          });\n        } catch (e) {\n          console.log(e);\n        }\n        await ctx.reply(\"ヽ(°□° )ノ\", likeSceneMenu.oneTime().resize());\n        return ctx.wizard.next();\n      } catch (e) {}\n    });\n    choice.hears('Лайк', async ctx => {\n      await likeManager.delete(ctx.wizard.state.data.who_liked_user, ctx.wizard.state.data.user_id);\n      await likeManager.create({\n        user_id: ctx.wizard.state.data.who_liked_user,\n        //current user 17\n        who_liked_user: ctx.wizard.state.data.user_id,\n        //like sender 18\n        rate: true,\n        is_done: false,\n        is_like: false\n      });\n      await likeManager.updateLike(ctx.wizard.state.data.who_liked_user, ctx.wizard.state.data.user_id);\n      await likeManager.updateDone(ctx.wizard.state.data.who_liked_user, ctx.wizard.state.data.user_id);\n      await ctx.reply(`Ник :) @${ctx.wizard.state.data.likeSenderUsername}`);\n      return ctx.scene.enter('likeScene');\n    });\n    choice.hears('Дизлайк', async ctx => {\n      await likeManager.create({\n        user_id: ctx.wizard.state.data.who_liked_user,\n        who_liked_user: ctx.wizard.state.data.user_id,\n        rate: false,\n        is_done: false,\n        is_like: false\n      });\n      await likeManager.updateLike(ctx.wizard.state.data.user_id, ctx.wizard.state.data.who_liked_user);\n      await likeManager.updateDone(ctx.wizard.state.data.user_id, ctx.wizard.state.data.who_liked_user);\n      return ctx.scene.enter('likeScene');\n    });\n    choice.hears('Выйти', async ctx => {\n      await ctx.reply(':)', startMenu.oneTime().resize());\n      return ctx.scene.leave();\n    });\n    return new Scenes.WizardScene('likeScene', start, choice);\n  }\n}\nmodule.exports = LikeScene;\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/scenes/likeScene.js?");

/***/ }),

/***/ "./src/services/scenes/matchScene.js":
/*!*******************************************!*\
  !*** ./src/services/scenes/matchScene.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Database = __webpack_require__(/*! ../DatabaseService */ \"./src/services/DatabaseService.js\");\nconst {\n  databaseConfig\n} = __webpack_require__(/*! ../../config */ \"./src/config.js\");\nconst {\n  Composer,\n  Markup,\n  Scenes\n} = __webpack_require__(/*! telegraf */ \"./node_modules/telegraf/lib/index.js\");\nconst {\n  UserRepository,\n  LikeRepository\n} = __webpack_require__(/*! ../DatabaseRepository */ \"./src/services/DatabaseRepository.js\");\nconst {\n  LikeManager\n} = __webpack_require__(/*! ../ManagerServices */ \"./src/services/ManagerServices.js\");\nconst {\n  startMenu,\n  matchMenu\n} = __webpack_require__(/*! ../Menu */ \"./src/services/Menu.js\");\nclass MatchScene {\n  constructor() {\n    this.db = Database.getInstance(databaseConfig);\n  }\n  createScene() {\n    const start = new Composer();\n    const choice = new Composer();\n    const likeRepository = new LikeRepository();\n    const userRepository = new UserRepository();\n    const likeManager = new LikeManager();\n    start.on('text', async ctx => {\n      try {\n        const matchedUser = await userRepository.findByTelegramId(ctx.from.id);\n        const likeValue = await likeRepository.findMatch(matchedUser.id);\n        const user = await userRepository.find(likeValue[0].who_liked_user);\n        ctx.wizard.state.data = {\n          user: user\n        };\n        console.log(user);\n        const formattedUserInfo = `\n║ *Имя:* ${user.name}\n║ *Возраст:* ${user.age}\n║ *Институт:* ${user.faculty}\n║ *Курс:* ${user.course}\n║ *Описание:* ${user.description}\n`;\n        console.log(user.photo);\n        try {\n          await ctx.replyWithPhoto(user.photo, {\n            caption: formattedUserInfo,\n            parse_mode: 'Markdown'\n          });\n          await ctx.reply(`@${user.username}`);\n        } catch (e) {\n          console.log(e);\n        }\n        await ctx.reply(\":)\", matchMenu.oneTime().resize());\n        return ctx.wizard.next();\n      } catch (e) {\n        const noLike = 'Cannot read properties of undefined (reading \\'who_liked_user\\')';\n        if (e instanceof Error && e.message === noLike) {\n          await ctx.reply(\"Взаимных симпатий пока нет, но ты не растраивайся, будут-будут :)\", startMenu.oneTime().resize());\n          return ctx.scene.leave();\n        }\n      }\n    });\n    choice.hears('Выйти', async ctx => {\n      await ctx.reply(':)', startMenu.oneTime().resize());\n      return ctx.scene.leave();\n    });\n    choice.hears('Перейти к следующей анкете', async ctx => {\n      await likeManager.update(ctx.wizard.state.data.user.id, true);\n      return ctx.scene.enter('matchScene');\n    });\n    return new Scenes.WizardScene('matchScene', start, choice);\n  }\n}\nmodule.exports = MatchScene;\n\n//# sourceURL=webpack://ai-lovly-guu/./src/services/scenes/matchScene.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/button.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/button.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.webApp = exports.login = exports.pay = exports.game = exports.switchToCurrentChat = exports.switchToChat = exports.callback = exports.url = exports.channelRequest = exports.groupRequest = exports.botRequest = exports.userRequest = exports.pollRequest = exports.locationRequest = exports.contactRequest = exports.text = void 0;\nfunction text(text, hide = false) {\n    return { text, hide };\n}\nexports.text = text;\nfunction contactRequest(text, hide = false) {\n    return { text, request_contact: true, hide };\n}\nexports.contactRequest = contactRequest;\nfunction locationRequest(text, hide = false) {\n    return { text, request_location: true, hide };\n}\nexports.locationRequest = locationRequest;\nfunction pollRequest(text, type, hide = false) {\n    return { text, request_poll: { type }, hide };\n}\nexports.pollRequest = pollRequest;\nfunction userRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, user_is_premium, hide = false) {\n    return { text, request_user: { request_id, user_is_premium }, hide };\n}\nexports.userRequest = userRequest;\nfunction botRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, hide = false) {\n    return { text, request_user: { request_id, user_is_bot: true }, hide };\n}\nexports.botRequest = botRequest;\nfunction groupRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, extra, hide = false) {\n    return {\n        text,\n        request_chat: { request_id, chat_is_channel: false, ...extra },\n        hide,\n    };\n}\nexports.groupRequest = groupRequest;\nfunction channelRequest(text, \n/** Must fit in a signed 32 bit int */\nrequest_id, extra, hide = false) {\n    return {\n        text,\n        request_chat: { request_id, chat_is_channel: true, ...extra },\n        hide,\n    };\n}\nexports.channelRequest = channelRequest;\nfunction url(text, url, hide = false) {\n    return { text, url, hide };\n}\nexports.url = url;\nfunction callback(text, data, hide = false) {\n    return { text, callback_data: data, hide };\n}\nexports.callback = callback;\nfunction switchToChat(text, value, hide = false) {\n    return { text, switch_inline_query: value, hide };\n}\nexports.switchToChat = switchToChat;\nfunction switchToCurrentChat(text, value, hide = false) {\n    return { text, switch_inline_query_current_chat: value, hide };\n}\nexports.switchToCurrentChat = switchToCurrentChat;\nfunction game(text, hide = false) {\n    return { text, callback_game: {}, hide };\n}\nexports.game = game;\nfunction pay(text, hide = false) {\n    return { text, pay: true, hide };\n}\nexports.pay = pay;\nfunction login(text, url, opts = {}, hide = false) {\n    return {\n        text,\n        login_url: { ...opts, url },\n        hide,\n    };\n}\nexports.login = login;\nfunction webApp(text, url, hide = false\n// works as both InlineKeyboardButton and KeyboardButton\n) {\n    return {\n        text,\n        web_app: { url },\n        hide,\n    };\n}\nexports.webApp = webApp;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/button.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/composer.js":
/*!***********************************************!*\
  !*** ./node_modules/telegraf/lib/composer.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/** @format */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Composer = void 0;\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"./node_modules/telegraf/lib/context.js\"));\nconst filters_1 = __webpack_require__(/*! ./filters */ \"./node_modules/telegraf/lib/filters.js\");\nconst args_1 = __webpack_require__(/*! ./core/helpers/args */ \"./node_modules/telegraf/lib/core/helpers/args.js\");\nfunction always(x) {\n    return () => x;\n}\nconst anoop = always(Promise.resolve());\nclass Composer {\n    constructor(...fns) {\n        this.handler = Composer.compose(fns);\n    }\n    /**\n     * Registers a middleware.\n     */\n    use(...fns) {\n        this.handler = Composer.compose([this.handler, ...fns]);\n        return this;\n    }\n    /**\n     * Registers middleware for handling updates\n     * matching given type guard function.\n     * @deprecated use `Composer::on`\n     */\n    guard(guardFn, ...fns) {\n        return this.use(Composer.guard(guardFn, ...fns));\n    }\n    on(filters, ...fns) {\n        // @ts-expect-error This should get resolved when the overloads are removed in v5\n        return this.use(Composer.on(filters, ...fns));\n    }\n    /**\n     * Registers middleware for handling matching text messages.\n     */\n    hears(triggers, ...fns) {\n        return this.use(Composer.hears(triggers, ...fns));\n    }\n    /**\n     * Registers middleware for handling specified commands.\n     */\n    command(command, ...fns) {\n        return this.use(Composer.command(command, ...fns));\n    }\n    /**\n     * Registers middleware for handling matching callback queries.\n     */\n    action(triggers, ...fns) {\n        return this.use(Composer.action(triggers, ...fns));\n    }\n    /**\n     * Registers middleware for handling matching inline queries.\n     */\n    inlineQuery(triggers, ...fns) {\n        return this.use(Composer.inlineQuery(triggers, ...fns));\n    }\n    /**\n     * Registers middleware for handling game queries\n     */\n    gameQuery(...fns) {\n        return this.use(Composer.gameQuery(...fns));\n    }\n    /**\n     * Registers middleware for dropping matching updates.\n     */\n    drop(predicate) {\n        return this.use(Composer.drop(predicate));\n    }\n    /** @deprecated use `Composer::drop` */\n    filter(predicate) {\n        return this.use(Composer.filter(predicate));\n    }\n    entity(predicate, ...fns) {\n        return this.use(Composer.entity(predicate, ...fns));\n    }\n    email(email, ...fns) {\n        return this.use(Composer.email(email, ...fns));\n    }\n    url(url, ...fns) {\n        return this.use(Composer.url(url, ...fns));\n    }\n    textLink(link, ...fns) {\n        return this.use(Composer.textLink(link, ...fns));\n    }\n    textMention(mention, ...fns) {\n        return this.use(Composer.textMention(mention, ...fns));\n    }\n    mention(mention, ...fns) {\n        return this.use(Composer.mention(mention, ...fns));\n    }\n    phone(number, ...fns) {\n        return this.use(Composer.phone(number, ...fns));\n    }\n    hashtag(hashtag, ...fns) {\n        return this.use(Composer.hashtag(hashtag, ...fns));\n    }\n    cashtag(cashtag, ...fns) {\n        return this.use(Composer.cashtag(cashtag, ...fns));\n    }\n    spoiler(text, ...fns) {\n        return this.use(Composer.spoiler(text, ...fns));\n    }\n    /**\n     * Registers a middleware for handling /start\n     */\n    start(...fns) {\n        const handler = Composer.compose(fns);\n        return this.command('start', (ctx, next) => handler(Object.assign(ctx, { startPayload: ctx.payload }), next));\n    }\n    /**\n     * Registers a middleware for handling /help\n     */\n    help(...fns) {\n        return this.command('help', ...fns);\n    }\n    /**\n     * Registers a middleware for handling /settings\n     */\n    settings(...fns) {\n        return this.command('settings', ...fns);\n    }\n    middleware() {\n        return this.handler;\n    }\n    static reply(...args) {\n        return (ctx) => ctx.reply(...args);\n    }\n    static catch(errorHandler, ...fns) {\n        const handler = Composer.compose(fns);\n        // prettier-ignore\n        return (ctx, next) => Promise.resolve(handler(ctx, next))\n            .catch((err) => errorHandler(err, ctx));\n    }\n    /**\n     * Generates middleware that runs in the background.\n     */\n    static fork(middleware) {\n        const handler = Composer.unwrap(middleware);\n        return async (ctx, next) => {\n            await Promise.all([handler(ctx, anoop), next()]);\n        };\n    }\n    static tap(middleware) {\n        const handler = Composer.unwrap(middleware);\n        return (ctx, next) => Promise.resolve(handler(ctx, anoop)).then(() => next());\n    }\n    /**\n     * Generates middleware that gives up control to the next middleware.\n     */\n    static passThru() {\n        return (ctx, next) => next();\n    }\n    static lazy(factoryFn) {\n        if (typeof factoryFn !== 'function') {\n            throw new Error('Argument must be a function');\n        }\n        return (ctx, next) => Promise.resolve(factoryFn(ctx)).then((middleware) => Composer.unwrap(middleware)(ctx, next));\n    }\n    static log(logFn = console.log) {\n        return (ctx, next) => {\n            logFn(JSON.stringify(ctx.update, null, 2));\n            return next();\n        };\n    }\n    /**\n     * @param trueMiddleware middleware to run if the predicate returns true\n     * @param falseMiddleware middleware to run if the predicate returns false\n     */\n    static branch(predicate, trueMiddleware, falseMiddleware) {\n        if (typeof predicate !== 'function') {\n            return Composer.unwrap(predicate ? trueMiddleware : falseMiddleware);\n        }\n        return Composer.lazy((ctx) => Promise.resolve(predicate(ctx)).then((value) => value ? trueMiddleware : falseMiddleware));\n    }\n    /**\n     * Generates optional middleware.\n     * @param predicate predicate to decide on a context object whether to run the middleware\n     * @param middleware middleware to run if the predicate returns true\n     */\n    static optional(predicate, ...fns) {\n        return Composer.branch(predicate, Composer.compose(fns), Composer.passThru());\n    }\n    /** @deprecated use `Composer.drop` */\n    static filter(predicate) {\n        return Composer.branch(predicate, Composer.passThru(), anoop);\n    }\n    /**\n     * Generates middleware for dropping matching updates.\n     */\n    static drop(predicate) {\n        return Composer.branch(predicate, anoop, Composer.passThru());\n    }\n    static dispatch(routeFn, handlers) {\n        return Composer.lazy((ctx) => Promise.resolve(routeFn(ctx)).then((value) => handlers[value]));\n    }\n    // EXPLANATION FOR THE ts-expect-error ANNOTATIONS\n    // The annotations around function invocations with `...fns` are there\n    // whenever we perform validation logic that the flow analysis of TypeScript\n    // cannot comprehend. We always make sure that the middleware functions are\n    // only invoked with properly constrained context objects, but this cannot be\n    // determined automatically.\n    /**\n     * Generates optional middleware based on a predicate that only operates on `ctx.update`.\n     *\n     * Example:\n     * ```ts\n     * import { Composer, Update } from 'telegraf'\n     *\n     * const predicate = (u): u is Update.MessageUpdate => 'message' in u\n     * const middleware = Composer.guard(predicate, (ctx) => {\n     *   const message = ctx.update.message\n     * })\n     * ```\n     *\n     * Note that `Composer.on('message')` is preferred over this.\n     *\n     * @param guardFn predicate to decide whether to run the middleware based on the `ctx.update` object\n     * @param fns middleware to run if the predicate returns true\n     * @see `Composer.optional` for a more generic version of this method that allows the predicate to operate on `ctx` itself\n     * @deprecated use `Composer.on`\n     */\n    static guard(guardFn, ...fns) {\n        return Composer.optional((ctx) => guardFn(ctx.update), \n        // @ts-expect-error see explanation above\n        ...fns);\n    }\n    static on(updateType, ...fns) {\n        const filters = Array.isArray(updateType) ? updateType : [updateType];\n        const predicate = (update) => {\n            for (const filter of filters) {\n                if (\n                // TODO: this should change to === 'function' once TS bug is fixed\n                // https://github.com/microsoft/TypeScript/pull/51502\n                typeof filter !== 'string'\n                    ? // filter is a type guard\n                        filter(update)\n                    : // check if filter is the update type\n                        filter in update ||\n                            // check if filter is the msg type\n                            // TODO: remove in v5!\n                            ('message' in update && filter in update.message)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        return Composer.optional((ctx) => predicate(ctx.update), ...fns);\n    }\n    static entity(predicate, ...fns) {\n        if (typeof predicate !== 'function') {\n            const entityTypes = normaliseTextArguments(predicate);\n            return Composer.entity(({ type }) => entityTypes.includes(type), ...fns);\n        }\n        return Composer.optional((ctx) => {\n            var _a;\n            const msg = (_a = ctx.message) !== null && _a !== void 0 ? _a : ctx.channelPost;\n            if (msg === undefined) {\n                return false;\n            }\n            const text = getText(msg);\n            const entities = getEntities(msg);\n            if (text === undefined)\n                return false;\n            return entities.some((entity) => predicate(entity, text.substring(entity.offset, entity.offset + entity.length), ctx));\n        }, \n        // @ts-expect-error see explanation above\n        ...fns);\n    }\n    static entityText(entityType, predicate, ...fns) {\n        if (fns.length === 0) {\n            // prettier-ignore\n            return Array.isArray(predicate)\n                // @ts-expect-error predicate is really the middleware\n                ? Composer.entity(entityType, ...predicate)\n                // @ts-expect-error predicate is really the middleware\n                : Composer.entity(entityType, predicate);\n        }\n        const triggers = normaliseTriggers(predicate);\n        return Composer.entity(({ type }, value, ctx) => {\n            if (type !== entityType) {\n                return false;\n            }\n            for (const trigger of triggers) {\n                // @ts-expect-error define so far unknown property `match`\n                if ((ctx.match = trigger(value, ctx))) {\n                    return true;\n                }\n            }\n            return false;\n        }, \n        // @ts-expect-error see explanation above\n        ...fns);\n    }\n    static email(email, ...fns) {\n        return Composer.entityText('email', email, ...fns);\n    }\n    static phone(number, ...fns) {\n        return Composer.entityText('phone_number', number, ...fns);\n    }\n    static url(url, ...fns) {\n        return Composer.entityText('url', url, ...fns);\n    }\n    static textLink(link, ...fns) {\n        return Composer.entityText('text_link', link, ...fns);\n    }\n    static textMention(mention, ...fns) {\n        return Composer.entityText('text_mention', mention, ...fns);\n    }\n    static mention(mention, ...fns) {\n        return Composer.entityText('mention', normaliseTextArguments(mention, '@'), ...fns);\n    }\n    static hashtag(hashtag, ...fns) {\n        return Composer.entityText('hashtag', normaliseTextArguments(hashtag, '#'), ...fns);\n    }\n    static cashtag(cashtag, ...fns) {\n        return Composer.entityText('cashtag', normaliseTextArguments(cashtag, '$'), ...fns);\n    }\n    static spoiler(text, ...fns) {\n        return Composer.entityText('spoiler', text, ...fns);\n    }\n    static match(triggers, ...fns) {\n        const handler = Composer.compose(fns);\n        return (ctx, next) => {\n            var _a, _b, _c, _d;\n            const text = (_c = (_b = (_a = getText(ctx.message)) !== null && _a !== void 0 ? _a : getText(ctx.channelPost)) !== null && _b !== void 0 ? _b : getText(ctx.callbackQuery)) !== null && _c !== void 0 ? _c : (_d = ctx.inlineQuery) === null || _d === void 0 ? void 0 : _d.query;\n            if (text === undefined)\n                return next();\n            for (const trigger of triggers) {\n                const match = trigger(text, ctx);\n                if (match)\n                    return handler(Object.assign(ctx, { match }), next);\n            }\n            return next();\n        };\n    }\n    /**\n     * Generates middleware for handling matching text messages.\n     */\n    static hears(triggers, ...fns) {\n        return Composer.on('text', Composer.match(normaliseTriggers(triggers), ...fns));\n    }\n    /**\n     * Generates middleware for handling specified commands.\n     */\n    static command(command, ...fns) {\n        if (fns.length === 0)\n            // @ts-expect-error command is really the middleware\n            return Composer.entity('bot_command', command);\n        const triggers = normaliseTriggers(command);\n        const filter = (0, filters_1.message)('text');\n        const handler = Composer.compose(fns);\n        return Composer.on(filter, (ctx, next) => {\n            const { entities } = ctx.message;\n            const cmdEntity = entities === null || entities === void 0 ? void 0 : entities[0];\n            if ((cmdEntity === null || cmdEntity === void 0 ? void 0 : cmdEntity.type) !== 'bot_command')\n                return next();\n            if (cmdEntity.offset > 0)\n                return next();\n            const len = cmdEntity.length;\n            const text = ctx.message.text;\n            const [cmdPart, to] = text.slice(0, len).split('@');\n            if (!cmdPart)\n                return next();\n            // always check for bot's own username case-insensitively\n            if (to && to.toLowerCase() !== ctx.me.toLowerCase())\n                return next();\n            const command = cmdPart.slice(1);\n            for (const trigger of triggers)\n                if (trigger(command, ctx)) {\n                    const payloadOffset = len + 1;\n                    const payload = text.slice(payloadOffset);\n                    const c = Object.assign(ctx, { command, payload, args: [] });\n                    let _args = undefined;\n                    // using defineProperty only to make parsing lazy on access\n                    Object.defineProperty(c, 'args', {\n                        enumerable: true,\n                        configurable: true,\n                        get() {\n                            if (_args != null)\n                                return _args;\n                            // once parsed, cache and don't parse again on every access\n                            return (_args = (0, args_1.argsParser)(payload, entities, payloadOffset));\n                        },\n                        set(args) {\n                            _args = args;\n                        },\n                    });\n                    return handler(c, next);\n                }\n            return next();\n        });\n    }\n    /**\n     * Generates middleware for handling matching callback queries.\n     */\n    static action(triggers, ...fns) {\n        return Composer.on('callback_query', Composer.match(normaliseTriggers(triggers), ...fns));\n    }\n    /**\n     * Generates middleware for handling matching inline queries.\n     */\n    static inlineQuery(triggers, ...fns) {\n        return Composer.on('inline_query', Composer.match(normaliseTriggers(triggers), ...fns));\n    }\n    /**\n     * Generates middleware responding only to specified users.\n     */\n    static acl(userId, ...fns) {\n        if (typeof userId === 'function') {\n            return Composer.optional(userId, ...fns);\n        }\n        const allowed = Array.isArray(userId) ? userId : [userId];\n        // prettier-ignore\n        return Composer.optional((ctx) => !ctx.from || allowed.includes(ctx.from.id), ...fns);\n    }\n    static memberStatus(status, ...fns) {\n        const statuses = Array.isArray(status) ? status : [status];\n        return Composer.optional(async (ctx) => {\n            if (ctx.message === undefined)\n                return false;\n            const member = await ctx.getChatMember(ctx.message.from.id);\n            return statuses.includes(member.status);\n        }, ...fns);\n    }\n    /**\n     * Generates middleware responding only to chat admins and chat creator.\n     */\n    static admin(...fns) {\n        return Composer.memberStatus(['administrator', 'creator'], ...fns);\n    }\n    /**\n     * Generates middleware responding only to chat creator.\n     */\n    static creator(...fns) {\n        return Composer.memberStatus('creator', ...fns);\n    }\n    /**\n     * Generates middleware running only in specified chat types.\n     */\n    static chatType(type, ...fns) {\n        const types = Array.isArray(type) ? type : [type];\n        return Composer.optional((ctx) => {\n            const chat = ctx.chat;\n            return chat !== undefined && types.includes(chat.type);\n        }, ...fns);\n    }\n    /**\n     * Generates middleware running only in private chats.\n     */\n    static privateChat(...fns) {\n        return Composer.chatType('private', ...fns);\n    }\n    /**\n     * Generates middleware running only in groups and supergroups.\n     */\n    static groupChat(...fns) {\n        return Composer.chatType(['group', 'supergroup'], ...fns);\n    }\n    /**\n     * Generates middleware for handling game queries.\n     */\n    static gameQuery(...fns) {\n        return Composer.guard((0, filters_1.callbackQuery)('game_short_name'), ...fns);\n    }\n    static unwrap(handler) {\n        if (!handler) {\n            throw new Error('Handler is undefined');\n        }\n        return 'middleware' in handler ? handler.middleware() : handler;\n    }\n    static compose(middlewares) {\n        if (!Array.isArray(middlewares)) {\n            throw new Error('Middlewares must be an array');\n        }\n        if (middlewares.length === 0) {\n            return Composer.passThru();\n        }\n        if (middlewares.length === 1) {\n            // Quite literally asserted in the above condition\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return Composer.unwrap(middlewares[0]);\n        }\n        return (ctx, next) => {\n            let index = -1;\n            return execute(0, ctx);\n            async function execute(i, context) {\n                var _a;\n                if (!(context instanceof context_1.default)) {\n                    throw new Error('next(ctx) called with invalid context');\n                }\n                if (i <= index) {\n                    throw new Error('next() called multiple times');\n                }\n                index = i;\n                const handler = Composer.unwrap((_a = middlewares[i]) !== null && _a !== void 0 ? _a : next);\n                await handler(context, async (ctx = context) => {\n                    await execute(i + 1, ctx);\n                });\n            }\n        };\n    }\n}\nexports.Composer = Composer;\n/**\n * Generates middleware for handling provided update types.\n * @deprecated use `Composer.on` instead\n */\nComposer.mount = Composer.on;\nfunction escapeRegExp(s) {\n    // $& means the whole matched string\n    return s.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction normaliseTriggers(triggers) {\n    if (!Array.isArray(triggers))\n        triggers = [triggers];\n    return triggers.map((trigger) => {\n        if (!trigger)\n            throw new Error('Invalid trigger');\n        if (typeof trigger === 'function')\n            return trigger;\n        if (trigger instanceof RegExp)\n            return (value = '') => {\n                trigger.lastIndex = 0;\n                return trigger.exec(value);\n            };\n        const regex = new RegExp(`^${escapeRegExp(trigger)}$`);\n        return (value) => regex.exec(value);\n    });\n}\nfunction getEntities(msg) {\n    var _a, _b;\n    if (msg == null)\n        return [];\n    if ('caption_entities' in msg)\n        return (_a = msg.caption_entities) !== null && _a !== void 0 ? _a : [];\n    if ('entities' in msg)\n        return (_b = msg.entities) !== null && _b !== void 0 ? _b : [];\n    return [];\n}\nfunction getText(msg) {\n    if (msg == null)\n        return undefined;\n    if ('caption' in msg)\n        return msg.caption;\n    if ('text' in msg)\n        return msg.text;\n    if ('data' in msg)\n        return msg.data;\n    if ('game_short_name' in msg)\n        return msg.game_short_name;\n    return undefined;\n}\nfunction normaliseTextArguments(argument, prefix = '') {\n    const args = Array.isArray(argument) ? argument : [argument];\n    // prettier-ignore\n    return args\n        .filter(Boolean)\n        .map((arg) => prefix && typeof arg === 'string' && !arg.startsWith(prefix) ? `${prefix}${arg}` : arg);\n}\nexports[\"default\"] = Composer;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/composer.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/context.js":
/*!**********************************************!*\
  !*** ./node_modules/telegraf/lib/context.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Context = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:context');\nclass Context {\n    constructor(update, telegram, botInfo) {\n        this.update = update;\n        this.telegram = telegram;\n        this.botInfo = botInfo;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.state = {};\n    }\n    get updateType() {\n        for (const key in this.update) {\n            if (typeof this.update[key] === 'object')\n                return key;\n        }\n        throw new Error(`Cannot determine \\`updateType\\` of ${JSON.stringify(this.update)}`);\n    }\n    get me() {\n        var _a;\n        return (_a = this.botInfo) === null || _a === void 0 ? void 0 : _a.username;\n    }\n    /**\n     * @deprecated Use ctx.telegram instead\n     */\n    get tg() {\n        return this.telegram;\n    }\n    get message() {\n        return this.update.message;\n    }\n    get editedMessage() {\n        return this.update.edited_message;\n    }\n    get inlineQuery() {\n        return this.update.inline_query;\n    }\n    get shippingQuery() {\n        return this.update.shipping_query;\n    }\n    get preCheckoutQuery() {\n        return this.update.pre_checkout_query;\n    }\n    get chosenInlineResult() {\n        return this.update.chosen_inline_result;\n    }\n    get channelPost() {\n        return this.update.channel_post;\n    }\n    get editedChannelPost() {\n        return this.update.edited_channel_post;\n    }\n    get callbackQuery() {\n        return this.update.callback_query;\n    }\n    get poll() {\n        return this.update.poll;\n    }\n    get pollAnswer() {\n        return this.update.poll_answer;\n    }\n    get myChatMember() {\n        return this.update.my_chat_member;\n    }\n    get chatMember() {\n        return this.update.chat_member;\n    }\n    get chatJoinRequest() {\n        return this.update.chat_join_request;\n    }\n    get chat() {\n        var _a, _b, _c, _d;\n        return (_d = ((_c = (_b = (_a = this.chatMember) !== null && _a !== void 0 ? _a : this.myChatMember) !== null && _b !== void 0 ? _b : this.chatJoinRequest) !== null && _c !== void 0 ? _c : getMessageFromAnySource(this))) === null || _d === void 0 ? void 0 : _d.chat;\n    }\n    get senderChat() {\n        var _a;\n        return (_a = getMessageFromAnySource(this)) === null || _a === void 0 ? void 0 : _a.sender_chat;\n    }\n    get from() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        return (_j = ((_h = (_g = (_f = (_e = (_d = (_c = (_b = (_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineQuery) !== null && _b !== void 0 ? _b : this.shippingQuery) !== null && _c !== void 0 ? _c : this.preCheckoutQuery) !== null && _d !== void 0 ? _d : this.chosenInlineResult) !== null && _e !== void 0 ? _e : this.chatMember) !== null && _f !== void 0 ? _f : this.myChatMember) !== null && _g !== void 0 ? _g : this.chatJoinRequest) !== null && _h !== void 0 ? _h : getMessageFromAnySource(this))) === null || _j === void 0 ? void 0 : _j.from;\n    }\n    get inlineMessageId() {\n        var _a, _b;\n        return (_b = ((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.chosenInlineResult)) === null || _b === void 0 ? void 0 : _b.inline_message_id;\n    }\n    get passportData() {\n        var _a;\n        if (this.message == null)\n            return undefined;\n        if (!('passport_data' in this.message))\n            return undefined;\n        return (_a = this.message) === null || _a === void 0 ? void 0 : _a.passport_data;\n    }\n    get webAppData() {\n        if (!(this.message && 'web_app_data' in this.message))\n            return undefined;\n        const { data, button_text } = this.message.web_app_data;\n        return {\n            data: {\n                json() {\n                    return JSON.parse(data);\n                },\n                text() {\n                    return data;\n                },\n            },\n            button_text,\n        };\n    }\n    /**\n     * @deprecated use {@link Telegram.webhookReply}\n     */\n    get webhookReply() {\n        return this.telegram.webhookReply;\n    }\n    set webhookReply(enable) {\n        this.telegram.webhookReply = enable;\n    }\n    /**\n     * @internal\n     */\n    assert(value, method) {\n        if (value === undefined) {\n            throw new TypeError(`Telegraf: \"${method}\" isn't available for \"${this.updateType}\"`);\n        }\n    }\n    has(filters) {\n        if (!Array.isArray(filters))\n            filters = [filters];\n        for (const filter of filters)\n            if (\n            // TODO: this should change to === 'function' once TS bug is fixed\n            // https://github.com/microsoft/TypeScript/pull/51502\n            typeof filter !== 'string'\n                ? // filter is a type guard\n                    filter(this.update)\n                : // check if filter is the update type\n                    filter in this.update)\n                return true;\n        return false;\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n    answerInlineQuery(...args) {\n        this.assert(this.inlineQuery, 'answerInlineQuery');\n        return this.telegram.answerInlineQuery(this.inlineQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n    answerCbQuery(...args) {\n        this.assert(this.callbackQuery, 'answerCbQuery');\n        return this.telegram.answerCbQuery(this.callbackQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n    answerGameQuery(...args) {\n        this.assert(this.callbackQuery, 'answerGameQuery');\n        return this.telegram.answerGameQuery(this.callbackQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answershippingquery\n     */\n    answerShippingQuery(...args) {\n        this.assert(this.shippingQuery, 'answerShippingQuery');\n        return this.telegram.answerShippingQuery(this.shippingQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n     */\n    answerPreCheckoutQuery(...args) {\n        this.assert(this.preCheckoutQuery, 'answerPreCheckoutQuery');\n        return this.telegram.answerPreCheckoutQuery(this.preCheckoutQuery.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n    editMessageText(text, extra) {\n        var _a, _b, _c, _d;\n        this.assert((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageText');\n        return this.telegram.editMessageText((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, (_d = (_c = this.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.message_id, this.inlineMessageId, text, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n    editMessageCaption(caption, extra) {\n        var _a, _b, _c, _d;\n        this.assert((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageCaption');\n        return this.telegram.editMessageCaption((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, (_d = (_c = this.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.message_id, this.inlineMessageId, caption, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagemedia\n     */\n    editMessageMedia(media, extra) {\n        var _a, _b, _c, _d;\n        this.assert((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageMedia');\n        return this.telegram.editMessageMedia((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, (_d = (_c = this.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.message_id, this.inlineMessageId, media, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagereplymarkup\n     */\n    editMessageReplyMarkup(markup) {\n        var _a, _b, _c, _d;\n        this.assert((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageReplyMarkup');\n        return this.telegram.editMessageReplyMarkup((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, (_d = (_c = this.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.message_id, this.inlineMessageId, markup);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editmessagelivelocation\n     */\n    editMessageLiveLocation(latitude, longitude, extra) {\n        var _a, _b, _c, _d;\n        this.assert((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'editMessageLiveLocation');\n        return this.telegram.editMessageLiveLocation((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, (_d = (_c = this.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.message_id, this.inlineMessageId, latitude, longitude, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n     */\n    stopMessageLiveLocation(markup) {\n        var _a, _b, _c, _d;\n        this.assert((_a = this.callbackQuery) !== null && _a !== void 0 ? _a : this.inlineMessageId, 'stopMessageLiveLocation');\n        return this.telegram.stopMessageLiveLocation((_b = this.chat) === null || _b === void 0 ? void 0 : _b.id, (_d = (_c = this.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.message_id, this.inlineMessageId, markup);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    sendMessage(text, extra) {\n        this.assert(this.chat, 'sendMessage');\n        return this.telegram.sendMessage(this.chat.id, text, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    reply(...args) {\n        return this.sendMessage(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n    getChat(...args) {\n        this.assert(this.chat, 'getChat');\n        return this.telegram.getChat(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#exportchatinvitelink\n     */\n    exportChatInviteLink(...args) {\n        this.assert(this.chat, 'exportChatInviteLink');\n        return this.telegram.exportChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#createchatinvitelink\n     */\n    createChatInviteLink(...args) {\n        this.assert(this.chat, 'createChatInviteLink');\n        return this.telegram.createChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#editchatinvitelink\n     */\n    editChatInviteLink(...args) {\n        this.assert(this.chat, 'editChatInviteLink');\n        return this.telegram.editChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#revokechatinvitelink\n     */\n    revokeChatInviteLink(...args) {\n        this.assert(this.chat, 'revokeChatInviteLink');\n        return this.telegram.revokeChatInviteLink(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#banchatmember\n     */\n    banChatMember(...args) {\n        this.assert(this.chat, 'banChatMember');\n        return this.telegram.banChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#banchatmember\n     * @deprecated since API 5.3. Use {@link Context.banChatMember}\n     */\n    get kickChatMember() {\n        return this.banChatMember;\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unbanchatmember\n     */\n    unbanChatMember(...args) {\n        this.assert(this.chat, 'unbanChatMember');\n        return this.telegram.unbanChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#restrictchatmember\n     */\n    restrictChatMember(...args) {\n        this.assert(this.chat, 'restrictChatMember');\n        return this.telegram.restrictChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#promotechatmember\n     */\n    promoteChatMember(...args) {\n        this.assert(this.chat, 'promoteChatMember');\n        return this.telegram.promoteChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n     */\n    setChatAdministratorCustomTitle(...args) {\n        this.assert(this.chat, 'setChatAdministratorCustomTitle');\n        return this.telegram.setChatAdministratorCustomTitle(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatphoto\n     */\n    setChatPhoto(...args) {\n        this.assert(this.chat, 'setChatPhoto');\n        return this.telegram.setChatPhoto(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#deletechatphoto\n     */\n    deleteChatPhoto(...args) {\n        this.assert(this.chat, 'deleteChatPhoto');\n        return this.telegram.deleteChatPhoto(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchattitle\n     */\n    setChatTitle(...args) {\n        this.assert(this.chat, 'setChatTitle');\n        return this.telegram.setChatTitle(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatdescription\n     */\n    setChatDescription(...args) {\n        this.assert(this.chat, 'setChatDescription');\n        return this.telegram.setChatDescription(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#pinchatmessage\n     */\n    pinChatMessage(...args) {\n        this.assert(this.chat, 'pinChatMessage');\n        return this.telegram.pinChatMessage(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unpinchatmessage\n     */\n    unpinChatMessage(...args) {\n        this.assert(this.chat, 'unpinChatMessage');\n        return this.telegram.unpinChatMessage(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unpinallchatmessages\n     */\n    unpinAllChatMessages(...args) {\n        this.assert(this.chat, 'unpinAllChatMessages');\n        return this.telegram.unpinAllChatMessages(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n    leaveChat(...args) {\n        this.assert(this.chat, 'leaveChat');\n        return this.telegram.leaveChat(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatpermissions\n     */\n    setChatPermissions(...args) {\n        this.assert(this.chat, 'setChatPermissions');\n        return this.telegram.setChatPermissions(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n    getChatAdministrators(...args) {\n        this.assert(this.chat, 'getChatAdministrators');\n        return this.telegram.getChatAdministrators(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n    getChatMember(...args) {\n        this.assert(this.chat, 'getChatMember');\n        return this.telegram.getChatMember(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getchatmembercount\n     */\n    getChatMembersCount(...args) {\n        this.assert(this.chat, 'getChatMembersCount');\n        return this.telegram.getChatMembersCount(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setpassportdataerrors\n     */\n    setPassportDataErrors(errors) {\n        this.assert(this.from, 'setPassportDataErrors');\n        return this.telegram.setPassportDataErrors(this.from.id, errors);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendphoto\n     */\n    sendPhoto(photo, extra) {\n        this.assert(this.chat, 'sendPhoto');\n        return this.telegram.sendPhoto(this.chat.id, photo, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendphoto\n     */\n    replyWithPhoto(...args) {\n        return this.sendPhoto(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     */\n    sendMediaGroup(media, extra) {\n        this.assert(this.chat, 'sendMediaGroup');\n        return this.telegram.sendMediaGroup(this.chat.id, media, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     */\n    replyWithMediaGroup(...args) {\n        return this.sendMediaGroup(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendaudio\n     */\n    sendAudio(audio, extra) {\n        this.assert(this.chat, 'sendAudio');\n        return this.telegram.sendAudio(this.chat.id, audio, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendaudio\n     */\n    replyWithAudio(...args) {\n        return this.sendAudio(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n    sendDice(extra) {\n        this.assert(this.chat, 'sendDice');\n        return this.telegram.sendDice(this.chat.id, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n    replyWithDice(...args) {\n        return this.sendDice(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddocument\n     */\n    sendDocument(document, extra) {\n        this.assert(this.chat, 'sendDocument');\n        return this.telegram.sendDocument(this.chat.id, document, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#senddocument\n     */\n    replyWithDocument(...args) {\n        return this.sendDocument(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n    sendSticker(sticker, extra) {\n        this.assert(this.chat, 'sendSticker');\n        return this.telegram.sendSticker(this.chat.id, sticker, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n    replyWithSticker(...args) {\n        return this.sendSticker(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideo\n     */\n    sendVideo(video, extra) {\n        this.assert(this.chat, 'sendVideo');\n        return this.telegram.sendVideo(this.chat.id, video, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideo\n     */\n    replyWithVideo(...args) {\n        return this.sendVideo(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendanimation\n     */\n    sendAnimation(animation, extra) {\n        this.assert(this.chat, 'sendAnimation');\n        return this.telegram.sendAnimation(this.chat.id, animation, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendanimation\n     */\n    replyWithAnimation(...args) {\n        return this.sendAnimation(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     */\n    sendVideoNote(videoNote, extra) {\n        this.assert(this.chat, 'sendVideoNote');\n        return this.telegram.sendVideoNote(this.chat.id, videoNote, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     */\n    replyWithVideoNote(...args) {\n        return this.sendVideoNote(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n    sendInvoice(invoice, extra) {\n        this.assert(this.chat, 'sendInvoice');\n        return this.telegram.sendInvoice(this.chat.id, invoice, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n    replyWithInvoice(...args) {\n        return this.sendInvoice(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n    sendGame(game, extra) {\n        this.assert(this.chat, 'sendGame');\n        return this.telegram.sendGame(this.chat.id, game, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n    replyWithGame(...args) {\n        return this.sendGame(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvoice\n     */\n    sendVoice(voice, extra) {\n        this.assert(this.chat, 'sendVoice');\n        return this.telegram.sendVoice(this.chat.id, voice, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvoice\n     */\n    replyWithVoice(...args) {\n        return this.sendVoice(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    sendPoll(poll, options, extra) {\n        this.assert(this.chat, 'sendPoll');\n        return this.telegram.sendPoll(this.chat.id, poll, options, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    replyWithPoll(...args) {\n        return this.sendPoll(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    sendQuiz(quiz, options, extra) {\n        this.assert(this.chat, 'sendQuiz');\n        return this.telegram.sendQuiz(this.chat.id, quiz, options, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n    replyWithQuiz(...args) {\n        return this.sendQuiz(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#stoppoll\n     */\n    stopPoll(...args) {\n        this.assert(this.chat, 'stopPoll');\n        return this.telegram.stopPoll(this.chat.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n    sendChatAction(action, extra) {\n        this.assert(this.chat, 'sendChatAction');\n        return this.telegram.sendChatAction(this.chat.id, action, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendchataction\n     *\n     * Sends the sendChatAction request repeatedly, with a delay between requests,\n     * as long as the provided callback function is being processed.\n     *\n     * The sendChatAction errors should be ignored, because the goal is the actual long process completing and performing an action.\n     *\n     * @param action - chat action type.\n     * @param callback - a function to run along with the chat action.\n     * @param extra - extra parameters for sendChatAction.\n     * @param {number} [extra.intervalDuration=8000] - The duration (in milliseconds) between subsequent sendChatAction requests.\n     */\n    async persistentChatAction(action, callback, { intervalDuration, ...extra } = {}) {\n        await this.sendChatAction(action, { ...extra });\n        const timer = setInterval(() => this.sendChatAction(action, { ...extra }).catch((err) => {\n            debug('Ignored error while persisting sendChatAction:', err);\n        }), intervalDuration !== null && intervalDuration !== void 0 ? intervalDuration : 4000);\n        try {\n            await callback();\n        }\n        finally {\n            clearInterval(timer);\n        }\n    }\n    /**\n     * @deprecated use {@link Context.sendChatAction} instead\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n    replyWithChatAction(...args) {\n        return this.sendChatAction(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n    sendLocation(latitude, longitude, extra) {\n        this.assert(this.chat, 'sendLocation');\n        return this.telegram.sendLocation(this.chat.id, latitude, longitude, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n    replyWithLocation(...args) {\n        return this.sendLocation(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n    sendVenue(latitude, longitude, title, address, extra) {\n        this.assert(this.chat, 'sendVenue');\n        return this.telegram.sendVenue(this.chat.id, latitude, longitude, title, address, { message_thread_id: getThreadId(this), ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n    replyWithVenue(...args) {\n        return this.sendVenue(...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n    sendContact(phoneNumber, firstName, extra) {\n        this.assert(this.chat, 'sendContact');\n        return this.telegram.sendContact(this.chat.id, phoneNumber, firstName, {\n            message_thread_id: getThreadId(this),\n            ...extra,\n        });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n    replyWithContact(...args) {\n        return this.sendContact(...args);\n    }\n    /**\n     * @deprecated use {@link Telegram.getStickerSet}\n     * @see https://core.telegram.org/bots/api#getstickerset\n     */\n    getStickerSet(setName) {\n        return this.telegram.getStickerSet(setName);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setchatstickerset\n     */\n    setChatStickerSet(setName) {\n        this.assert(this.chat, 'setChatStickerSet');\n        return this.telegram.setChatStickerSet(this.chat.id, setName);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#deletechatstickerset\n     */\n    deleteChatStickerSet() {\n        this.assert(this.chat, 'deleteChatStickerSet');\n        return this.telegram.deleteChatStickerSet(this.chat.id);\n    }\n    /**\n     * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this\n     * to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a\n     * ForumTopic object.\n     *\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n    createForumTopic(...args) {\n        this.assert(this.chat, 'createForumTopic');\n        return this.telegram.createForumTopic(this.chat.id, ...args);\n    }\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the\n     * topic. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n    editForumTopic(extra) {\n        var _a;\n        this.assert(this.chat, 'editForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'editForumTopic');\n        return this.telegram.editForumTopic(this.chat.id, this.message.message_thread_id, extra);\n    }\n    /**\n     * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n    closeForumTopic() {\n        var _a;\n        this.assert(this.chat, 'closeForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'closeForumTopic');\n        return this.telegram.closeForumTopic(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n    reopenForumTopic() {\n        var _a;\n        this.assert(this.chat, 'reopenForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'reopenForumTopic');\n        return this.telegram.reopenForumTopic(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an\n     * administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     * Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n    deleteForumTopic() {\n        var _a;\n        this.assert(this.chat, 'deleteForumTopic');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'deleteForumTopic');\n        return this.telegram.deleteForumTopic(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat\n     * for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n    unpinAllForumTopicMessages() {\n        var _a;\n        this.assert(this.chat, 'unpinAllForumTopicMessages');\n        this.assert((_a = this.message) === null || _a === void 0 ? void 0 : _a.message_thread_id, 'unpinAllForumTopicMessages');\n        return this.telegram.unpinAllForumTopicMessages(this.chat.id, this.message.message_thread_id);\n    }\n    /**\n     * Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator\n     * in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n     */\n    editGeneralForumTopic(name) {\n        this.assert(this.chat, 'editGeneralForumTopic');\n        return this.telegram.editGeneralForumTopic(this.chat.id, name);\n    }\n    /**\n     * Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n     */\n    closeGeneralForumTopic() {\n        this.assert(this.chat, 'closeGeneralForumTopic');\n        return this.telegram.closeGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically\n     * unhidden if it was hidden. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n     */\n    reopenGeneralForumTopic() {\n        this.assert(this.chat, 'reopenGeneralForumTopic');\n        return this.telegram.reopenGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed\n     * if it was open. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n     */\n    hideGeneralForumTopic() {\n        this.assert(this.chat, 'hideGeneralForumTopic');\n        return this.telegram.hideGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n    unhideGeneralForumTopic() {\n        this.assert(this.chat, 'unhideGeneralForumTopic');\n        return this.telegram.unhideGeneralForumTopic(this.chat.id);\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator\n     * right in the supergroup.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n     */\n    unpinAllGeneralForumTopicMessages() {\n        this.assert(this.chat, 'unpinAllGeneralForumTopicMessages');\n        return this.telegram.unpinAllGeneralForumTopicMessages(this.chat.id);\n    }\n    /**\n     * @deprecated use {@link Telegram.setStickerPositionInSet}\n     * @see https://core.telegram.org/bots/api#setstickerpositioninset\n     */\n    setStickerPositionInSet(sticker, position) {\n        return this.telegram.setStickerPositionInSet(sticker, position);\n    }\n    /**\n     * @deprecated use {@link Telegram.setStickerSetThumbnail}\n     * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n     */\n    setStickerSetThumb(...args) {\n        return this.telegram.setStickerSetThumbnail(...args);\n    }\n    setStickerSetThumbnail(...args) {\n        return this.telegram.setStickerSetThumbnail(...args);\n    }\n    setStickerMaskPosition(...args) {\n        return this.telegram.setStickerMaskPosition(...args);\n    }\n    setStickerKeywords(...args) {\n        return this.telegram.setStickerKeywords(...args);\n    }\n    setStickerEmojiList(...args) {\n        return this.telegram.setStickerEmojiList(...args);\n    }\n    deleteStickerSet(...args) {\n        return this.telegram.deleteStickerSet(...args);\n    }\n    setStickerSetTitle(...args) {\n        return this.telegram.setStickerSetTitle(...args);\n    }\n    setCustomEmojiStickerSetThumbnail(...args) {\n        return this.telegram.setCustomEmojiStickerSetThumbnail(...args);\n    }\n    /**\n     * @deprecated use {@link Telegram.deleteStickerFromSet}\n     * @see https://core.telegram.org/bots/api#deletestickerfromset\n     */\n    deleteStickerFromSet(sticker) {\n        return this.telegram.deleteStickerFromSet(sticker);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#uploadstickerfile\n     */\n    uploadStickerFile(...args) {\n        this.assert(this.from, 'uploadStickerFile');\n        return this.telegram.uploadStickerFile(this.from.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#createnewstickerset\n     */\n    createNewStickerSet(...args) {\n        this.assert(this.from, 'createNewStickerSet');\n        return this.telegram.createNewStickerSet(this.from.id, ...args);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#addstickertoset\n     */\n    addStickerToSet(...args) {\n        this.assert(this.from, 'addStickerToSet');\n        return this.telegram.addStickerToSet(this.from.id, ...args);\n    }\n    /**\n     * @deprecated use {@link Telegram.getMyCommands}\n     * @see https://core.telegram.org/bots/api#getmycommands\n     */\n    getMyCommands() {\n        return this.telegram.getMyCommands();\n    }\n    /**\n     * @deprecated use {@link Telegram.setMyCommands}\n     * @see https://core.telegram.org/bots/api#setmycommands\n     */\n    setMyCommands(commands) {\n        return this.telegram.setMyCommands(commands);\n    }\n    /**\n     * @deprecated use {@link Context.replyWithMarkdownV2}\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    replyWithMarkdown(markdown, extra) {\n        return this.reply(markdown, { parse_mode: 'Markdown', ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    replyWithMarkdownV2(markdown, extra) {\n        return this.reply(markdown, { parse_mode: 'MarkdownV2', ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n    replyWithHTML(html, extra) {\n        return this.reply(html, { parse_mode: 'HTML', ...extra });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#deletemessage\n     */\n    deleteMessage(messageId) {\n        this.assert(this.chat, 'deleteMessage');\n        if (typeof messageId !== 'undefined') {\n            return this.telegram.deleteMessage(this.chat.id, messageId);\n        }\n        const message = getMessageFromAnySource(this);\n        this.assert(message, 'deleteMessage');\n        return this.telegram.deleteMessage(this.chat.id, message.message_id);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#forwardmessage\n     */\n    forwardMessage(chatId, extra) {\n        const message = getMessageFromAnySource(this);\n        this.assert(message, 'forwardMessage');\n        return this.telegram.forwardMessage(chatId, message.chat.id, message.message_id, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#copymessage\n     */\n    copyMessage(chatId, extra) {\n        const message = getMessageFromAnySource(this);\n        this.assert(message, 'copyMessage');\n        return this.telegram.copyMessage(chatId, message.chat.id, message.message_id, extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n     */\n    approveChatJoinRequest(userId) {\n        this.assert(this.chat, 'approveChatJoinRequest');\n        return this.telegram.approveChatJoinRequest(this.chat.id, userId);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n     */\n    declineChatJoinRequest(userId) {\n        this.assert(this.chat, 'declineChatJoinRequest');\n        return this.telegram.declineChatJoinRequest(this.chat.id, userId);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#banchatsenderchat\n     */\n    banChatSenderChat(senderChatId) {\n        this.assert(this.chat, 'banChatSenderChat');\n        return this.telegram.banChatSenderChat(this.chat.id, senderChatId);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n     */\n    unbanChatSenderChat(senderChatId) {\n        this.assert(this.chat, 'unbanChatSenderChat');\n        return this.telegram.unbanChatSenderChat(this.chat.id, senderChatId);\n    }\n    /**\n     * Use this method to change the bot's menu button in the current private chat. Returns true on success.\n     * @see https://core.telegram.org/bots/api#setchatmenubutton\n     */\n    setChatMenuButton(menuButton) {\n        this.assert(this.chat, 'setChatMenuButton');\n        return this.telegram.setChatMenuButton({ chatId: this.chat.id, menuButton });\n    }\n    /**\n     * Use this method to get the current value of the bot's menu button in the current private chat. Returns MenuButton on success.\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n    getChatMenuButton() {\n        this.assert(this.chat, 'getChatMenuButton');\n        return this.telegram.getChatMenuButton({ chatId: this.chat.id });\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#setmydefaultadministratorrights\n     */\n    setMyDefaultAdministratorRights(extra) {\n        return this.telegram.setMyDefaultAdministratorRights(extra);\n    }\n    /**\n     * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n     */\n    getMyDefaultAdministratorRights(extra) {\n        return this.telegram.getMyDefaultAdministratorRights(extra);\n    }\n}\nexports.Context = Context;\nexports[\"default\"] = Context;\nfunction getMessageFromAnySource(ctx) {\n    var _a, _b, _c, _d, _e;\n    return ((_e = (_d = (_b = (_a = ctx.message) !== null && _a !== void 0 ? _a : ctx.editedMessage) !== null && _b !== void 0 ? _b : (_c = ctx.callbackQuery) === null || _c === void 0 ? void 0 : _c.message) !== null && _d !== void 0 ? _d : ctx.channelPost) !== null && _e !== void 0 ? _e : ctx.editedChannelPost);\n}\nconst getThreadId = (ctx) => {\n    const msg = getMessageFromAnySource(ctx);\n    return (msg === null || msg === void 0 ? void 0 : msg.is_topic_message) ? msg.message_thread_id : undefined;\n};\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/context.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/helpers/args.js":
/*!********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/args.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.argsParser = void 0;\nconst SINGLE_QUOTE = \"'\";\nconst DOUBLE_QUOTE = '\"';\nfunction argsParser(str, entities = [], entityOffset = 0) {\n    const mentions = {};\n    for (const entity of entities) // extract all text_mentions into an { offset: length } map\n        if (entity.type === 'text_mention' || entity.type === 'text_link')\n            mentions[entity.offset - entityOffset] = entity.length;\n    const args = [];\n    let done = 0;\n    let inside = undefined;\n    let buf = '';\n    function flush(to) {\n        if (done !== to)\n            args.push(buf + str.slice(done, to)), (inside = undefined);\n        buf = '';\n        done = to + 1;\n    }\n    for (let i = 0; i < str.length; i++) {\n        const char = str[i];\n        // quick lookup length of mention starting at i\n        const mention = mentions[i];\n        if (mention) {\n            // if we're inside a quote, eagerly flush existing state\n            flush(i);\n            // this also consumes current index, so decrement\n            done--;\n            // fast forward to end of mention\n            i += mention;\n            flush(i);\n        }\n        else if (char === SINGLE_QUOTE || char === DOUBLE_QUOTE)\n            if (inside)\n                if (inside === char)\n                    flush(i);\n                else\n                    continue;\n            else\n                flush(i), (inside = char);\n        else if (char === ' ')\n            if (inside)\n                continue;\n            else\n                flush(i);\n        else if (char === '\\n')\n            flush(i);\n        else if (char === '\\\\')\n            (buf += str.slice(done, i)), (done = ++i); // skip parsing the next char\n        else\n            continue;\n    }\n    if (done < str.length)\n        flush(str.length);\n    return args;\n}\nexports.argsParser = argsParser;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/helpers/args.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/helpers/check.js":
/*!*********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/check.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.is2D = exports.hasPropType = exports.hasProp = void 0;\n/**\n * Checks if a given object has a property with a given name.\n *\n * Example invocation:\n * ```js\n * let obj = { 'foo': 'bar', 'baz': () => {} }\n * hasProp(obj, 'foo') // true\n * hasProp(obj, 'baz') // true\n * hasProp(obj, 'abc') // false\n * ```\n *\n * @param obj An object to test\n * @param prop The name of the property\n */\nfunction hasProp(obj, prop) {\n    return obj !== undefined && prop in obj;\n}\nexports.hasProp = hasProp;\n/**\n * Checks if a given object has a property with a given name.\n * Furthermore performs a `typeof` check on the property if it exists.\n *\n * Example invocation:\n * ```js\n * let obj = { 'foo': 'bar', 'baz': () => {} }\n * hasPropType(obj, 'foo', 'string') // true\n * hasPropType(obj, 'baz', 'function') // true\n * hasPropType(obj, 'abc', 'number') // false\n * ```\n *\n * @param obj An object to test\n * @param prop The name of the property\n * @param type The type the property is expected to have\n */\nfunction hasPropType(obj, prop, type) {\n    return hasProp(obj, prop) && type === typeof obj[prop];\n}\nexports.hasPropType = hasPropType;\n/**\n * Checks if the supplied array has two dimensions or not.\n *\n * Example invocations:\n * is2D([]) // false\n * is2D([[]]) // true\n * is2D([[], []]) // true\n * is2D([42]) // false\n *\n * @param arr an array with one or two dimensions\n */\nfunction is2D(arr) {\n    return Array.isArray(arr[0]);\n}\nexports.is2D = is2D;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/helpers/check.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/helpers/compact.js":
/*!***********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/compact.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compactOptions = void 0;\nfunction compactOptions(options) {\n    if (!options) {\n        return options;\n    }\n    const compacted = {};\n    for (const key in options)\n        if (\n        // todo(mkr): replace with Object.hasOwn in v5 (Node 16+)\n        Object.prototype.hasOwnProperty.call(options, key) &&\n            options[key] !== undefined)\n            compacted[key] = options[key];\n    return compacted;\n}\nexports.compactOptions = compactOptions;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/helpers/compact.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/helpers/formatting.js":
/*!**************************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/formatting.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.linkOrMention = exports._fmt = exports.join = exports.FmtString = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"./node_modules/telegraf/lib/core/helpers/util.js\");\nclass FmtString {\n    constructor(text, entities) {\n        this.text = text;\n        if (entities) {\n            this.entities = entities;\n            // force parse_mode to undefined if entities are present\n            this.parse_mode = undefined;\n        }\n    }\n    static normalise(content) {\n        if (typeof content === 'string')\n            return new FmtString(content);\n        return content;\n    }\n}\nexports.FmtString = FmtString;\nconst isArray = Array.isArray;\n/** Given a base FmtString and something to append to it, mutates the base */\nconst _add = (base, next) => {\n    var _a;\n    const len = base.text.length;\n    if (next instanceof FmtString) {\n        base.text = `${base.text}${next.text}`;\n        // next.entities could be undefined and condition will fail\n        for (let i = 0; i < (((_a = next.entities) === null || _a === void 0 ? void 0 : _a.length) || 0); i++) {\n            // because of the above condition, next.entities[i] cannot be undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const entity = next.entities[i];\n            // base.entities is ensured by caller\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            base.entities.push({ ...entity, offset: entity.offset + len });\n        }\n    }\n    else\n        base.text = `${base.text}${next}`;\n};\n/**\n * Given an `Iterable<FmtString | string | Any>` and a separator, flattens the list into a single FmtString.\n * Analogous to Array#join -> string, but for FmtString\n */\nconst join = (fragments, separator) => {\n    const result = new FmtString('');\n    // ensure entities array so loop doesn't need to check\n    result.entities = [];\n    const iter = fragments[Symbol.iterator]();\n    let curr = iter.next();\n    while (!curr.done) {\n        _add(result, curr.value);\n        curr = iter.next();\n        if (separator && !curr.done)\n            _add(result, separator);\n    }\n    // set parse_mode: undefined if entities are present\n    if (result.entities.length)\n        result.parse_mode = undefined;\n    // remove entities array if not relevant\n    else\n        delete result.entities;\n    return result;\n};\nexports.join = join;\nfunction _fmt(kind, opts) {\n    return function fmt(parts, ...items) {\n        var _a;\n        parts = isArray(parts) ? parts : [parts];\n        const result = (0, exports.join)((0, util_1.zip)(parts, items));\n        if (kind) {\n            (_a = result.entities) !== null && _a !== void 0 ? _a : (result.entities = []);\n            result.entities.unshift({\n                type: kind,\n                offset: 0,\n                length: result.text.length,\n                ...opts,\n            });\n            result.parse_mode = undefined;\n        }\n        return result;\n    };\n}\nexports._fmt = _fmt;\nconst linkOrMention = (content, data) => {\n    const { text, entities = [] } = FmtString.normalise(content);\n    entities.unshift(Object.assign(data, { offset: 0, length: text.length }));\n    return new FmtString(text, entities);\n};\nexports.linkOrMention = linkOrMention;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/helpers/formatting.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/helpers/util.js":
/*!********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/helpers/util.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.zip = exports.fmtCaption = exports.env = void 0;\nexports.env = process.env;\nfunction fmtCaption(extra) {\n    if (!extra)\n        return;\n    const caption = extra.caption;\n    if (!caption || typeof caption === 'string')\n        return extra;\n    const { text, entities } = caption;\n    return {\n        ...extra,\n        caption: text,\n        ...(entities && {\n            caption_entities: entities,\n            parse_mode: undefined,\n        }),\n    };\n}\nexports.fmtCaption = fmtCaption;\nfunction* zip(xs, ys) {\n    const x = xs[Symbol.iterator]();\n    const y = ys[Symbol.iterator]();\n    let x1 = x.next();\n    let y1 = y.next();\n    while (!x1.done) {\n        yield x1.value;\n        if (!y1.done)\n            yield y1.value;\n        x1 = x.next();\n        y1 = y.next();\n    }\n    while (!y1.done) {\n        yield y1.value;\n        y1 = y.next();\n    }\n}\nexports.zip = zip;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/helpers/util.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/network/client.js":
/*!**********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/client.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint @typescript-eslint/restrict-template-expressions: [ \"error\", { \"allowNumber\": true, \"allowBoolean\": true } ] */\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst https = __importStar(__webpack_require__(/*! https */ \"https\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/lib/index.mjs\"));\nconst check_1 = __webpack_require__(/*! ../helpers/check */ \"./node_modules/telegraf/lib/core/helpers/check.js\");\nconst compact_1 = __webpack_require__(/*! ../helpers/compact */ \"./node_modules/telegraf/lib/core/helpers/compact.js\");\nconst multipart_stream_1 = __importDefault(__webpack_require__(/*! ./multipart-stream */ \"./node_modules/telegraf/lib/core/network/multipart-stream.js\"));\nconst error_1 = __importDefault(__webpack_require__(/*! ./error */ \"./node_modules/telegraf/lib/core/network/error.js\"));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = __webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\")('telegraf:client');\nconst { isStream } = multipart_stream_1.default;\nconst WEBHOOK_REPLY_METHOD_ALLOWLIST = new Set([\n    'answerCallbackQuery',\n    'answerInlineQuery',\n    'deleteMessage',\n    'leaveChat',\n    'sendChatAction',\n]);\nconst DEFAULT_EXTENSIONS = {\n    audio: 'mp3',\n    photo: 'jpg',\n    sticker: 'webp',\n    video: 'mp4',\n    animation: 'mp4',\n    video_note: 'mp4',\n    voice: 'ogg',\n};\nconst DEFAULT_OPTIONS = {\n    apiRoot: 'https://api.telegram.org',\n    apiMode: 'bot',\n    webhookReply: true,\n    agent: new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 10000,\n    }),\n    attachmentAgent: undefined,\n    testEnv: false,\n};\nfunction includesMedia(payload) {\n    return Object.values(payload).some((value) => {\n        if (Array.isArray(value)) {\n            return value.some(({ media }) => media && typeof media === 'object' && (media.source || media.url));\n        }\n        return (value &&\n            typeof value === 'object' &&\n            (((0, check_1.hasProp)(value, 'source') && value.source) ||\n                ((0, check_1.hasProp)(value, 'url') && value.url) ||\n                ((0, check_1.hasPropType)(value, 'media', 'object') &&\n                    (((0, check_1.hasProp)(value.media, 'source') && value.media.source) ||\n                        ((0, check_1.hasProp)(value.media, 'url') && value.media.url)))));\n    });\n}\nfunction replacer(_, value) {\n    if (value == null)\n        return undefined;\n    return value;\n}\nfunction buildJSONConfig(payload) {\n    return Promise.resolve({\n        method: 'POST',\n        compress: true,\n        headers: { 'content-type': 'application/json', connection: 'keep-alive' },\n        body: JSON.stringify(payload, replacer),\n    });\n}\nconst FORM_DATA_JSON_FIELDS = [\n    'results',\n    'reply_markup',\n    'mask_position',\n    'shipping_options',\n    'errors',\n];\nasync function buildFormDataConfig(payload, agent) {\n    for (const field of FORM_DATA_JSON_FIELDS) {\n        if ((0, check_1.hasProp)(payload, field) && typeof payload[field] !== 'string') {\n            payload[field] = JSON.stringify(payload[field]);\n        }\n    }\n    const boundary = crypto.randomBytes(32).toString('hex');\n    const formData = new multipart_stream_1.default(boundary);\n    const tasks = Object.keys(payload).map((key) => attachFormValue(formData, key, payload[key], agent));\n    await Promise.all(tasks);\n    return {\n        method: 'POST',\n        compress: true,\n        headers: {\n            'content-type': `multipart/form-data; boundary=${boundary}`,\n            connection: 'keep-alive',\n        },\n        body: formData,\n    };\n}\nasync function attachFormValue(form, id, value, agent) {\n    if (value == null) {\n        return;\n    }\n    if (typeof value === 'string' ||\n        typeof value === 'boolean' ||\n        typeof value === 'number') {\n        form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: `${value}`,\n        });\n        return;\n    }\n    if (id === 'thumb') {\n        const attachmentId = crypto.randomBytes(16).toString('hex');\n        await attachFormMedia(form, value, attachmentId, agent);\n        return form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: `attach://${attachmentId}`,\n        });\n    }\n    if (Array.isArray(value)) {\n        const items = await Promise.all(value.map(async (item) => {\n            if (typeof item.media !== 'object') {\n                return await Promise.resolve(item);\n            }\n            const attachmentId = crypto.randomBytes(16).toString('hex');\n            await attachFormMedia(form, item.media, attachmentId, agent);\n            return { ...item, media: `attach://${attachmentId}` };\n        }));\n        return form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: JSON.stringify(items),\n        });\n    }\n    if (value &&\n        typeof value === 'object' &&\n        (0, check_1.hasProp)(value, 'media') &&\n        (0, check_1.hasProp)(value, 'type') &&\n        typeof value.media !== 'undefined' &&\n        typeof value.type !== 'undefined') {\n        const attachmentId = crypto.randomBytes(16).toString('hex');\n        await attachFormMedia(form, value.media, attachmentId, agent);\n        return form.addPart({\n            headers: { 'content-disposition': `form-data; name=\"${id}\"` },\n            body: JSON.stringify({\n                ...value,\n                media: `attach://${attachmentId}`,\n            }),\n        });\n    }\n    return await attachFormMedia(form, value, id, agent);\n}\nasync function attachFormMedia(form, media, id, agent) {\n    var _a, _b, _c;\n    let fileName = (_a = media.filename) !== null && _a !== void 0 ? _a : `${id}.${(_b = DEFAULT_EXTENSIONS[id]) !== null && _b !== void 0 ? _b : 'dat'}`;\n    if (media.url !== undefined) {\n        const timeout = 500000; // ms\n        const res = await (0, node_fetch_1.default)(media.url, { agent, timeout });\n        return form.addPart({\n            headers: {\n                'content-disposition': `form-data; name=\"${id}\"; filename=\"${fileName}\"`,\n            },\n            body: res.body,\n        });\n    }\n    if (media.source) {\n        let mediaSource = media.source;\n        if (fs.existsSync(media.source)) {\n            fileName = (_c = media.filename) !== null && _c !== void 0 ? _c : path.basename(media.source);\n            mediaSource = fs.createReadStream(media.source);\n        }\n        if (isStream(mediaSource) || Buffer.isBuffer(mediaSource)) {\n            form.addPart({\n                headers: {\n                    'content-disposition': `form-data; name=\"${id}\"; filename=\"${fileName}\"`,\n                },\n                body: mediaSource,\n            });\n        }\n    }\n}\nasync function answerToWebhook(response, payload, options) {\n    if (!includesMedia(payload)) {\n        if (!response.headersSent) {\n            response.setHeader('content-type', 'application/json');\n        }\n        response.end(JSON.stringify(payload), 'utf-8');\n        return true;\n    }\n    const { headers, body } = await buildFormDataConfig(payload, options.attachmentAgent);\n    if (!response.headersSent) {\n        for (const [key, value] of Object.entries(headers)) {\n            response.setHeader(key, value);\n        }\n    }\n    await new Promise((resolve) => {\n        response.on('finish', resolve);\n        body.pipe(response);\n    });\n    return true;\n}\nfunction redactToken(error) {\n    error.message = error.message.replace(/\\/(bot|user)(\\d+):[^/]+\\//, '/$1$2:[REDACTED]/');\n    throw error;\n}\nclass ApiClient {\n    constructor(token, options, response) {\n        this.token = token;\n        this.response = response;\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...(0, compact_1.compactOptions)(options),\n        };\n        if (this.options.apiRoot.startsWith('http://')) {\n            this.options.agent = undefined;\n        }\n    }\n    /**\n     * If set to `true`, first _eligible_ call will avoid performing a POST request.\n     * Note that such a call:\n     * 1. cannot report errors or return meaningful values,\n     * 2. resolves before bot API has a chance to process it,\n     * 3. prematurely confirms the update as processed.\n     *\n     * https://core.telegram.org/bots/faq#how-can-i-make-requests-in-response-to-updates\n     * https://github.com/telegraf/telegraf/pull/1250\n     */\n    set webhookReply(enable) {\n        this.options.webhookReply = enable;\n    }\n    get webhookReply() {\n        return this.options.webhookReply;\n    }\n    async callApi(method, payload, { signal } = {}) {\n        const { token, options, response } = this;\n        if (options.webhookReply &&\n            (response === null || response === void 0 ? void 0 : response.writableEnded) === false &&\n            WEBHOOK_REPLY_METHOD_ALLOWLIST.has(method)) {\n            debug('Call via webhook', method, payload);\n            // @ts-expect-error using webhookReply is an optimisation that doesn't respond with normal result\n            // up to the user to deal with this\n            return await answerToWebhook(response, { method, ...payload }, options);\n        }\n        if (!token) {\n            throw new error_1.default({\n                error_code: 401,\n                description: 'Bot Token is required',\n            });\n        }\n        debug('HTTP call', method, payload);\n        const config = includesMedia(payload)\n            ? await buildFormDataConfig({ method, ...payload }, options.attachmentAgent)\n            : await buildJSONConfig(payload);\n        const apiUrl = new url_1.URL(`./${options.apiMode}${token}${options.testEnv ? '/test' : ''}/${method}`, options.apiRoot);\n        config.agent = options.agent;\n        // @ts-expect-error AbortSignal shim is missing some props from Request.AbortSignal\n        config.signal = signal;\n        config.timeout = 500000; // ms\n        const res = await (0, node_fetch_1.default)(apiUrl, config).catch(redactToken);\n        if (res.status >= 500) {\n            const errorPayload = {\n                error_code: res.status,\n                description: res.statusText,\n            };\n            throw new error_1.default(errorPayload, { method, payload });\n        }\n        const data = await res.json();\n        if (!data.ok) {\n            debug('API call failed', data);\n            throw new error_1.default(data, { method, payload });\n        }\n        return data.result;\n    }\n}\nexports[\"default\"] = ApiClient;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/network/client.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/network/error.js":
/*!*********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/error.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TelegramError = void 0;\nclass TelegramError extends Error {\n    constructor(response, on = {}) {\n        super(`${response.error_code}: ${response.description}`);\n        this.response = response;\n        this.on = on;\n    }\n    get code() {\n        return this.response.error_code;\n    }\n    get description() {\n        return this.response.description;\n    }\n    get parameters() {\n        return this.response.parameters;\n    }\n}\nexports.TelegramError = TelegramError;\nexports[\"default\"] = TelegramError;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/network/error.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/network/multipart-stream.js":
/*!********************************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/multipart-stream.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst stream = __importStar(__webpack_require__(/*! stream */ \"stream\"));\nconst check_1 = __webpack_require__(/*! ../helpers/check */ \"./node_modules/telegraf/lib/core/helpers/check.js\");\nconst sandwich_stream_1 = __importDefault(__webpack_require__(/*! sandwich-stream */ \"./node_modules/sandwich-stream/dist/sandwich-stream.mjs\"));\nconst CRNL = '\\r\\n';\nclass MultipartStream extends sandwich_stream_1.default {\n    constructor(boundary) {\n        super({\n            head: `--${boundary}${CRNL}`,\n            tail: `${CRNL}--${boundary}--`,\n            separator: `${CRNL}--${boundary}${CRNL}`,\n        });\n    }\n    addPart(part) {\n        const partStream = new stream.PassThrough();\n        for (const [key, header] of Object.entries(part.headers)) {\n            partStream.write(`${key}:${header}${CRNL}`);\n        }\n        partStream.write(CRNL);\n        if (MultipartStream.isStream(part.body)) {\n            part.body.pipe(partStream);\n        }\n        else {\n            partStream.end(part.body);\n        }\n        this.add(partStream);\n    }\n    static isStream(stream) {\n        return (typeof stream === 'object' &&\n            stream !== null &&\n            (0, check_1.hasPropType)(stream, 'pipe', 'function'));\n    }\n}\nexports[\"default\"] = MultipartStream;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/network/multipart-stream.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/network/polling.js":
/*!***********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/polling.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Polling = void 0;\nconst abort_controller_1 = __importDefault(__webpack_require__(/*! abort-controller */ \"./node_modules/abort-controller/dist/abort-controller.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\"));\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/telegraf/lib/core/network/error.js\");\nconst debug = (0, debug_1.default)('telegraf:polling');\nconst wait = (0, util_1.promisify)(setTimeout);\nfunction always(x) {\n    return () => x;\n}\nconst noop = always(Promise.resolve());\nclass Polling {\n    constructor(telegram, allowedUpdates) {\n        this.telegram = telegram;\n        this.allowedUpdates = allowedUpdates;\n        this.abortController = new abort_controller_1.default();\n        this.skipOffsetSync = false;\n        this.offset = 0;\n    }\n    async *[Symbol.asyncIterator]() {\n        var _a, _b;\n        debug('Starting long polling');\n        do {\n            try {\n                const updates = await this.telegram.callApi('getUpdates', {\n                    timeout: 50,\n                    offset: this.offset,\n                    allowed_updates: this.allowedUpdates,\n                }, this.abortController);\n                const last = updates[updates.length - 1];\n                if (last !== undefined) {\n                    this.offset = last.update_id + 1;\n                }\n                yield updates;\n            }\n            catch (error) {\n                const err = error;\n                if (err.name === 'AbortError')\n                    return;\n                if (err.name === 'FetchError' ||\n                    (err instanceof error_1.TelegramError && err.code === 429) ||\n                    (err instanceof error_1.TelegramError && err.code >= 500)) {\n                    const retryAfter = (_b = (_a = err.parameters) === null || _a === void 0 ? void 0 : _a.retry_after) !== null && _b !== void 0 ? _b : 5;\n                    debug('Failed to fetch updates, retrying after %ds.', retryAfter, err);\n                    await wait(retryAfter * 1000);\n                    continue;\n                }\n                if (err instanceof error_1.TelegramError &&\n                    // Unauthorized      Conflict\n                    (err.code === 401 || err.code === 409)) {\n                    this.skipOffsetSync = true;\n                    throw err;\n                }\n                throw err;\n            }\n        } while (!this.abortController.signal.aborted);\n    }\n    async syncUpdateOffset() {\n        if (this.skipOffsetSync)\n            return;\n        debug('Syncing update offset...');\n        await this.telegram.callApi('getUpdates', { offset: this.offset, limit: 1 });\n    }\n    async loop(handleUpdate) {\n        if (this.abortController.signal.aborted)\n            throw new Error('Polling instances must not be reused!');\n        try {\n            for await (const updates of this)\n                await Promise.all(updates.map(handleUpdate));\n        }\n        finally {\n            debug('Long polling stopped');\n            // prevent instance reuse\n            this.stop();\n            await this.syncUpdateOffset().catch(noop);\n        }\n    }\n    stop() {\n        this.abortController.abort();\n    }\n}\nexports.Polling = Polling;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/network/polling.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/core/network/webhook.js":
/*!***********************************************************!*\
  !*** ./node_modules/telegraf/lib/core/network/webhook.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:webhook');\nfunction generateWebhook(filter, updateHandler) {\n    return async (req, res, next = () => {\n        res.statusCode = 403;\n        debug('Replying with status code', res.statusCode);\n        res.end();\n    }) => {\n        debug('Incoming request', req.method, req.url);\n        if (!filter(req)) {\n            debug('Webhook filter failed', req.method, req.url);\n            return next();\n        }\n        let update;\n        try {\n            if (req.body != null) {\n                /* If req.body is already set, we expect it to be the parsed\n                 request body (update object) received from Telegram\n                 However, some libraries such as `serverless-http` set req.body to the\n                 raw buffer, so we'll handle that additionally */\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let body = req.body;\n                // if body is Buffer, parse it into string\n                if (body instanceof Buffer)\n                    body = String(req.body);\n                // if body is string, parse it into object\n                if (typeof body === 'string')\n                    body = JSON.parse(body);\n                update = body;\n            }\n            else {\n                let body = '';\n                // parse each buffer to string and append to body\n                for await (const chunk of req)\n                    body += String(chunk);\n                // parse body to object\n                update = JSON.parse(body);\n            }\n        }\n        catch (error) {\n            // if any of the parsing steps fails, give up and respond with error\n            res.writeHead(415).end();\n            debug('Failed to parse request body:', error);\n            return;\n        }\n        return await updateHandler(update, res);\n    };\n}\nexports[\"default\"] = generateWebhook;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/core/network/webhook.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/deunionize.js":
/*!*************************************************!*\
  !*** ./node_modules/telegraf/lib/deunionize.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deunionize = void 0;\n/**\n * Expose properties from all union variants.\n * @deprectated\n * @see https://github.com/telegraf/telegraf/issues/1388#issuecomment-791573609\n * @see https://millsp.github.io/ts-toolbelt/modules/union_strict.html\n */\nfunction deunionize(t) {\n    return t;\n}\nexports.deunionize = deunionize;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/deunionize.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/filters.js":
/*!**********************************************!*\
  !*** ./node_modules/telegraf/lib/filters.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.allOf = exports.anyOf = exports.callbackQuery = exports.editedChannelPost = exports.channelPost = exports.editedMessage = exports.message = void 0;\nconst message = (...keys) => (update) => {\n    if (!('message' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.message))\n            return false;\n    }\n    return true;\n};\nexports.message = message;\nconst editedMessage = (...keys) => (update) => {\n    if (!('edited_message' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.edited_message))\n            return false;\n    }\n    return true;\n};\nexports.editedMessage = editedMessage;\nconst channelPost = (...keys) => (update) => {\n    if (!('channel_post' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.channel_post))\n            return false;\n    }\n    return true;\n};\nexports.channelPost = channelPost;\nconst editedChannelPost = (...keys) => (update) => {\n    if (!('edited_channel_post' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.edited_channel_post))\n            return false;\n    }\n    return true;\n};\nexports.editedChannelPost = editedChannelPost;\nconst callbackQuery = (...keys) => (update) => {\n    if (!('callback_query' in update))\n        return false;\n    for (const key of keys) {\n        if (!(key in update.callback_query))\n            return false;\n    }\n    return true;\n};\nexports.callbackQuery = callbackQuery;\n/** Any of the provided filters must match */\nconst anyOf = (...filters) => (update) => {\n    for (const filter of filters)\n        if (filter(update))\n            return true;\n    return false;\n};\nexports.anyOf = anyOf;\n/** All of the provided filters must match */\nconst allOf = (...filters) => (update) => {\n    for (const filter of filters)\n        if (!filter(update))\n            return false;\n    return true;\n};\nexports.allOf = allOf;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/filters.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/format.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/format.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.join = exports.mention = exports.link = exports.pre = exports.code = exports.underline = exports.strikethrough = exports.spoiler = exports.italic = exports.bold = exports.fmt = exports.FmtString = void 0;\nconst formatting_1 = __webpack_require__(/*! ./core/helpers/formatting */ \"./node_modules/telegraf/lib/core/helpers/formatting.js\");\nObject.defineProperty(exports, \"FmtString\", ({ enumerable: true, get: function () { return formatting_1.FmtString; } }));\nObject.defineProperty(exports, \"join\", ({ enumerable: true, get: function () { return formatting_1.join; } }));\nconst fmt = (0, formatting_1._fmt)();\nexports.fmt = fmt;\nconst bold = (0, formatting_1._fmt)('bold');\nexports.bold = bold;\nconst italic = (0, formatting_1._fmt)('italic');\nexports.italic = italic;\nconst spoiler = (0, formatting_1._fmt)('spoiler');\nexports.spoiler = spoiler;\nconst strikethrough = (0, formatting_1._fmt)('strikethrough');\nexports.strikethrough = strikethrough;\nconst underline = (0, formatting_1._fmt)('underline');\nexports.underline = underline;\nconst code = (0, formatting_1._fmt)('code');\nexports.code = code;\nconst pre = (language) => (0, formatting_1._fmt)('pre', { language });\nexports.pre = pre;\nconst link = (content, url) => (0, formatting_1.linkOrMention)(content, { type: 'text_link', url });\nexports.link = link;\nconst mention = (name, user) => typeof user === 'number'\n    ? link(name, 'tg://user?id=' + user)\n    : (0, formatting_1.linkOrMention)(name, { type: 'text_mention', user });\nexports.mention = mention;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/format.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/telegraf/lib/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Scenes = exports.MemorySessionStore = exports.session = exports.deunionize = exports.Format = exports.Input = exports.Markup = exports.Types = exports.Telegram = exports.TelegramError = exports.Router = exports.Composer = exports.Context = exports.Telegraf = void 0;\nvar telegraf_1 = __webpack_require__(/*! ./telegraf */ \"./node_modules/telegraf/lib/telegraf.js\");\nObject.defineProperty(exports, \"Telegraf\", ({ enumerable: true, get: function () { return telegraf_1.Telegraf; } }));\nvar context_1 = __webpack_require__(/*! ./context */ \"./node_modules/telegraf/lib/context.js\");\nObject.defineProperty(exports, \"Context\", ({ enumerable: true, get: function () { return context_1.Context; } }));\nvar composer_1 = __webpack_require__(/*! ./composer */ \"./node_modules/telegraf/lib/composer.js\");\nObject.defineProperty(exports, \"Composer\", ({ enumerable: true, get: function () { return composer_1.Composer; } }));\nvar router_1 = __webpack_require__(/*! ./router */ \"./node_modules/telegraf/lib/router.js\");\nObject.defineProperty(exports, \"Router\", ({ enumerable: true, get: function () { return router_1.Router; } }));\nvar error_1 = __webpack_require__(/*! ./core/network/error */ \"./node_modules/telegraf/lib/core/network/error.js\");\nObject.defineProperty(exports, \"TelegramError\", ({ enumerable: true, get: function () { return error_1.TelegramError; } }));\nvar telegram_1 = __webpack_require__(/*! ./telegram */ \"./node_modules/telegraf/lib/telegram.js\");\nObject.defineProperty(exports, \"Telegram\", ({ enumerable: true, get: function () { return telegram_1.Telegram; } }));\nexports.Types = __importStar(__webpack_require__(/*! ./telegram-types */ \"./node_modules/telegraf/lib/telegram-types.js\"));\nexports.Markup = __importStar(__webpack_require__(/*! ./markup */ \"./node_modules/telegraf/lib/markup.js\"));\nexports.Input = __importStar(__webpack_require__(/*! ./input */ \"./node_modules/telegraf/lib/input.js\"));\nexports.Format = __importStar(__webpack_require__(/*! ./format */ \"./node_modules/telegraf/lib/format.js\"));\nvar deunionize_1 = __webpack_require__(/*! ./deunionize */ \"./node_modules/telegraf/lib/deunionize.js\");\nObject.defineProperty(exports, \"deunionize\", ({ enumerable: true, get: function () { return deunionize_1.deunionize; } }));\nvar session_1 = __webpack_require__(/*! ./session */ \"./node_modules/telegraf/lib/session.js\");\nObject.defineProperty(exports, \"session\", ({ enumerable: true, get: function () { return session_1.session; } }));\nObject.defineProperty(exports, \"MemorySessionStore\", ({ enumerable: true, get: function () { return session_1.MemorySessionStore; } }));\nexports.Scenes = __importStar(__webpack_require__(/*! ./scenes */ \"./node_modules/telegraf/lib/scenes/index.js\"));\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/index.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/input.js":
/*!********************************************!*\
  !*** ./node_modules/telegraf/lib/input.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromFileId = exports.fromURL = exports.fromURLStream = exports.fromReadableStream = exports.fromBuffer = exports.fromLocalFile = void 0;\n/**\n * The local file specified by path will be uploaded to Telegram using multipart/form-data.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromLocalFile = (path, filename) => ({ source: path, filename });\nexports.fromLocalFile = fromLocalFile;\n/**\n * The buffer will be uploaded as file to Telegram using multipart/form-data.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromBuffer = (buffer, filename) => ({ source: buffer, filename });\nexports.fromBuffer = fromBuffer;\n/**\n * Contents of the stream will be uploaded as file to Telegram using multipart/form-data.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromReadableStream = (stream, filename) => ({ source: stream, filename });\nexports.fromReadableStream = fromReadableStream;\n/**\n * Contents of the URL will be streamed to Telegram.\n *\n * 10 MB max size for photos, 50 MB for other files.\n */\n// prettier-ignore\nconst fromURLStream = (url, filename) => ({ url: url.toString(), filename });\nexports.fromURLStream = fromURLStream;\n/**\n * Provide Telegram with an HTTP URL for the file to be sent.\n * Telegram will download and send the file.\n *\n * * The target file must have the correct MIME type (e.g., audio/mpeg for `sendAudio`, etc.).\n * * `sendDocument` with URL will currently only work for GIF, PDF and ZIP files.\n * * To use `sendVoice`, the file must have the type audio/ogg and be no more than 1MB in size.\n * 1-20MB voice notes will be sent as files.\n *\n * 5 MB max size for photos and 20 MB max for other types of content.\n */\nconst fromURL = (url) => url.toString();\nexports.fromURL = fromURL;\n/**\n * If the file is already stored somewhere on the Telegram servers, you don't need to reupload it:\n * each file object has a file_id field, simply pass this file_id as a parameter instead of uploading.\n *\n * It is not possible to change the file type when resending by file_id.\n *\n * It is not possible to resend thumbnails using file_id.\n * They have to be uploaded using one of the other Input methods.\n *\n * There are no limits for files sent this way.\n */\nconst fromFileId = (fileId) => fileId;\nexports.fromFileId = fromFileId;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/input.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/markup.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/markup.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.inlineKeyboard = exports.keyboard = exports.forceReply = exports.removeKeyboard = exports.button = exports.Markup = void 0;\nconst check_1 = __webpack_require__(/*! ./core/helpers/check */ \"./node_modules/telegraf/lib/core/helpers/check.js\");\nclass Markup {\n    constructor(reply_markup) {\n        this.reply_markup = reply_markup;\n    }\n    selective(value = true) {\n        return new Markup({ ...this.reply_markup, selective: value });\n    }\n    placeholder(placeholder) {\n        return new Markup({\n            ...this.reply_markup,\n            input_field_placeholder: placeholder,\n        });\n    }\n    resize(value = true) {\n        return new Markup({\n            ...this.reply_markup,\n            resize_keyboard: value,\n        });\n    }\n    oneTime(value = true) {\n        return new Markup({\n            ...this.reply_markup,\n            one_time_keyboard: value,\n        });\n    }\n    persistent(value = true) {\n        return new Markup({\n            ...this.reply_markup,\n            is_persistent: value,\n        });\n    }\n}\nexports.Markup = Markup;\nexports.button = __importStar(__webpack_require__(/*! ./button */ \"./node_modules/telegraf/lib/button.js\"));\nfunction removeKeyboard() {\n    return new Markup({ remove_keyboard: true });\n}\nexports.removeKeyboard = removeKeyboard;\nfunction forceReply() {\n    return new Markup({ force_reply: true });\n}\nexports.forceReply = forceReply;\nfunction keyboard(buttons, options) {\n    const keyboard = buildKeyboard(buttons, {\n        columns: 1,\n        ...options,\n    });\n    return new Markup({ keyboard });\n}\nexports.keyboard = keyboard;\nfunction inlineKeyboard(buttons, options) {\n    const inlineKeyboard = buildKeyboard(buttons, {\n        columns: buttons.length,\n        ...options,\n    });\n    return new Markup({ inline_keyboard: inlineKeyboard });\n}\nexports.inlineKeyboard = inlineKeyboard;\nfunction buildKeyboard(buttons, options) {\n    const result = [];\n    if (!Array.isArray(buttons)) {\n        return result;\n    }\n    if ((0, check_1.is2D)(buttons)) {\n        return buttons.map((row) => row.filter((button) => !button.hide));\n    }\n    const wrapFn = options.wrap !== undefined\n        ? options.wrap\n        : (_btn, _index, currentRow) => currentRow.length >= options.columns;\n    let currentRow = [];\n    let index = 0;\n    for (const btn of buttons.filter((button) => !button.hide)) {\n        if (wrapFn(btn, index, currentRow) && currentRow.length > 0) {\n            result.push(currentRow);\n            currentRow = [];\n        }\n        currentRow.push(btn);\n        index++;\n    }\n    if (currentRow.length > 0) {\n        result.push(currentRow);\n    }\n    return result;\n}\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/markup.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/router.js":
/*!*********************************************!*\
  !*** ./node_modules/telegraf/lib/router.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/** @format */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Router = void 0;\nconst composer_1 = __importDefault(__webpack_require__(/*! ./composer */ \"./node_modules/telegraf/lib/composer.js\"));\n/** @deprecated in favor of {@link Composer.dispatch} */\nclass Router {\n    constructor(routeFn, handlers = new Map()) {\n        this.routeFn = routeFn;\n        this.handlers = handlers;\n        this.otherwiseHandler = composer_1.default.passThru();\n        if (typeof routeFn !== 'function') {\n            throw new Error('Missing routing function');\n        }\n    }\n    on(route, ...fns) {\n        if (fns.length === 0) {\n            throw new TypeError('At least one handler must be provided');\n        }\n        this.handlers.set(route, composer_1.default.compose(fns));\n        return this;\n    }\n    otherwise(...fns) {\n        if (fns.length === 0) {\n            throw new TypeError('At least one otherwise handler must be provided');\n        }\n        this.otherwiseHandler = composer_1.default.compose(fns);\n        return this;\n    }\n    middleware() {\n        return composer_1.default.lazy((ctx) => {\n            var _a;\n            const result = this.routeFn(ctx);\n            if (result == null) {\n                return this.otherwiseHandler;\n            }\n            Object.assign(ctx, result.context);\n            Object.assign(ctx.state, result.state);\n            return (_a = this.handlers.get(result.route)) !== null && _a !== void 0 ? _a : this.otherwiseHandler;\n        });\n    }\n}\nexports.Router = Router;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/router.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/scenes/base.js":
/*!**************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/base.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseScene = void 0;\nconst composer_1 = __importDefault(__webpack_require__(/*! ../composer */ \"./node_modules/telegraf/lib/composer.js\"));\nconst { compose } = composer_1.default;\nclass BaseScene extends composer_1.default {\n    constructor(id, options) {\n        const opts = {\n            handlers: [],\n            enterHandlers: [],\n            leaveHandlers: [],\n            ...options,\n        };\n        super(...opts.handlers);\n        this.id = id;\n        this.ttl = opts.ttl;\n        this.enterHandler = compose(opts.enterHandlers);\n        this.leaveHandler = compose(opts.leaveHandlers);\n    }\n    enter(...fns) {\n        this.enterHandler = compose([this.enterHandler, ...fns]);\n        return this;\n    }\n    leave(...fns) {\n        this.leaveHandler = compose([this.leaveHandler, ...fns]);\n        return this;\n    }\n    enterMiddleware() {\n        return this.enterHandler;\n    }\n    leaveMiddleware() {\n        return this.leaveHandler;\n    }\n}\nexports.BaseScene = BaseScene;\nexports[\"default\"] = BaseScene;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/scenes/base.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/scenes/context.js":
/*!*****************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/context.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst composer_1 = __importDefault(__webpack_require__(/*! ../composer */ \"./node_modules/telegraf/lib/composer.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:scenes:context');\nconst noop = () => Promise.resolve();\nconst now = () => Math.floor(Date.now() / 1000);\nclass SceneContextScene {\n    constructor(ctx, scenes, options) {\n        this.ctx = ctx;\n        this.scenes = scenes;\n        this.leaving = false;\n        // @ts-expect-error {} might not be assignable to D\n        const fallbackSessionDefault = {};\n        this.options = { defaultSession: fallbackSessionDefault, ...options };\n    }\n    get session() {\n        var _a, _b;\n        const defaultSession = Object.assign({}, this.options.defaultSession);\n        let session = (_b = (_a = this.ctx.session) === null || _a === void 0 ? void 0 : _a.__scenes) !== null && _b !== void 0 ? _b : defaultSession;\n        if (session.expires !== undefined && session.expires < now()) {\n            session = defaultSession;\n        }\n        if (this.ctx.session === undefined) {\n            this.ctx.session = { __scenes: session };\n        }\n        else {\n            this.ctx.session.__scenes = session;\n        }\n        return session;\n    }\n    get state() {\n        var _a;\n        var _b;\n        return ((_a = (_b = this.session).state) !== null && _a !== void 0 ? _a : (_b.state = {}));\n    }\n    set state(value) {\n        this.session.state = { ...value };\n    }\n    get current() {\n        var _a;\n        const sceneId = (_a = this.session.current) !== null && _a !== void 0 ? _a : this.options.default;\n        return sceneId === undefined || !this.scenes.has(sceneId)\n            ? undefined\n            : this.scenes.get(sceneId);\n    }\n    reset() {\n        if (this.ctx.session !== undefined)\n            this.ctx.session.__scenes = Object.assign({}, this.options.defaultSession);\n    }\n    async enter(sceneId, initialState = {}, silent = false) {\n        var _a, _b;\n        if (!this.scenes.has(sceneId)) {\n            throw new Error(`Can't find scene: ${sceneId}`);\n        }\n        if (!silent) {\n            await this.leave();\n        }\n        debug('Entering scene', sceneId, initialState, silent);\n        this.session.current = sceneId;\n        this.state = initialState;\n        const ttl = (_b = (_a = this.current) === null || _a === void 0 ? void 0 : _a.ttl) !== null && _b !== void 0 ? _b : this.options.ttl;\n        if (ttl !== undefined) {\n            this.session.expires = now() + ttl;\n        }\n        if (this.current === undefined || silent) {\n            return;\n        }\n        const handler = 'enterMiddleware' in this.current &&\n            typeof this.current.enterMiddleware === 'function'\n            ? this.current.enterMiddleware()\n            : this.current.middleware();\n        return await handler(this.ctx, noop);\n    }\n    reenter() {\n        return this.session.current === undefined\n            ? undefined\n            : this.enter(this.session.current, this.state);\n    }\n    async leave() {\n        if (this.leaving)\n            return;\n        debug('Leaving scene');\n        try {\n            this.leaving = true;\n            if (this.current === undefined) {\n                return;\n            }\n            const handler = 'leaveMiddleware' in this.current &&\n                typeof this.current.leaveMiddleware === 'function'\n                ? this.current.leaveMiddleware()\n                : composer_1.default.passThru();\n            await handler(this.ctx, noop);\n            return this.reset();\n        }\n        finally {\n            this.leaving = false;\n        }\n    }\n}\nexports[\"default\"] = SceneContextScene;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/scenes/context.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/scenes/index.js":
/*!***************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @see https://github.com/telegraf/telegraf/issues/705#issuecomment-549056045\n * @see https://www.npmjs.com/package/telegraf-stateless-question\n * @packageDocumentation\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WizardContextWizard = exports.WizardScene = exports.BaseScene = exports.SceneContextScene = exports.Stage = void 0;\nvar stage_1 = __webpack_require__(/*! ./stage */ \"./node_modules/telegraf/lib/scenes/stage.js\");\nObject.defineProperty(exports, \"Stage\", ({ enumerable: true, get: function () { return stage_1.Stage; } }));\nvar context_1 = __webpack_require__(/*! ./context */ \"./node_modules/telegraf/lib/scenes/context.js\");\nObject.defineProperty(exports, \"SceneContextScene\", ({ enumerable: true, get: function () { return __importDefault(context_1).default; } }));\nvar base_1 = __webpack_require__(/*! ./base */ \"./node_modules/telegraf/lib/scenes/base.js\");\nObject.defineProperty(exports, \"BaseScene\", ({ enumerable: true, get: function () { return base_1.BaseScene; } }));\nvar wizard_1 = __webpack_require__(/*! ./wizard */ \"./node_modules/telegraf/lib/scenes/wizard/index.js\");\nObject.defineProperty(exports, \"WizardScene\", ({ enumerable: true, get: function () { return wizard_1.WizardScene; } }));\nvar context_2 = __webpack_require__(/*! ./wizard/context */ \"./node_modules/telegraf/lib/scenes/wizard/context.js\");\nObject.defineProperty(exports, \"WizardContextWizard\", ({ enumerable: true, get: function () { return __importDefault(context_2).default; } }));\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/scenes/index.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/scenes/stage.js":
/*!***************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/stage.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stage = void 0;\nconst session_1 = __webpack_require__(/*! ../session */ \"./node_modules/telegraf/lib/session.js\");\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"./node_modules/telegraf/lib/scenes/context.js\"));\nconst composer_1 = __webpack_require__(/*! ../composer */ \"./node_modules/telegraf/lib/composer.js\");\nclass Stage extends composer_1.Composer {\n    constructor(scenes = [], options) {\n        super();\n        this.options = { ...options };\n        this.scenes = new Map();\n        scenes.forEach((scene) => this.register(scene));\n    }\n    register(...scenes) {\n        scenes.forEach((scene) => {\n            if ((scene === null || scene === void 0 ? void 0 : scene.id) == null || typeof scene.middleware !== 'function') {\n                throw new Error('telegraf: Unsupported scene');\n            }\n            this.scenes.set(scene.id, scene);\n        });\n        return this;\n    }\n    middleware() {\n        const handler = composer_1.Composer.compose([\n            (ctx, next) => {\n                const scenes = this.scenes;\n                const scene = new context_1.default(ctx, scenes, this.options);\n                ctx.scene = scene;\n                return next();\n            },\n            super.middleware(),\n            composer_1.Composer.lazy((ctx) => { var _a; return (_a = ctx.scene.current) !== null && _a !== void 0 ? _a : composer_1.Composer.passThru(); }),\n        ]);\n        return composer_1.Composer.optional(session_1.isSessionContext, handler);\n    }\n    static enter(...args) {\n        return (ctx) => ctx.scene.enter(...args);\n    }\n    static reenter(...args) {\n        return (ctx) => ctx.scene.reenter(...args);\n    }\n    static leave(...args) {\n        return (ctx) => ctx.scene.leave(...args);\n    }\n}\nexports.Stage = Stage;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/scenes/stage.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/scenes/wizard/context.js":
/*!************************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/wizard/context.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass WizardContextWizard {\n    constructor(ctx, steps) {\n        var _a;\n        this.ctx = ctx;\n        this.steps = steps;\n        this.state = ctx.scene.state;\n        this.cursor = (_a = ctx.scene.session.cursor) !== null && _a !== void 0 ? _a : 0;\n    }\n    get step() {\n        return this.steps[this.cursor];\n    }\n    get cursor() {\n        return this.ctx.scene.session.cursor;\n    }\n    set cursor(cursor) {\n        this.ctx.scene.session.cursor = cursor;\n    }\n    selectStep(index) {\n        this.cursor = index;\n        return this;\n    }\n    next() {\n        return this.selectStep(this.cursor + 1);\n    }\n    back() {\n        return this.selectStep(this.cursor - 1);\n    }\n}\nexports[\"default\"] = WizardContextWizard;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/scenes/wizard/context.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/scenes/wizard/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/telegraf/lib/scenes/wizard/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WizardScene = void 0;\nconst base_1 = __importDefault(__webpack_require__(/*! ../base */ \"./node_modules/telegraf/lib/scenes/base.js\"));\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"./node_modules/telegraf/lib/scenes/wizard/context.js\"));\nconst composer_1 = __importDefault(__webpack_require__(/*! ../../composer */ \"./node_modules/telegraf/lib/composer.js\"));\nclass WizardScene extends base_1.default {\n    constructor(id, options, ...steps) {\n        let opts;\n        let s;\n        if (typeof options === 'function' || 'middleware' in options) {\n            opts = undefined;\n            s = [options, ...steps];\n        }\n        else {\n            opts = options;\n            s = steps;\n        }\n        super(id, opts);\n        this.steps = s;\n    }\n    middleware() {\n        return composer_1.default.compose([\n            (ctx, next) => {\n                ctx.wizard = new context_1.default(ctx, this.steps);\n                return next();\n            },\n            super.middleware(),\n            (ctx, next) => {\n                if (ctx.wizard.step === undefined) {\n                    ctx.wizard.selectStep(0);\n                    return ctx.scene.leave();\n                }\n                return composer_1.default.unwrap(ctx.wizard.step)(ctx, next);\n            },\n        ]);\n    }\n    enterMiddleware() {\n        return composer_1.default.compose([this.enterHandler, this.middleware()]);\n    }\n}\nexports.WizardScene = WizardScene;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/scenes/wizard/index.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/session.js":
/*!**********************************************!*\
  !*** ./node_modules/telegraf/lib/session.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSessionContext = exports.MemorySessionStore = exports.session = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('telegraf:session');\n/**\n * Returns middleware that adds `ctx.session` for storing arbitrary state per session key.\n *\n * The default `getSessionKey` is `${ctx.from.id}:${ctx.chat.id}`.\n * If either `ctx.from` or `ctx.chat` is `undefined`, default session key and thus `ctx.session` are also `undefined`.\n *\n * > ⚠️ Session data is kept only in memory by default,  which means that all data will be lost when the process is terminated.\n * >\n * > If you want to persist data across process restarts, or share it among multiple instances, you should use\n * [@telegraf/session](https://www.npmjs.com/package/@telegraf/session), or pass custom `storage`.\n *\n * @see {@link https://github.com/feathers-studio/telegraf-docs/blob/b694bcc36b4f71fb1cd650a345c2009ab4d2a2a5/guide/session.md Telegraf Docs | Session}\n * @see {@link https://github.com/feathers-studio/telegraf-docs/blob/master/examples/session-bot.ts Example}\n */\nfunction session(options) {\n    var _a, _b, _c;\n    const prop = (_a = options === null || options === void 0 ? void 0 : options.property) !== null && _a !== void 0 ? _a : 'session';\n    const getSessionKey = (_b = options === null || options === void 0 ? void 0 : options.getSessionKey) !== null && _b !== void 0 ? _b : defaultGetSessionKey;\n    const store = (_c = options === null || options === void 0 ? void 0 : options.store) !== null && _c !== void 0 ? _c : new MemorySessionStore();\n    // caches value from store in-memory while simultaneous updates share it\n    // when counter reaches 0, the cached ref will be freed from memory\n    const cache = new Map();\n    // temporarily stores concurrent requests\n    const concurrents = new Map();\n    // this function must be handled with care\n    // read full description on the original PR: https://github.com/telegraf/telegraf/pull/1713\n    // make sure to update the tests in test/session.js if you make any changes or fix bugs here\n    return async (ctx, next) => {\n        var _a;\n        const updId = ctx.update.update_id;\n        // because this is async, requests may still race here, but it will get autocorrected at (1)\n        // v5 getSessionKey should probably be synchronous to avoid that\n        const key = await getSessionKey(ctx);\n        if (!key) {\n            // Leaving this here could be useful to check for `prop in ctx` in future middleware\n            ctx[prop] = undefined;\n            return await next();\n        }\n        let cached = cache.get(key);\n        if (cached) {\n            debug(`(${updId}) found cached session, reusing from cache`);\n            ++cached.counter;\n        }\n        else {\n            debug(`(${updId}) did not find cached session`);\n            // if another concurrent request has already sent a store request, fetch that instead\n            let promise = concurrents.get(key);\n            if (promise)\n                debug(`(${updId}) found a concurrent request, reusing promise`);\n            else {\n                debug(`(${updId}) fetching from upstream store`);\n                promise = store.get(key);\n            }\n            // synchronously store promise so concurrent requests can share response\n            concurrents.set(key, promise);\n            const upstream = await promise;\n            // all concurrent awaits will have promise in their closure, safe to remove now\n            concurrents.delete(key);\n            debug(`(${updId}) updating cache`);\n            // another request may have beaten us to the punch\n            const c = cache.get(key);\n            if (c) {\n                // another request did beat us to the punch\n                c.counter++;\n                // (1) preserve cached reference; in-memory reference is always newer than from store\n                cached = c;\n            }\n            else {\n                // we're the first, so we must cache the reference\n                cached = { ref: upstream !== null && upstream !== void 0 ? upstream : (_a = options === null || options === void 0 ? void 0 : options.defaultSession) === null || _a === void 0 ? void 0 : _a.call(options, ctx), counter: 1 };\n                cache.set(key, cached);\n            }\n        }\n        // TS already knows cached is always defined by this point, but does not guard cached.\n        // It will, however, guard `c` here.\n        const c = cached;\n        let touched = false;\n        Object.defineProperty(ctx, prop, {\n            get() {\n                touched = true;\n                return c.ref;\n            },\n            set(value) {\n                touched = true;\n                c.ref = value;\n            },\n        });\n        try {\n            await next();\n        }\n        finally {\n            if (--c.counter === 0) {\n                // decrement to avoid memory leak\n                debug(`(${updId}) refcounter reached 0, removing cached`);\n                cache.delete(key);\n            }\n            debug(`(${updId}) middlewares completed, checking session`);\n            // only update store if ctx.session was touched\n            if (touched)\n                if (ctx[prop] == null) {\n                    debug(`(${updId}) ctx.${prop} missing, removing from store`);\n                    await store.delete(key);\n                }\n                else {\n                    debug(`(${updId}) ctx.${prop} found, updating store`);\n                    await store.set(key, ctx[prop]);\n                }\n        }\n    };\n}\nexports.session = session;\nfunction defaultGetSessionKey(ctx) {\n    var _a, _b;\n    const fromId = (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id;\n    const chatId = (_b = ctx.chat) === null || _b === void 0 ? void 0 : _b.id;\n    if (fromId == null || chatId == null)\n        return undefined;\n    return `${fromId}:${chatId}`;\n}\n/** @deprecated Use `Map` */\nclass MemorySessionStore {\n    constructor(ttl = Infinity) {\n        this.ttl = ttl;\n        this.store = new Map();\n    }\n    get(name) {\n        const entry = this.store.get(name);\n        if (entry == null) {\n            return undefined;\n        }\n        else if (entry.expires < Date.now()) {\n            this.delete(name);\n            return undefined;\n        }\n        return entry.session;\n    }\n    set(name, value) {\n        const now = Date.now();\n        this.store.set(name, { session: value, expires: now + this.ttl });\n    }\n    delete(name) {\n        this.store.delete(name);\n    }\n}\nexports.MemorySessionStore = MemorySessionStore;\n/** @deprecated session can use custom properties now. Directly use `'session' in ctx` instead */\nfunction isSessionContext(ctx) {\n    return 'session' in ctx;\n}\nexports.isSessionContext = isSessionContext;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/session.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/telegraf.js":
/*!***********************************************!*\
  !*** ./node_modules/telegraf/lib/telegraf.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Telegraf = void 0;\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst http = __importStar(__webpack_require__(/*! http */ \"http\"));\nconst https = __importStar(__webpack_require__(/*! https */ \"https\"));\nconst composer_1 = __webpack_require__(/*! ./composer */ \"./node_modules/telegraf/lib/composer.js\");\nconst compact_1 = __webpack_require__(/*! ./core/helpers/compact */ \"./node_modules/telegraf/lib/core/helpers/compact.js\");\nconst context_1 = __importDefault(__webpack_require__(/*! ./context */ \"./node_modules/telegraf/lib/context.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/telegraf/node_modules/debug/src/index.js\"));\nconst webhook_1 = __importDefault(__webpack_require__(/*! ./core/network/webhook */ \"./node_modules/telegraf/lib/core/network/webhook.js\"));\nconst polling_1 = __webpack_require__(/*! ./core/network/polling */ \"./node_modules/telegraf/lib/core/network/polling.js\");\nconst p_timeout_1 = __importDefault(__webpack_require__(/*! p-timeout */ \"./node_modules/p-timeout/index.js\"));\nconst telegram_1 = __importDefault(__webpack_require__(/*! ./telegram */ \"./node_modules/telegraf/lib/telegram.js\"));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst safeCompare = __webpack_require__(/*! safe-compare */ \"./node_modules/safe-compare/index.js\");\nconst debug = (0, debug_1.default)('telegraf:main');\nconst DEFAULT_OPTIONS = {\n    telegram: {},\n    handlerTimeout: 90000,\n    contextType: context_1.default,\n};\nfunction always(x) {\n    return () => x;\n}\nconst anoop = always(Promise.resolve());\nconst TOKEN_HEADER = 'x-telegram-bot-api-secret-token';\nclass Telegraf extends composer_1.Composer {\n    constructor(token, options) {\n        super();\n        this.context = {};\n        /** Assign to this to customise the webhook filter middleware.\n         * `{ path, secretToken }` will be bound to this rather than the Telegraf instance.\n         * Remember to assign a regular function and not an arrow function so it's bindable.\n         */\n        this.webhookFilter = function (req) {\n            const debug = (0, debug_1.default)('telegraf:webhook');\n            if (req.method === 'POST') {\n                if (safeCompare(this.path, req.url)) {\n                    // no need to check if secret_token was not set\n                    if (!this.secretToken)\n                        return true;\n                    else {\n                        const token = req.headers[TOKEN_HEADER];\n                        if (safeCompare(this.secretToken, token))\n                            return true;\n                        else\n                            debug('Secret token does not match:', token, this.secretToken);\n                    }\n                }\n                else\n                    debug('Path does not match:', req.url, this.path);\n            }\n            else\n                debug('Unexpected request method, not POST. Received:', req.method);\n            return false;\n        };\n        this.handleError = (err, ctx) => {\n            // set exit code to emulate `warn-with-error-code` behavior of\n            // https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode\n            // to prevent a clean exit despite an error being thrown\n            process.exitCode = 1;\n            console.error('Unhandled error while processing', ctx.update);\n            throw err;\n        };\n        // @ts-expect-error Trust me, TS\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...(0, compact_1.compactOptions)(options),\n        };\n        this.telegram = new telegram_1.default(token, this.options.telegram);\n        debug('Created a `Telegraf` instance');\n    }\n    get token() {\n        return this.telegram.token;\n    }\n    /** @deprecated use `ctx.telegram.webhookReply` */\n    set webhookReply(webhookReply) {\n        this.telegram.webhookReply = webhookReply;\n    }\n    /** @deprecated use `ctx.telegram.webhookReply` */\n    get webhookReply() {\n        return this.telegram.webhookReply;\n    }\n    /**\n     * _Override_ error handling\n     */\n    catch(handler) {\n        this.handleError = handler;\n        return this;\n    }\n    /**\n     * You must call `bot.telegram.setWebhook` for this to work.\n     * You should probably use {@link Telegraf.createWebhook} instead.\n     */\n    webhookCallback(path = '/', opts = {}) {\n        const { secretToken } = opts;\n        return (0, webhook_1.default)(this.webhookFilter.bind({ hookPath: path, path, secretToken }), (update, res) => this.handleUpdate(update, res));\n    }\n    getDomainOpts(opts) {\n        var _a;\n        const protocol = opts.domain.startsWith('https://') || opts.domain.startsWith('http://');\n        if (protocol)\n            debug('Unexpected protocol in domain, telegraf will use https:', opts.domain);\n        const domain = protocol ? new url_1.URL(opts.domain).host : opts.domain;\n        const path = (_a = opts.path) !== null && _a !== void 0 ? _a : `/telegraf/${this.secretPathComponent()}`;\n        const url = `https://${domain}${path}`;\n        return { domain, path, url };\n    }\n    /**\n     * Specify a url to receive incoming updates via webhook.\n     * Returns an Express-style middleware you can pass to app.use()\n     */\n    async createWebhook(opts) {\n        const { domain, path, ...extra } = opts;\n        const domainOpts = this.getDomainOpts({ domain, path });\n        await this.telegram.setWebhook(domainOpts.url, extra);\n        debug(`Webhook set to ${domainOpts.url}`);\n        return this.webhookCallback(domainOpts.path, {\n            secretToken: extra.secret_token,\n        });\n    }\n    startPolling(allowedUpdates = []) {\n        this.polling = new polling_1.Polling(this.telegram, allowedUpdates);\n        return this.polling.loop(async (update) => {\n            await this.handleUpdate(update);\n        });\n    }\n    startWebhook(path, tlsOptions, port, host, cb, secretToken) {\n        const webhookCb = this.webhookCallback(path, { secretToken });\n        const callback = typeof cb === 'function'\n            ? (req, res) => webhookCb(req, res, () => cb(req, res))\n            : webhookCb;\n        this.webhookServer =\n            tlsOptions != null\n                ? https.createServer(tlsOptions, callback)\n                : http.createServer(callback);\n        this.webhookServer.listen(port, host, () => {\n            debug('Webhook listening on port: %s', port);\n        });\n        return this;\n    }\n    secretPathComponent() {\n        return crypto\n            .createHash('sha3-256')\n            .update(this.token)\n            .update(process.version) // salt\n            .digest('hex');\n    }\n    /**\n     * @see https://github.com/telegraf/telegraf/discussions/1344#discussioncomment-335700\n     */\n    async launch(config = {}) {\n        var _a, _b;\n        debug('Connecting to Telegram');\n        (_a = this.botInfo) !== null && _a !== void 0 ? _a : (this.botInfo = await this.telegram.getMe());\n        debug(`Launching @${this.botInfo.username}`);\n        if (config.webhook === undefined) {\n            await this.telegram.deleteWebhook({\n                drop_pending_updates: config.dropPendingUpdates,\n            });\n            debug('Bot started with long polling');\n            await this.startPolling(config.allowedUpdates);\n            return;\n        }\n        const domainOpts = this.getDomainOpts({\n            domain: config.webhook.domain,\n            path: (_b = config.webhook.path) !== null && _b !== void 0 ? _b : config.webhook.hookPath,\n        });\n        const { tlsOptions, port, host, cb, secretToken } = config.webhook;\n        this.startWebhook(domainOpts.path, tlsOptions, port, host, cb, secretToken);\n        await this.telegram.setWebhook(domainOpts.url, {\n            drop_pending_updates: config.dropPendingUpdates,\n            allowed_updates: config.allowedUpdates,\n            ip_address: config.webhook.ipAddress,\n            max_connections: config.webhook.maxConnections,\n            secret_token: config.webhook.secretToken,\n            certificate: config.webhook.certificate,\n        });\n        debug(`Bot started with webhook @ ${domainOpts.url}`);\n    }\n    stop(reason = 'unspecified') {\n        var _a, _b;\n        debug('Stopping bot... Reason:', reason);\n        // https://github.com/telegraf/telegraf/pull/1224#issuecomment-742693770\n        if (this.polling === undefined && this.webhookServer === undefined) {\n            throw new Error('Bot is not running!');\n        }\n        (_a = this.webhookServer) === null || _a === void 0 ? void 0 : _a.close();\n        (_b = this.polling) === null || _b === void 0 ? void 0 : _b.stop();\n    }\n    async handleUpdate(update, webhookResponse) {\n        var _a, _b;\n        (_a = this.botInfo) !== null && _a !== void 0 ? _a : (this.botInfo = (debug('Update %d is waiting for `botInfo` to be initialized', update.update_id),\n            await ((_b = this.botInfoCall) !== null && _b !== void 0 ? _b : (this.botInfoCall = this.telegram.getMe()))));\n        debug('Processing update', update.update_id);\n        const tg = new telegram_1.default(this.token, this.telegram.options, webhookResponse);\n        const TelegrafContext = this.options.contextType;\n        const ctx = new TelegrafContext(update, tg, this.botInfo);\n        Object.assign(ctx, this.context);\n        try {\n            await (0, p_timeout_1.default)(Promise.resolve(this.middleware()(ctx, anoop)), this.options.handlerTimeout);\n        }\n        catch (err) {\n            return await this.handleError(err, ctx);\n        }\n        finally {\n            if ((webhookResponse === null || webhookResponse === void 0 ? void 0 : webhookResponse.writableEnded) === false) {\n                webhookResponse.end();\n            }\n            debug('Finished processing update', update.update_id);\n        }\n    }\n}\nexports.Telegraf = Telegraf;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/telegraf.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/telegram-types.js":
/*!*****************************************************!*\
  !*** ./node_modules/telegraf/lib/telegram-types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/** @format */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Markup = void 0;\nvar markup_1 = __webpack_require__(/*! ./markup */ \"./node_modules/telegraf/lib/markup.js\");\nObject.defineProperty(exports, \"Markup\", ({ enumerable: true, get: function () { return markup_1.Markup; } }));\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/telegram-types.js?");

/***/ }),

/***/ "./node_modules/telegraf/lib/telegram.js":
/*!***********************************************!*\
  !*** ./node_modules/telegraf/lib/telegram.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Telegram = void 0;\nconst client_1 = __importDefault(__webpack_require__(/*! ./core/network/client */ \"./node_modules/telegraf/lib/core/network/client.js\"));\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst format_1 = __webpack_require__(/*! ./format */ \"./node_modules/telegraf/lib/format.js\");\nconst util_1 = __webpack_require__(/*! ./core/helpers/util */ \"./node_modules/telegraf/lib/core/helpers/util.js\");\nclass Telegram extends client_1.default {\n    /**\n     * Get basic information about the bot\n     */\n    getMe() {\n        return this.callApi('getMe', {});\n    }\n    /**\n     * Get basic info about a file and prepare it for downloading.\n     * @param fileId Id of file to get link to\n     */\n    getFile(fileId) {\n        return this.callApi('getFile', { file_id: fileId });\n    }\n    /**\n     * Get download link to a file.\n     */\n    async getFileLink(fileId) {\n        if (typeof fileId === 'string') {\n            fileId = await this.getFile(fileId);\n        }\n        else if (fileId.file_path === undefined) {\n            fileId = await this.getFile(fileId.file_id);\n        }\n        // Local bot API instances return the absolute path to the file\n        if (fileId.file_path !== undefined && (0, path_1.isAbsolute)(fileId.file_path)) {\n            const url = new url_1.URL(this.options.apiRoot);\n            url.port = '';\n            url.pathname = fileId.file_path;\n            url.protocol = 'file:';\n            return url;\n        }\n        return new url_1.URL(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        `./file/${this.options.apiMode}${this.token}/${fileId.file_path}`, this.options.apiRoot);\n    }\n    /**\n     * Directly request incoming updates.\n     * You should probably use `Telegraf::launch` instead.\n     */\n    getUpdates(timeout, limit, offset, allowedUpdates) {\n        return this.callApi('getUpdates', {\n            allowed_updates: allowedUpdates,\n            limit,\n            offset,\n            timeout,\n        });\n    }\n    getWebhookInfo() {\n        return this.callApi('getWebhookInfo', {});\n    }\n    getGameHighScores(userId, inlineMessageId, chatId, messageId) {\n        return this.callApi('getGameHighScores', {\n            user_id: userId,\n            inline_message_id: inlineMessageId,\n            chat_id: chatId,\n            message_id: messageId,\n        });\n    }\n    setGameScore(userId, score, inlineMessageId, chatId, messageId, editMessage = true, force = false) {\n        return this.callApi('setGameScore', {\n            force,\n            score,\n            user_id: userId,\n            inline_message_id: inlineMessageId,\n            chat_id: chatId,\n            message_id: messageId,\n            disable_edit_message: !editMessage,\n        });\n    }\n    /**\n     * Specify a url to receive incoming updates via an outgoing webhook.\n     * @param url HTTPS url to send updates to. Use an empty string to remove webhook integration\n     */\n    setWebhook(url, extra) {\n        return this.callApi('setWebhook', {\n            url,\n            ...extra,\n        });\n    }\n    /**\n     * Remove webhook integration.\n     */\n    deleteWebhook(extra) {\n        return this.callApi('deleteWebhook', {\n            ...extra,\n        });\n    }\n    /**\n     * Send a text message.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param text Text of the message to be sent\n     */\n    sendMessage(chatId, text, extra) {\n        const t = format_1.FmtString.normalise(text);\n        return this.callApi('sendMessage', { chat_id: chatId, ...extra, ...t });\n    }\n    /**\n     * Forward existing message.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param fromChatId Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\n     * @param messageId Message identifier in the chat specified in from_chat_id\n     */\n    forwardMessage(chatId, fromChatId, messageId, extra) {\n        return this.callApi('forwardMessage', {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_id: messageId,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method when you need to tell the user that something is happening on the bot's side.\n     * The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendChatAction(chat_id, action, extra) {\n        return this.callApi('sendChatAction', { chat_id, action, ...extra });\n    }\n    getUserProfilePhotos(userId, offset, limit) {\n        return this.callApi('getUserProfilePhotos', {\n            user_id: userId,\n            offset,\n            limit,\n        });\n    }\n    /**\n     * Send point on the map.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendLocation(chatId, latitude, longitude, extra) {\n        return this.callApi('sendLocation', {\n            chat_id: chatId,\n            latitude,\n            longitude,\n            ...extra,\n        });\n    }\n    sendVenue(chatId, latitude, longitude, title, address, extra) {\n        return this.callApi('sendVenue', {\n            latitude,\n            longitude,\n            title,\n            address,\n            chat_id: chatId,\n            ...extra,\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target private chat\n     */\n    sendInvoice(chatId, invoice, extra) {\n        return this.callApi('sendInvoice', {\n            chat_id: chatId,\n            ...invoice,\n            ...extra,\n        });\n    }\n    sendContact(chatId, phoneNumber, firstName, extra) {\n        return this.callApi('sendContact', {\n            chat_id: chatId,\n            phone_number: phoneNumber,\n            first_name: firstName,\n            ...extra,\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendPhoto(chatId, photo, extra) {\n        return this.callApi('sendPhoto', {\n            chat_id: chatId,\n            photo,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send a dice, which will have a random value from 1 to 6.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendDice(chatId, extra) {\n        return this.callApi('sendDice', { chat_id: chatId, ...extra });\n    }\n    /**\n     * Send general files. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendDocument(chatId, document, extra) {\n        return this.callApi('sendDocument', {\n            chat_id: chatId,\n            document,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send audio files, if you want Telegram clients to display them in the music player.\n     * Your audio must be in the .mp3 format.\n     * Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendAudio(chatId, audio, extra) {\n        return this.callApi('sendAudio', {\n            chat_id: chatId,\n            audio,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send .webp, animated .tgs, or video .webm stickers\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendSticker(chatId, sticker, extra) {\n        return this.callApi('sendSticker', { chat_id: chatId, sticker, ...extra });\n    }\n    /**\n     * Send video files, Telegram clients support mp4 videos (other formats may be sent as Document).\n     * Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendVideo(chatId, video, extra) {\n        return this.callApi('sendVideo', {\n            chat_id: chatId,\n            video,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send .gif animations.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendAnimation(chatId, animation, extra) {\n        return this.callApi('sendAnimation', {\n            chat_id: chatId,\n            animation,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Send video messages.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendVideoNote(chatId, videoNote, extra) {\n        return this.callApi('sendVideoNote', {\n            chat_id: chatId,\n            video_note: videoNote,\n            ...extra,\n        });\n    }\n    /**\n     * Send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    sendVoice(chatId, voice, extra) {\n        return this.callApi('sendVoice', {\n            chat_id: chatId,\n            voice,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat\n     * @param gameShortName Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather.\n     */\n    sendGame(chatId, gameName, extra) {\n        return this.callApi('sendGame', {\n            chat_id: chatId,\n            game_short_name: gameName,\n            ...extra,\n        });\n    }\n    /**\n     * Send a group of photos or videos as an album.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n     */\n    sendMediaGroup(chatId, media, extra) {\n        return this.callApi('sendMediaGroup', { chat_id: chatId, media, ...extra });\n    }\n    /**\n     * Send a native poll.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param question Poll question, 1-255 characters\n     * @param options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n     */\n    sendPoll(chatId, question, options, extra) {\n        return this.callApi('sendPoll', {\n            chat_id: chatId,\n            type: 'regular',\n            question,\n            options,\n            ...extra,\n        });\n    }\n    /**\n     * Send a native quiz.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param question Poll question, 1-255 characters\n     * @param options A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n     */\n    sendQuiz(chatId, question, options, extra) {\n        return this.callApi('sendPoll', {\n            chat_id: chatId,\n            type: 'quiz',\n            question,\n            options,\n            ...extra,\n        });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Identifier of the original message with the poll\n     */\n    stopPoll(chatId, messageId, extra) {\n        return this.callApi('stopPoll', {\n            chat_id: chatId,\n            message_id: messageId,\n            ...extra,\n        });\n    }\n    /**\n     * Get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.).\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    getChat(chatId) {\n        return this.callApi('getChat', { chat_id: chatId });\n    }\n    /**\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    getChatAdministrators(chatId) {\n        return this.callApi('getChatAdministrators', { chat_id: chatId });\n    }\n    /**\n     * Get information about a member of a chat.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     * @param userId Unique identifier of the target user\n     */\n    getChatMember(chatId, userId) {\n        return this.callApi('getChatMember', { chat_id: chatId, user_id: userId });\n    }\n    /**\n     * Get the number of members in a chat.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    getChatMembersCount(chatId) {\n        return this.callApi('getChatMembersCount', { chat_id: chatId });\n    }\n    /**\n     * Send answers to an inline query.\n     * No more than 50 results per query are allowed.\n     */\n    answerInlineQuery(inlineQueryId, results, extra) {\n        return this.callApi('answerInlineQuery', {\n            inline_query_id: inlineQueryId,\n            results,\n            ...extra,\n        });\n    }\n    setChatPermissions(chatId, permissions, extra) {\n        return this.callApi('setChatPermissions', {\n            chat_id: chatId,\n            permissions,\n            ...extra,\n        });\n    }\n    /**\n     * Kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n     * @param untilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n     */\n    banChatMember(chatId, userId, untilDate, extra) {\n        return this.callApi('banChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            until_date: untilDate,\n            ...extra,\n        });\n    }\n    /**\n     * Kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n     * @param untilDate Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n     * @deprecated since API 5.3. Use {@link Telegram.banChatMember}\n     */\n    get kickChatMember() {\n        return this.banChatMember;\n    }\n    /**\n     * Promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     */\n    promoteChatMember(chatId, userId, extra) {\n        return this.callApi('promoteChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            ...extra,\n        });\n    }\n    /**\n     * Restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all boolean parameters to lift restrictions from a user.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     */\n    restrictChatMember(chatId, userId, extra) {\n        return this.callApi('restrictChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            ...extra,\n        });\n    }\n    setChatAdministratorCustomTitle(chatId, userId, title) {\n        return this.callApi('setChatAdministratorCustomTitle', {\n            chat_id: chatId,\n            user_id: userId,\n            custom_title: title,\n        });\n    }\n    /**\n     * Export an invite link to a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    exportChatInviteLink(chatId) {\n        return this.callApi('exportChatInviteLink', { chat_id: chatId });\n    }\n    createChatInviteLink(chatId, extra) {\n        return this.callApi('createChatInviteLink', {\n            chat_id: chatId,\n            ...extra,\n        });\n    }\n    createInvoiceLink(invoice) {\n        return this.callApi('createInvoiceLink', {\n            ...invoice,\n        });\n    }\n    editChatInviteLink(chatId, inviteLink, extra) {\n        return this.callApi('editChatInviteLink', {\n            chat_id: chatId,\n            invite_link: inviteLink,\n            ...extra,\n        });\n    }\n    revokeChatInviteLink(chatId, inviteLink) {\n        return this.callApi('revokeChatInviteLink', {\n            chat_id: chatId,\n            invite_link: inviteLink,\n        });\n    }\n    setChatPhoto(chatId, photo) {\n        return this.callApi('setChatPhoto', { chat_id: chatId, photo });\n    }\n    deleteChatPhoto(chatId) {\n        return this.callApi('deleteChatPhoto', { chat_id: chatId });\n    }\n    /**\n     * Change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)\n     * @param title New chat title, 1-255 characters\n     */\n    setChatTitle(chatId, title) {\n        return this.callApi('setChatTitle', { chat_id: chatId, title });\n    }\n    setChatDescription(chatId, description) {\n        return this.callApi('setChatDescription', { chat_id: chatId, description });\n    }\n    /**\n     * Pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in the supergroup or 'can_edit_messages' admin right in the channel.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     */\n    pinChatMessage(chatId, messageId, extra) {\n        return this.callApi('pinChatMessage', {\n            chat_id: chatId,\n            message_id: messageId,\n            ...extra,\n        });\n    }\n    /**\n     * Unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in the supergroup or 'can_edit_messages' admin right in the channel.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    unpinChatMessage(chatId, messageId) {\n        return this.callApi('unpinChatMessage', {\n            chat_id: chatId,\n            message_id: messageId,\n        });\n    }\n    /**\n     * Clear the list of pinned messages in a chat.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    unpinAllChatMessages(chatId) {\n        return this.callApi('unpinAllChatMessages', { chat_id: chatId });\n    }\n    /**\n     * Use this method for your bot to leave a group, supergroup or channel.\n     * @param chatId Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n     */\n    leaveChat(chatId) {\n        return this.callApi('leaveChat', { chat_id: chatId });\n    }\n    /**\n     * Unban a user from a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.\n     * @param chatId Unique identifier for the target group or username of the target supergroup or channel (in the format @username)\n     * @param userId Unique identifier of the target user\n     */\n    unbanChatMember(chatId, userId, extra) {\n        return this.callApi('unbanChatMember', {\n            chat_id: chatId,\n            user_id: userId,\n            ...extra,\n        });\n    }\n    answerCbQuery(callbackQueryId, text, extra) {\n        return this.callApi('answerCallbackQuery', {\n            text,\n            callback_query_id: callbackQueryId,\n            ...extra,\n        });\n    }\n    answerGameQuery(callbackQueryId, url) {\n        return this.callApi('answerCallbackQuery', {\n            url,\n            callback_query_id: callbackQueryId,\n        });\n    }\n    /**\n     * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n     * the Bot API will send an Update with a shipping_query field to the bot.\n     * Reply to shipping queries.\n     * @param ok  Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)\n     * @param shippingOptions Required if ok is True. A JSON-serialized array of available shipping options.\n     * @param errorMessage Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.\n     */\n    answerShippingQuery(shippingQueryId, ok, shippingOptions, errorMessage) {\n        return this.callApi('answerShippingQuery', {\n            ok,\n            shipping_query_id: shippingQueryId,\n            shipping_options: shippingOptions,\n            error_message: errorMessage,\n        });\n    }\n    /**\n     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query.\n     * Respond to such pre-checkout queries. On success, True is returned.\n     * Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n     * @param ok  Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.\n     * @param errorMessage Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n     */\n    answerPreCheckoutQuery(preCheckoutQueryId, ok, errorMessage) {\n        return this.callApi('answerPreCheckoutQuery', {\n            ok,\n            pre_checkout_query_id: preCheckoutQueryId,\n            error_message: errorMessage,\n        });\n    }\n    answerWebAppQuery(webAppQueryId, result) {\n        return this.callApi('answerWebAppQuery', {\n            web_app_query_id: webAppQueryId,\n            result,\n        });\n    }\n    /**\n     * Edit text and game messages sent by the bot or via the bot (for inline bots).\n     * On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param text New text of the message\n     */\n    editMessageText(chatId, messageId, inlineMessageId, text, extra) {\n        const t = format_1.FmtString.normalise(text);\n        return this.callApi('editMessageText', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            ...extra,\n            ...t,\n        });\n    }\n    /**\n     * Edit captions of messages sent by the bot or via the bot (for inline bots).\n     * On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param caption New caption of the message\n     * @param markup A JSON-serialized object for an inline keyboard.\n     */\n    editMessageCaption(chatId, messageId, inlineMessageId, caption, extra) {\n        return this.callApi('editMessageCaption', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            ...extra,\n            ...(0, util_1.fmtCaption)({ caption }),\n        });\n    }\n    /**\n     * Edit animation, audio, document, photo, or video messages.\n     * If a message is a part of a message album, then it can be edited only to a photo or a video.\n     * Otherwise, message type can be changed arbitrarily.\n     * When inline message is edited, new file can't be uploaded.\n     * Use previously uploaded file via its file_id or specify a URL.\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param media New media of message\n     * @param markup Markup of inline keyboard\n     */\n    editMessageMedia(chatId, messageId, inlineMessageId, media, extra) {\n        return this.callApi('editMessageMedia', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            media: (0, util_1.fmtCaption)(media),\n            ...extra,\n        });\n    }\n    /**\n     * Edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n     * @param chatId Required if inlineMessageId is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param messageId Required if inlineMessageId is not specified. Identifier of the sent message\n     * @param inlineMessageId Required if chatId and messageId are not specified. Identifier of the inline message\n     * @param markup A JSON-serialized object for an inline keyboard.\n     * @returns If edited message is sent by the bot, the edited Message is returned, otherwise True is returned.\n     */\n    editMessageReplyMarkup(chatId, messageId, inlineMessageId, markup) {\n        return this.callApi('editMessageReplyMarkup', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            reply_markup: markup,\n        });\n    }\n    editMessageLiveLocation(chatId, messageId, inlineMessageId, latitude, longitude, extra) {\n        return this.callApi('editMessageLiveLocation', {\n            latitude,\n            longitude,\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            ...extra,\n        });\n    }\n    stopMessageLiveLocation(chatId, messageId, inlineMessageId, markup) {\n        return this.callApi('stopMessageLiveLocation', {\n            chat_id: chatId,\n            message_id: messageId,\n            inline_message_id: inlineMessageId,\n            reply_markup: markup,\n        });\n    }\n    /**\n     * Delete a message, including service messages, with the following limitations:\n     * - A message can only be deleted if it was sent less than 48 hours ago.\n     * - Bots can delete outgoing messages in groups and supergroups.\n     * - Bots granted can_post_messages permissions can delete outgoing messages in channels.\n     * - If the bot is an administrator of a group, it can delete any message there.\n     * - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     */\n    deleteMessage(chatId, messageId) {\n        return this.callApi('deleteMessage', {\n            chat_id: chatId,\n            message_id: messageId,\n        });\n    }\n    setChatStickerSet(chatId, setName) {\n        return this.callApi('setChatStickerSet', {\n            chat_id: chatId,\n            sticker_set_name: setName,\n        });\n    }\n    deleteChatStickerSet(chatId) {\n        return this.callApi('deleteChatStickerSet', { chat_id: chatId });\n    }\n    /**\n     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n     * Requires no parameters. Returns an Array of Sticker objects.\n     *\n     * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n     */\n    getForumTopicIconStickers() {\n        return this.callApi('getForumTopicIconStickers', {});\n    }\n    /**\n     * Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this\n     * to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a\n     * ForumTopic object.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param name Topic name, 1-128 characters\n     *\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n    createForumTopic(chat_id, name, extra) {\n        return this.callApi('createForumTopic', {\n            chat_id,\n            name,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the\n     * topic. Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n    editForumTopic(chat_id, message_thread_id, extra) {\n        return this.callApi('editForumTopic', {\n            chat_id,\n            message_thread_id,\n            ...extra,\n        });\n    }\n    /**\n     * Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n    closeForumTopic(chat_id, message_thread_id) {\n        return this.callApi('closeForumTopic', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     * Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n    reopenForumTopic(chat_id, message_thread_id) {\n        return this.callApi('reopenForumTopic', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an\n     * administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     * Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n    deleteForumTopic(chat_id, message_thread_id) {\n        return this.callApi('deleteForumTopic', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat\n     * for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n     *\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message_thread_id Unique identifier for the target message thread of the forum topic\n     *\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n    unpinAllForumTopicMessages(chat_id, message_thread_id) {\n        return this.callApi('unpinAllForumTopicMessages', {\n            chat_id,\n            message_thread_id,\n        });\n    }\n    /**\n     * Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator\n     * in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     * @param name New topic name, 1-128 characters\n     *\n     * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n     */\n    editGeneralForumTopic(chat_id, name) {\n        return this.callApi('editGeneralForumTopic', { chat_id, name });\n    }\n    /**\n     * Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n     */\n    closeGeneralForumTopic(chat_id) {\n        return this.callApi('closeGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in\n     * the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically\n     * unhidden if it was hidden. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n     */\n    reopenGeneralForumTopic(chat_id) {\n        return this.callApi('reopenGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat\n     * for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed\n     * if it was open. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n     */\n    hideGeneralForumTopic(chat_id) {\n        return this.callApi('hideGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the\n     * chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     *\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n    unhideGeneralForumTopic(chat_id) {\n        return this.callApi('unhideGeneralForumTopic', { chat_id });\n    }\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator\n     * right in the supergroup.\n     *\n     * @param chat_id Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n     */\n    unpinAllGeneralForumTopicMessages(chat_id) {\n        return this.callApi('unpinAllGeneralForumTopicMessages', { chat_id });\n    }\n    getStickerSet(name) {\n        return this.callApi('getStickerSet', { name });\n    }\n    /**\n     * Upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times).\n     * https://core.telegram.org/bots/api#sending-files\n     * @param ownerId User identifier of sticker file owner\n     * @param stickerFile Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px.\n     */\n    uploadStickerFile(ownerId, sticker, sticker_format) {\n        return this.callApi('uploadStickerFile', {\n            user_id: ownerId,\n            sticker_format,\n            sticker,\n        });\n    }\n    /**\n     * Create new sticker set owned by a user. The bot will be able to edit the created sticker set.\n     * @param ownerId User identifier of created sticker set owner\n     * @param name Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in “_by_<bot username>”. <bot_username> is case insensitive. 1-64 characters.\n     * @param title Sticker set title, 1-64 characters\n     */\n    createNewStickerSet(ownerId, name, title, stickerData) {\n        return this.callApi('createNewStickerSet', {\n            name,\n            title,\n            user_id: ownerId,\n            ...stickerData,\n        });\n    }\n    /**\n     * Add a new sticker to a set created by the bot.\n     * @param ownerId User identifier of sticker set owner\n     * @param name Sticker set name\n     */\n    addStickerToSet(ownerId, name, stickerData) {\n        return this.callApi('addStickerToSet', {\n            name,\n            user_id: ownerId,\n            ...stickerData,\n        });\n    }\n    /**\n     * Move a sticker in a set created by the bot to a specific position.\n     * @param sticker File identifier of the sticker\n     * @param position New sticker position in the set, zero-based\n     */\n    setStickerPositionInSet(sticker, position) {\n        return this.callApi('setStickerPositionInSet', {\n            sticker,\n            position,\n        });\n    }\n    /**\n     * @deprecated since API 6.8. Use {@link Telegram.setStickerSetThumbnail}\n     */\n    get setStickerSetThumb() {\n        return this.setStickerSetThumbnail;\n    }\n    /**\n     * Use this method to set the thumbnail of a regular or mask sticker set.\n     * The format of the thumbnail file must match the format of the stickers in the set.\n     * @param name Sticker set name\n     * @param userId User identifier of the sticker set owner\n     * @param thumbnail A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size\n     * and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to\n     * 32 kilobytes in size (see\n     * [animated sticker technical requirements](https://core.telegram.org/stickers#animated-sticker-requirements)),\n     * or a WEBM video with the thumbnail up to 32 kilobytes in size; see\n     * [video sticker technical requirements](https://core.telegram.org/stickers#video-sticker-requirements).\n     * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass a\n     * HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using\n     * Input helpers. Animated and video sticker set thumbnails can't be uploaded via HTTP URL.\n     * If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.\n     */\n    setStickerSetThumbnail(name, userId, thumbnail) {\n        return this.callApi('setStickerSetThumbnail', {\n            name,\n            user_id: userId,\n            thumbnail,\n        });\n    }\n    setStickerMaskPosition(sticker, mask_position) {\n        return this.callApi('setStickerMaskPosition', { sticker, mask_position });\n    }\n    setStickerKeywords(sticker, keywords) {\n        return this.callApi('setStickerKeywords', { sticker, keywords });\n    }\n    setStickerEmojiList(sticker, emoji_list) {\n        return this.callApi('setStickerEmojiList', { sticker, emoji_list });\n    }\n    deleteStickerSet(name) {\n        return this.callApi('deleteStickerSet', { name });\n    }\n    setStickerSetTitle(name, title) {\n        return this.callApi('setStickerSetTitle', { name, title });\n    }\n    setCustomEmojiStickerSetThumbnail(name, custom_emoji_id) {\n        return this.callApi('setCustomEmojiStickerSetThumbnail', {\n            name,\n            custom_emoji_id,\n        });\n    }\n    /**\n     * Delete a sticker from a set created by the bot.\n     * @param sticker File identifier of the sticker\n     */\n    deleteStickerFromSet(sticker) {\n        return this.callApi('deleteStickerFromSet', { sticker });\n    }\n    getCustomEmojiStickers(custom_emoji_ids) {\n        return this.callApi('getCustomEmojiStickers', { custom_emoji_ids });\n    }\n    /**\n     * Change the list of the bot's commands.\n     * @param commands A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n     */\n    setMyCommands(commands, extra) {\n        return this.callApi('setMyCommands', { commands, ...extra });\n    }\n    deleteMyCommands(extra = {}) {\n        return this.callApi('deleteMyCommands', extra);\n    }\n    /**\n     * Get the current list of the bot's commands.\n     */\n    getMyCommands(extra = {}) {\n        return this.callApi('getMyCommands', extra);\n    }\n    /**\n     * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n     * @param description New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.\n     * @param language_code A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.\n     */\n    setMyDescription(description, language_code) {\n        return this.callApi('setMyDescription', { description, language_code });\n    }\n    /**\n     * Use this method to change the bot's name.\n     * @param name New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.\n     * @param language_code A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.\n     */\n    setMyName(name, language_code) {\n        return this.callApi('setMyName', { name, language_code });\n    }\n    /**\n     * Use this method to get the current bot name for the given user language.\n     * @param language_code A two-letter ISO 639-1 language code or an empty string\n     */\n    getMyName(language_code) {\n        return this.callApi('getMyName', { language_code });\n    }\n    /**\n     * Use this method to get the current bot description for the given user language.\n     * @param language_code A two-letter ISO 639-1 language code.\n     */\n    getMyDescription(language_code) {\n        return this.callApi('getMyDescription', { language_code });\n    }\n    /**\n     * Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot.\n     * @param description New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.\n     * @param language_code A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.\n     */\n    setMyShortDescription(short_description, language_code) {\n        return this.callApi('setMyShortDescription', {\n            short_description,\n            language_code,\n        });\n    }\n    /**\n     * Use this method to get the current bot short description for the given user language.\n     * @param language_code A two-letter ISO 639-1 language code or an empty string\n     */\n    getMyShortDescription(language_code) {\n        return this.callApi('getMyShortDescription', { language_code });\n    }\n    setPassportDataErrors(userId, errors) {\n        return this.callApi('setPassportDataErrors', {\n            user_id: userId,\n            errors: errors,\n        });\n    }\n    /**\n     * Send copy of existing message.\n     * @deprecated use `copyMessage` instead\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param message Received message object\n     */\n    sendCopy(chatId, message, extra) {\n        return this.copyMessage(chatId, message.chat.id, message.message_id, extra);\n    }\n    /**\n     * Send copy of existing message.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param fromChatId Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\n     * @param messageId Message identifier in the chat specified in from_chat_id\n     */\n    copyMessage(chatId, fromChatId, messageId, extra) {\n        return this.callApi('copyMessage', {\n            chat_id: chatId,\n            from_chat_id: fromChatId,\n            message_id: messageId,\n            ...(0, util_1.fmtCaption)(extra),\n        });\n    }\n    /**\n     * Approve a chat join request.\n     * The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param userId Unique identifier of the target user\n     */\n    approveChatJoinRequest(chatId, userId) {\n        return this.callApi('approveChatJoinRequest', {\n            chat_id: chatId,\n            user_id: userId,\n        });\n    }\n    /**\n     * Decline a chat join request.\n     * The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param userId Unique identifier of the target user\n     */\n    declineChatJoinRequest(chatId, userId) {\n        return this.callApi('declineChatJoinRequest', {\n            chat_id: chatId,\n            user_id: userId,\n        });\n    }\n    /**\n     * Ban a channel chat in a supergroup or a channel. The owner of the chat will not be able to send messages and join live streams on behalf of the chat, unless it is unbanned first.\n     * The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param senderChatId Unique identifier of the target sender chat\n     */\n    banChatSenderChat(chatId, senderChatId, extra) {\n        return this.callApi('banChatSenderChat', {\n            chat_id: chatId,\n            sender_chat_id: senderChatId,\n            ...extra,\n        });\n    }\n    /**\n     * Unban a previously banned channel chat in a supergroup or channel.\n     * The bot must be an administrator for this to work and must have the appropriate administrator rights.\n     * @param chatId Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param senderChatId Unique identifier of the target sender chat\n     */\n    unbanChatSenderChat(chatId, senderChatId) {\n        return this.callApi('unbanChatSenderChat', {\n            chat_id: chatId,\n            sender_chat_id: senderChatId,\n        });\n    }\n    /**\n     * Use this method to change the bot's menu button in a private chat, or the default menu button. Returns true on success.\n     * @param chatId Unique identifier for the target private chat. If not specified, default bot's menu button will be changed.\n     * @param menuButton An object for the bot's new menu button.\n     */\n    setChatMenuButton({ chatId, menuButton, } = {}) {\n        return this.callApi('setChatMenuButton', {\n            chat_id: chatId,\n            menu_button: menuButton,\n        });\n    }\n    /**\n     * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.\n     * @param chatId Unique identifier for the target private chat. If not specified, default bot's menu button will be returned.\n     */\n    getChatMenuButton({ chatId } = {}) {\n        return this.callApi('getChatMenuButton', {\n            chat_id: chatId,\n        });\n    }\n    /**\n     * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n     * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n     */\n    setMyDefaultAdministratorRights({ rights, forChannels, } = {}) {\n        return this.callApi('setMyDefaultAdministratorRights', {\n            rights,\n            for_channels: forChannels,\n        });\n    }\n    /**\n     * Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.\n     * @param forChannels Pass true to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.\n     */\n    getMyDefaultAdministratorRights({ forChannels, } = {}) {\n        return this.callApi('getMyDefaultAdministratorRights', {\n            for_channels: forChannels,\n        });\n    }\n    /**\n     * Log out from the cloud Bot API server before launching the bot locally.\n     */\n    logOut() {\n        return this.callApi('logOut', {});\n    }\n    /**\n     * Close the bot instance before moving it from one local server to another.\n     */\n    close() {\n        return this.callApi('close', {});\n    }\n}\nexports.Telegram = Telegram;\nexports[\"default\"] = Telegram;\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/telegraf/lib/telegram.js?");

/***/ }),

/***/ "./node_modules/node-fetch/lib/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/node-fetch/lib/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   FetchError: () => (/* binding */ FetchError),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var whatwg_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! whatwg-url */ \"./node_modules/whatwg-url/lib/public-api.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zlib */ \"zlib\");\n\n\n\n\n\n\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = stream__WEBPACK_IMPORTED_MODULE_0__.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof stream__WEBPACK_IMPORTED_MODULE_0__)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\t\tif (!res) {\n\t\t\tres = /<meta[\\s]+?content=(['\"])(.+?)\\1[\\s]+?http-equiv=(['\"])content-type\\3/i.exec(str);\n\t\t\tif (res) {\n\t\t\t\tres.pop(); // drop last quote\n\t\t\t}\n\t\t}\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__ && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http__WEBPACK_IMPORTED_MODULE_1__.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\nconst URL = url__WEBPACK_IMPORTED_MODULE_2__.URL || whatwg_url__WEBPACK_IMPORTED_MODULE_3__.URL;\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = url__WEBPACK_IMPORTED_MODULE_2__.parse;\nconst format_url = url__WEBPACK_IMPORTED_MODULE_2__.format;\n\n/**\n * Wrapper around `new URL` to handle arbitrary URLs\n *\n * @param  {string} urlStr\n * @return {void}\n */\nfunction parseURL(urlStr) {\n\t/*\n \tCheck whether the URL is absolute or not\n \t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\n \tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n */\n\tif (/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.exec(urlStr)) {\n\t\turlStr = new URL(urlStr).toString();\n\t}\n\n\t// Fallback to old implementation for arbitrary URLs\n\treturn parse_url(urlStr);\n}\n\nconst streamDestructionSupported = \"destroy\" in stream__WEBPACK_IMPORTED_MODULE_0__.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parseURL(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parseURL(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parseURL(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\nconst URL$1 = url__WEBPACK_IMPORTED_MODULE_2__.URL || whatwg_url__WEBPACK_IMPORTED_MODULE_3__.URL;\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;\n\nconst isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {\n\tconst orig = new URL$1(original).hostname;\n\tconst dest = new URL$1(destination).hostname;\n\n\treturn orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = function isSameProtocol(destination, original) {\n\tconst orig = new URL$1(original).protocol;\n\tconst dest = new URL$1(destination).protocol;\n\n\treturn orig === dest;\n};\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https__WEBPACK_IMPORTED_MODULE_4__ : http__WEBPACK_IMPORTED_MODULE_1__).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable) {\n\t\t\t\tdestroyStream(request.body, error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(req, function (err) {\n\t\t\tif (signal && signal.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (parseInt(process.version.substring(1)) < 14) {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\treq.on('socket', function (s) {\n\t\t\t\ts.addListener('close', function (hadError) {\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0;\n\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n\t\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL$1(location, request.url).toString();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOpts.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib__WEBPACK_IMPORTED_MODULE_5__.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib__WEBPACK_IMPORTED_MODULE_5__.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.on('end', function () {\n\t\t\t\t\t// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib__WEBPACK_IMPORTED_MODULE_5__.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tlet socket;\n\n\trequest.on('socket', function (s) {\n\t\tsocket = s;\n\t});\n\n\trequest.on('response', function (response) {\n\t\tconst headers = response.headers;\n\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n\t\t\tresponse.once('close', function (hadError) {\n\t\t\t\t// tests for socket presence, as in some situations the\n\t\t\t\t// the 'socket' event is not triggered for the request\n\t\t\t\t// (happens in deno), avoids `TypeError`\n\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\tconst hasDataListener = socket && socket.listenerCount('data') > 0;\n\n\t\t\t\tif (hasDataListener && !hadError) {\n\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction destroyStream(stream, err) {\n\tif (stream.destroy) {\n\t\tstream.destroy(err);\n\t} else {\n\t\t// node < 8\n\t\tstream.emit('error', err);\n\t\tstream.end();\n\t}\n}\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fetch);\n\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/node-fetch/lib/index.mjs?");

/***/ }),

/***/ "./node_modules/sandwich-stream/dist/sandwich-stream.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/sandwich-stream/dist/sandwich-stream.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandwichStream: () => (/* binding */ SandwichStream),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\n\n/**\r\n * Handles Readable streams requests as concatenation through data handling as\r\n * well adding tags it each begin, end and between of the streams\r\n */\r\nclass SandwichStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\r\n    /**\r\n     * Initiates the SandwichStream, you can consider it also passing\r\n     * ReadableOptions to it\r\n     *\r\n     * @param head Pushes this content before all other content\r\n     * @param tail Pushes this content after all other data has been pushed\r\n     * @param separator Pushes this content between each stream\r\n     * @param remaining The other kind of options to be passed to Readable\r\n     * @example\r\n     * const ss = new SandwichStream({\r\n     *     head: 'This at the top\\n',\r\n     *     tail: '\\nThis at the bottom',\r\n     *     separator: '\\n --- \\n'\r\n     * });\r\n     */\r\n    constructor(_a) {\r\n        var { head, tail, separator } = _a, remaining = __rest(_a, [\"head\", \"tail\", \"separator\"]);\r\n        super(remaining);\r\n        this.streamsActive = false;\r\n        this.streams = [];\r\n        this.newStreams = [];\r\n        this.currentStream = null;\r\n        this.head = (null !== head && undefined !== head) ? head : null;\r\n        this.tail = (null !== tail && undefined !== tail) ? tail : null;\r\n        this.separator = (null !== separator && undefined !== separator) ? separator : null;\r\n    }\r\n    /**\r\n     * Add a new Readable stream in the queue\r\n     *\r\n     * @param newStream The Readable stream\r\n     * @example\r\n     * sandwichStream.add(streamOne);\r\n     * sandwichStream.add(streamTwo);\r\n     * sandwichStream.add(streamThree);\r\n     * @throws An Error in case that this request was not accepted\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    add(newStream) {\r\n        if (false === this.streamsActive) {\r\n            this.streams.push(newStream);\r\n            newStream.on('error', this.subStreamOnError.bind(this));\r\n        }\r\n        else {\r\n            this.newStreams.push(newStream);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Works in a similar way from the Readable read, only that this one checks\r\n     * for whether or not a stream is already being handled\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    _read() {\r\n        if (false === this.streamsActive) {\r\n            this.streamsActive = true;\r\n            this.pushHead();\r\n            this.streamNextStream();\r\n        }\r\n    }\r\n    /**\r\n     * Binds an error thrown from one of the streams being handled\r\n     *\r\n     * @param err Error to be bind\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    subStreamOnError(err) {\r\n        this.emit('error', err);\r\n    }\r\n    /**\r\n     * Fetches the next stream to be handled\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    streamNextStream() {\r\n        if (true === this.nextStream()) {\r\n            this.bindCurrentStreamEvents();\r\n        }\r\n        else {\r\n            this.pushTail();\r\n            this.push(null);\r\n        }\r\n    }\r\n    /**\r\n     * Verifies whether or not the stream queue has ended\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    nextStream() {\r\n        const tmp = this.streams.shift();\r\n        this.currentStream = (undefined !== tmp) ? tmp : null;\r\n        return null !== this.currentStream;\r\n    }\r\n    /**\r\n     * Once the current stream starts to pass their data, this handles it in a\r\n     * less complicated way\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    bindCurrentStreamEvents() {\r\n        this.currentStream.on('readable', this.currentStreamOnReadable.bind(this));\r\n        this.currentStream.on('end', this.currentStreamOnEnd.bind(this));\r\n    }\r\n    /**\r\n     * Handles the data from a current stream once they are being streamed\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    currentStreamOnReadable() {\r\n        const tmp = this.currentStream.read();\r\n        const data = (undefined !== tmp && null !== tmp) ? tmp : '';\r\n        this.push(data);\r\n    }\r\n    /**\r\n     * Handles the tagging once a stream is finished\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    currentStreamOnEnd() {\r\n        this.pushSeparator();\r\n        this.streams.concat(this.newStreams);\r\n        this.newStreams = [];\r\n        this.streamNextStream();\r\n    }\r\n    /**\r\n     * Adds the head tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushHead() {\r\n        if (null !== this.head) {\r\n            this.push(this.head);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the separator tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushSeparator() {\r\n        if (0 < this.streams.length && null !== this.separator) {\r\n            this.push(this.separator);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the tail tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushTail() {\r\n        if (null !== this.tail) {\r\n            this.push(this.tail);\r\n        }\r\n    }\r\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SandwichStream);\n\n\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/sandwich-stream/dist/sandwich-stream.mjs?");

/***/ }),

/***/ "./node_modules/dotenv/package.json":
/*!******************************************!*\
  !*** ./node_modules/dotenv/package.json ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"name\":\"dotenv\",\"version\":\"16.3.1\",\"description\":\"Loads environment variables from .env file\",\"main\":\"lib/main.js\",\"types\":\"lib/main.d.ts\",\"exports\":{\".\":{\"types\":\"./lib/main.d.ts\",\"require\":\"./lib/main.js\",\"default\":\"./lib/main.js\"},\"./config\":\"./config.js\",\"./config.js\":\"./config.js\",\"./lib/env-options\":\"./lib/env-options.js\",\"./lib/env-options.js\":\"./lib/env-options.js\",\"./lib/cli-options\":\"./lib/cli-options.js\",\"./lib/cli-options.js\":\"./lib/cli-options.js\",\"./package.json\":\"./package.json\"},\"scripts\":{\"dts-check\":\"tsc --project tests/types/tsconfig.json\",\"lint\":\"standard\",\"lint-readme\":\"standard-markdown\",\"pretest\":\"npm run lint && npm run dts-check\",\"test\":\"tap tests/*.js --100 -Rspec\",\"prerelease\":\"npm test\",\"release\":\"standard-version\"},\"repository\":{\"type\":\"git\",\"url\":\"git://github.com/motdotla/dotenv.git\"},\"funding\":\"https://github.com/motdotla/dotenv?sponsor=1\",\"keywords\":[\"dotenv\",\"env\",\".env\",\"environment\",\"variables\",\"config\",\"settings\"],\"readmeFilename\":\"README.md\",\"license\":\"BSD-2-Clause\",\"devDependencies\":{\"@definitelytyped/dtslint\":\"^0.0.133\",\"@types/node\":\"^18.11.3\",\"decache\":\"^4.6.1\",\"sinon\":\"^14.0.1\",\"standard\":\"^17.0.0\",\"standard-markdown\":\"^7.1.0\",\"standard-version\":\"^9.5.0\",\"tap\":\"^16.3.0\",\"tar\":\"^6.1.11\",\"typescript\":\"^4.8.4\"},\"engines\":{\"node\":\">=12\"},\"browser\":{\"fs\":false}}');\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/dotenv/package.json?");

/***/ }),

/***/ "./node_modules/pg-promise/package.json":
/*!**********************************************!*\
  !*** ./node_modules/pg-promise/package.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"name\":\"pg-promise\",\"version\":\"11.5.4\",\"description\":\"PostgreSQL interface for Node.js\",\"main\":\"lib/index.js\",\"typings\":\"typescript/pg-promise.d.ts\",\"scripts\":{\"spelling\":\"cspell --config=.cspell.json \\\\\"**/*.{md,ts,js}\\\\\" --no-progress\",\"coverage\":\"istanbul cover ./node_modules/jasmine-node/bin/jasmine-node --captureExceptions test\",\"doc\":\"jsdoc -c ./jsdoc/jsdoc.js ./jsdoc/README.md -t ./jsdoc/templates/custom\",\"lint\":\"eslint ./lib ./test/*.js ./test/db --fix\",\"test\":\"jasmine-node --captureExceptions test\",\"test:init\":\"node test/db/init.js\",\"test:native\":\"jasmine-node test --config PG_NATIVE true\",\"tslint\":\"tslint ./typescript/*.ts\"},\"files\":[\"lib\",\"typescript\"],\"homepage\":\"https://github.com/vitaly-t/pg-promise\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/vitaly-t/pg-promise.git\"},\"bugs\":{\"url\":\"https://github.com/vitaly-t/pg-promise/issues\",\"email\":\"vitaly.tomilov@gmail.com\"},\"keywords\":[\"pg\",\"promise\",\"postgres\"],\"author\":{\"name\":\"Vitaly Tomilov\",\"email\":\"vitaly.tomilov@gmail.com\"},\"license\":\"MIT\",\"engines\":{\"node\":\">=14.0\"},\"dependencies\":{\"assert-options\":\"0.8.1\",\"pg\":\"8.11.3\",\"pg-minify\":\"1.6.3\",\"spex\":\"3.3.0\"},\"devDependencies\":{\"@types/node\":\"20.5.2\",\"bluebird\":\"3.7.2\",\"coveralls\":\"3.1.1\",\"cspell\":\"7.0.1\",\"eslint\":\"8.47.0\",\"istanbul\":\"0.4.5\",\"jasmine-node\":\"3.0.0\",\"jsdoc\":\"4.0.2\",\"JSONStream\":\"1.3.5\",\"pg-query-stream\":\"4.5.3\",\"tslint\":\"6.1.3\",\"typescript\":\"5.1.6\"}}');\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/pg-promise/package.json?");

/***/ }),

/***/ "./node_modules/tr46/lib/mappingTable.json":
/*!*************************************************!*\
  !*** ./node_modules/tr46/lib/mappingTable.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('[[[0,44],\"disallowed_STD3_valid\"],[[45,46],\"valid\"],[[47,47],\"disallowed_STD3_valid\"],[[48,57],\"valid\"],[[58,64],\"disallowed_STD3_valid\"],[[65,65],\"mapped\",[97]],[[66,66],\"mapped\",[98]],[[67,67],\"mapped\",[99]],[[68,68],\"mapped\",[100]],[[69,69],\"mapped\",[101]],[[70,70],\"mapped\",[102]],[[71,71],\"mapped\",[103]],[[72,72],\"mapped\",[104]],[[73,73],\"mapped\",[105]],[[74,74],\"mapped\",[106]],[[75,75],\"mapped\",[107]],[[76,76],\"mapped\",[108]],[[77,77],\"mapped\",[109]],[[78,78],\"mapped\",[110]],[[79,79],\"mapped\",[111]],[[80,80],\"mapped\",[112]],[[81,81],\"mapped\",[113]],[[82,82],\"mapped\",[114]],[[83,83],\"mapped\",[115]],[[84,84],\"mapped\",[116]],[[85,85],\"mapped\",[117]],[[86,86],\"mapped\",[118]],[[87,87],\"mapped\",[119]],[[88,88],\"mapped\",[120]],[[89,89],\"mapped\",[121]],[[90,90],\"mapped\",[122]],[[91,96],\"disallowed_STD3_valid\"],[[97,122],\"valid\"],[[123,127],\"disallowed_STD3_valid\"],[[128,159],\"disallowed\"],[[160,160],\"disallowed_STD3_mapped\",[32]],[[161,167],\"valid\",[],\"NV8\"],[[168,168],\"disallowed_STD3_mapped\",[32,776]],[[169,169],\"valid\",[],\"NV8\"],[[170,170],\"mapped\",[97]],[[171,172],\"valid\",[],\"NV8\"],[[173,173],\"ignored\"],[[174,174],\"valid\",[],\"NV8\"],[[175,175],\"disallowed_STD3_mapped\",[32,772]],[[176,177],\"valid\",[],\"NV8\"],[[178,178],\"mapped\",[50]],[[179,179],\"mapped\",[51]],[[180,180],\"disallowed_STD3_mapped\",[32,769]],[[181,181],\"mapped\",[956]],[[182,182],\"valid\",[],\"NV8\"],[[183,183],\"valid\"],[[184,184],\"disallowed_STD3_mapped\",[32,807]],[[185,185],\"mapped\",[49]],[[186,186],\"mapped\",[111]],[[187,187],\"valid\",[],\"NV8\"],[[188,188],\"mapped\",[49,8260,52]],[[189,189],\"mapped\",[49,8260,50]],[[190,190],\"mapped\",[51,8260,52]],[[191,191],\"valid\",[],\"NV8\"],[[192,192],\"mapped\",[224]],[[193,193],\"mapped\",[225]],[[194,194],\"mapped\",[226]],[[195,195],\"mapped\",[227]],[[196,196],\"mapped\",[228]],[[197,197],\"mapped\",[229]],[[198,198],\"mapped\",[230]],[[199,199],\"mapped\",[231]],[[200,200],\"mapped\",[232]],[[201,201],\"mapped\",[233]],[[202,202],\"mapped\",[234]],[[203,203],\"mapped\",[235]],[[204,204],\"mapped\",[236]],[[205,205],\"mapped\",[237]],[[206,206],\"mapped\",[238]],[[207,207],\"mapped\",[239]],[[208,208],\"mapped\",[240]],[[209,209],\"mapped\",[241]],[[210,210],\"mapped\",[242]],[[211,211],\"mapped\",[243]],[[212,212],\"mapped\",[244]],[[213,213],\"mapped\",[245]],[[214,214],\"mapped\",[246]],[[215,215],\"valid\",[],\"NV8\"],[[216,216],\"mapped\",[248]],[[217,217],\"mapped\",[249]],[[218,218],\"mapped\",[250]],[[219,219],\"mapped\",[251]],[[220,220],\"mapped\",[252]],[[221,221],\"mapped\",[253]],[[222,222],\"mapped\",[254]],[[223,223],\"deviation\",[115,115]],[[224,246],\"valid\"],[[247,247],\"valid\",[],\"NV8\"],[[248,255],\"valid\"],[[256,256],\"mapped\",[257]],[[257,257],\"valid\"],[[258,258],\"mapped\",[259]],[[259,259],\"valid\"],[[260,260],\"mapped\",[261]],[[261,261],\"valid\"],[[262,262],\"mapped\",[263]],[[263,263],\"valid\"],[[264,264],\"mapped\",[265]],[[265,265],\"valid\"],[[266,266],\"mapped\",[267]],[[267,267],\"valid\"],[[268,268],\"mapped\",[269]],[[269,269],\"valid\"],[[270,270],\"mapped\",[271]],[[271,271],\"valid\"],[[272,272],\"mapped\",[273]],[[273,273],\"valid\"],[[274,274],\"mapped\",[275]],[[275,275],\"valid\"],[[276,276],\"mapped\",[277]],[[277,277],\"valid\"],[[278,278],\"mapped\",[279]],[[279,279],\"valid\"],[[280,280],\"mapped\",[281]],[[281,281],\"valid\"],[[282,282],\"mapped\",[283]],[[283,283],\"valid\"],[[284,284],\"mapped\",[285]],[[285,285],\"valid\"],[[286,286],\"mapped\",[287]],[[287,287],\"valid\"],[[288,288],\"mapped\",[289]],[[289,289],\"valid\"],[[290,290],\"mapped\",[291]],[[291,291],\"valid\"],[[292,292],\"mapped\",[293]],[[293,293],\"valid\"],[[294,294],\"mapped\",[295]],[[295,295],\"valid\"],[[296,296],\"mapped\",[297]],[[297,297],\"valid\"],[[298,298],\"mapped\",[299]],[[299,299],\"valid\"],[[300,300],\"mapped\",[301]],[[301,301],\"valid\"],[[302,302],\"mapped\",[303]],[[303,303],\"valid\"],[[304,304],\"mapped\",[105,775]],[[305,305],\"valid\"],[[306,307],\"mapped\",[105,106]],[[308,308],\"mapped\",[309]],[[309,309],\"valid\"],[[310,310],\"mapped\",[311]],[[311,312],\"valid\"],[[313,313],\"mapped\",[314]],[[314,314],\"valid\"],[[315,315],\"mapped\",[316]],[[316,316],\"valid\"],[[317,317],\"mapped\",[318]],[[318,318],\"valid\"],[[319,320],\"mapped\",[108,183]],[[321,321],\"mapped\",[322]],[[322,322],\"valid\"],[[323,323],\"mapped\",[324]],[[324,324],\"valid\"],[[325,325],\"mapped\",[326]],[[326,326],\"valid\"],[[327,327],\"mapped\",[328]],[[328,328],\"valid\"],[[329,329],\"mapped\",[700,110]],[[330,330],\"mapped\",[331]],[[331,331],\"valid\"],[[332,332],\"mapped\",[333]],[[333,333],\"valid\"],[[334,334],\"mapped\",[335]],[[335,335],\"valid\"],[[336,336],\"mapped\",[337]],[[337,337],\"valid\"],[[338,338],\"mapped\",[339]],[[339,339],\"valid\"],[[340,340],\"mapped\",[341]],[[341,341],\"valid\"],[[342,342],\"mapped\",[343]],[[343,343],\"valid\"],[[344,344],\"mapped\",[345]],[[345,345],\"valid\"],[[346,346],\"mapped\",[347]],[[347,347],\"valid\"],[[348,348],\"mapped\",[349]],[[349,349],\"valid\"],[[350,350],\"mapped\",[351]],[[351,351],\"valid\"],[[352,352],\"mapped\",[353]],[[353,353],\"valid\"],[[354,354],\"mapped\",[355]],[[355,355],\"valid\"],[[356,356],\"mapped\",[357]],[[357,357],\"valid\"],[[358,358],\"mapped\",[359]],[[359,359],\"valid\"],[[360,360],\"mapped\",[361]],[[361,361],\"valid\"],[[362,362],\"mapped\",[363]],[[363,363],\"valid\"],[[364,364],\"mapped\",[365]],[[365,365],\"valid\"],[[366,366],\"mapped\",[367]],[[367,367],\"valid\"],[[368,368],\"mapped\",[369]],[[369,369],\"valid\"],[[370,370],\"mapped\",[371]],[[371,371],\"valid\"],[[372,372],\"mapped\",[373]],[[373,373],\"valid\"],[[374,374],\"mapped\",[375]],[[375,375],\"valid\"],[[376,376],\"mapped\",[255]],[[377,377],\"mapped\",[378]],[[378,378],\"valid\"],[[379,379],\"mapped\",[380]],[[380,380],\"valid\"],[[381,381],\"mapped\",[382]],[[382,382],\"valid\"],[[383,383],\"mapped\",[115]],[[384,384],\"valid\"],[[385,385],\"mapped\",[595]],[[386,386],\"mapped\",[387]],[[387,387],\"valid\"],[[388,388],\"mapped\",[389]],[[389,389],\"valid\"],[[390,390],\"mapped\",[596]],[[391,391],\"mapped\",[392]],[[392,392],\"valid\"],[[393,393],\"mapped\",[598]],[[394,394],\"mapped\",[599]],[[395,395],\"mapped\",[396]],[[396,397],\"valid\"],[[398,398],\"mapped\",[477]],[[399,399],\"mapped\",[601]],[[400,400],\"mapped\",[603]],[[401,401],\"mapped\",[402]],[[402,402],\"valid\"],[[403,403],\"mapped\",[608]],[[404,404],\"mapped\",[611]],[[405,405],\"valid\"],[[406,406],\"mapped\",[617]],[[407,407],\"mapped\",[616]],[[408,408],\"mapped\",[409]],[[409,411],\"valid\"],[[412,412],\"mapped\",[623]],[[413,413],\"mapped\",[626]],[[414,414],\"valid\"],[[415,415],\"mapped\",[629]],[[416,416],\"mapped\",[417]],[[417,417],\"valid\"],[[418,418],\"mapped\",[419]],[[419,419],\"valid\"],[[420,420],\"mapped\",[421]],[[421,421],\"valid\"],[[422,422],\"mapped\",[640]],[[423,423],\"mapped\",[424]],[[424,424],\"valid\"],[[425,425],\"mapped\",[643]],[[426,427],\"valid\"],[[428,428],\"mapped\",[429]],[[429,429],\"valid\"],[[430,430],\"mapped\",[648]],[[431,431],\"mapped\",[432]],[[432,432],\"valid\"],[[433,433],\"mapped\",[650]],[[434,434],\"mapped\",[651]],[[435,435],\"mapped\",[436]],[[436,436],\"valid\"],[[437,437],\"mapped\",[438]],[[438,438],\"valid\"],[[439,439],\"mapped\",[658]],[[440,440],\"mapped\",[441]],[[441,443],\"valid\"],[[444,444],\"mapped\",[445]],[[445,451],\"valid\"],[[452,454],\"mapped\",[100,382]],[[455,457],\"mapped\",[108,106]],[[458,460],\"mapped\",[110,106]],[[461,461],\"mapped\",[462]],[[462,462],\"valid\"],[[463,463],\"mapped\",[464]],[[464,464],\"valid\"],[[465,465],\"mapped\",[466]],[[466,466],\"valid\"],[[467,467],\"mapped\",[468]],[[468,468],\"valid\"],[[469,469],\"mapped\",[470]],[[470,470],\"valid\"],[[471,471],\"mapped\",[472]],[[472,472],\"valid\"],[[473,473],\"mapped\",[474]],[[474,474],\"valid\"],[[475,475],\"mapped\",[476]],[[476,477],\"valid\"],[[478,478],\"mapped\",[479]],[[479,479],\"valid\"],[[480,480],\"mapped\",[481]],[[481,481],\"valid\"],[[482,482],\"mapped\",[483]],[[483,483],\"valid\"],[[484,484],\"mapped\",[485]],[[485,485],\"valid\"],[[486,486],\"mapped\",[487]],[[487,487],\"valid\"],[[488,488],\"mapped\",[489]],[[489,489],\"valid\"],[[490,490],\"mapped\",[491]],[[491,491],\"valid\"],[[492,492],\"mapped\",[493]],[[493,493],\"valid\"],[[494,494],\"mapped\",[495]],[[495,496],\"valid\"],[[497,499],\"mapped\",[100,122]],[[500,500],\"mapped\",[501]],[[501,501],\"valid\"],[[502,502],\"mapped\",[405]],[[503,503],\"mapped\",[447]],[[504,504],\"mapped\",[505]],[[505,505],\"valid\"],[[506,506],\"mapped\",[507]],[[507,507],\"valid\"],[[508,508],\"mapped\",[509]],[[509,509],\"valid\"],[[510,510],\"mapped\",[511]],[[511,511],\"valid\"],[[512,512],\"mapped\",[513]],[[513,513],\"valid\"],[[514,514],\"mapped\",[515]],[[515,515],\"valid\"],[[516,516],\"mapped\",[517]],[[517,517],\"valid\"],[[518,518],\"mapped\",[519]],[[519,519],\"valid\"],[[520,520],\"mapped\",[521]],[[521,521],\"valid\"],[[522,522],\"mapped\",[523]],[[523,523],\"valid\"],[[524,524],\"mapped\",[525]],[[525,525],\"valid\"],[[526,526],\"mapped\",[527]],[[527,527],\"valid\"],[[528,528],\"mapped\",[529]],[[529,529],\"valid\"],[[530,530],\"mapped\",[531]],[[531,531],\"valid\"],[[532,532],\"mapped\",[533]],[[533,533],\"valid\"],[[534,534],\"mapped\",[535]],[[535,535],\"valid\"],[[536,536],\"mapped\",[537]],[[537,537],\"valid\"],[[538,538],\"mapped\",[539]],[[539,539],\"valid\"],[[540,540],\"mapped\",[541]],[[541,541],\"valid\"],[[542,542],\"mapped\",[543]],[[543,543],\"valid\"],[[544,544],\"mapped\",[414]],[[545,545],\"valid\"],[[546,546],\"mapped\",[547]],[[547,547],\"valid\"],[[548,548],\"mapped\",[549]],[[549,549],\"valid\"],[[550,550],\"mapped\",[551]],[[551,551],\"valid\"],[[552,552],\"mapped\",[553]],[[553,553],\"valid\"],[[554,554],\"mapped\",[555]],[[555,555],\"valid\"],[[556,556],\"mapped\",[557]],[[557,557],\"valid\"],[[558,558],\"mapped\",[559]],[[559,559],\"valid\"],[[560,560],\"mapped\",[561]],[[561,561],\"valid\"],[[562,562],\"mapped\",[563]],[[563,563],\"valid\"],[[564,566],\"valid\"],[[567,569],\"valid\"],[[570,570],\"mapped\",[11365]],[[571,571],\"mapped\",[572]],[[572,572],\"valid\"],[[573,573],\"mapped\",[410]],[[574,574],\"mapped\",[11366]],[[575,576],\"valid\"],[[577,577],\"mapped\",[578]],[[578,578],\"valid\"],[[579,579],\"mapped\",[384]],[[580,580],\"mapped\",[649]],[[581,581],\"mapped\",[652]],[[582,582],\"mapped\",[583]],[[583,583],\"valid\"],[[584,584],\"mapped\",[585]],[[585,585],\"valid\"],[[586,586],\"mapped\",[587]],[[587,587],\"valid\"],[[588,588],\"mapped\",[589]],[[589,589],\"valid\"],[[590,590],\"mapped\",[591]],[[591,591],\"valid\"],[[592,680],\"valid\"],[[681,685],\"valid\"],[[686,687],\"valid\"],[[688,688],\"mapped\",[104]],[[689,689],\"mapped\",[614]],[[690,690],\"mapped\",[106]],[[691,691],\"mapped\",[114]],[[692,692],\"mapped\",[633]],[[693,693],\"mapped\",[635]],[[694,694],\"mapped\",[641]],[[695,695],\"mapped\",[119]],[[696,696],\"mapped\",[121]],[[697,705],\"valid\"],[[706,709],\"valid\",[],\"NV8\"],[[710,721],\"valid\"],[[722,727],\"valid\",[],\"NV8\"],[[728,728],\"disallowed_STD3_mapped\",[32,774]],[[729,729],\"disallowed_STD3_mapped\",[32,775]],[[730,730],\"disallowed_STD3_mapped\",[32,778]],[[731,731],\"disallowed_STD3_mapped\",[32,808]],[[732,732],\"disallowed_STD3_mapped\",[32,771]],[[733,733],\"disallowed_STD3_mapped\",[32,779]],[[734,734],\"valid\",[],\"NV8\"],[[735,735],\"valid\",[],\"NV8\"],[[736,736],\"mapped\",[611]],[[737,737],\"mapped\",[108]],[[738,738],\"mapped\",[115]],[[739,739],\"mapped\",[120]],[[740,740],\"mapped\",[661]],[[741,745],\"valid\",[],\"NV8\"],[[746,747],\"valid\",[],\"NV8\"],[[748,748],\"valid\"],[[749,749],\"valid\",[],\"NV8\"],[[750,750],\"valid\"],[[751,767],\"valid\",[],\"NV8\"],[[768,831],\"valid\"],[[832,832],\"mapped\",[768]],[[833,833],\"mapped\",[769]],[[834,834],\"valid\"],[[835,835],\"mapped\",[787]],[[836,836],\"mapped\",[776,769]],[[837,837],\"mapped\",[953]],[[838,846],\"valid\"],[[847,847],\"ignored\"],[[848,855],\"valid\"],[[856,860],\"valid\"],[[861,863],\"valid\"],[[864,865],\"valid\"],[[866,866],\"valid\"],[[867,879],\"valid\"],[[880,880],\"mapped\",[881]],[[881,881],\"valid\"],[[882,882],\"mapped\",[883]],[[883,883],\"valid\"],[[884,884],\"mapped\",[697]],[[885,885],\"valid\"],[[886,886],\"mapped\",[887]],[[887,887],\"valid\"],[[888,889],\"disallowed\"],[[890,890],\"disallowed_STD3_mapped\",[32,953]],[[891,893],\"valid\"],[[894,894],\"disallowed_STD3_mapped\",[59]],[[895,895],\"mapped\",[1011]],[[896,899],\"disallowed\"],[[900,900],\"disallowed_STD3_mapped\",[32,769]],[[901,901],\"disallowed_STD3_mapped\",[32,776,769]],[[902,902],\"mapped\",[940]],[[903,903],\"mapped\",[183]],[[904,904],\"mapped\",[941]],[[905,905],\"mapped\",[942]],[[906,906],\"mapped\",[943]],[[907,907],\"disallowed\"],[[908,908],\"mapped\",[972]],[[909,909],\"disallowed\"],[[910,910],\"mapped\",[973]],[[911,911],\"mapped\",[974]],[[912,912],\"valid\"],[[913,913],\"mapped\",[945]],[[914,914],\"mapped\",[946]],[[915,915],\"mapped\",[947]],[[916,916],\"mapped\",[948]],[[917,917],\"mapped\",[949]],[[918,918],\"mapped\",[950]],[[919,919],\"mapped\",[951]],[[920,920],\"mapped\",[952]],[[921,921],\"mapped\",[953]],[[922,922],\"mapped\",[954]],[[923,923],\"mapped\",[955]],[[924,924],\"mapped\",[956]],[[925,925],\"mapped\",[957]],[[926,926],\"mapped\",[958]],[[927,927],\"mapped\",[959]],[[928,928],\"mapped\",[960]],[[929,929],\"mapped\",[961]],[[930,930],\"disallowed\"],[[931,931],\"mapped\",[963]],[[932,932],\"mapped\",[964]],[[933,933],\"mapped\",[965]],[[934,934],\"mapped\",[966]],[[935,935],\"mapped\",[967]],[[936,936],\"mapped\",[968]],[[937,937],\"mapped\",[969]],[[938,938],\"mapped\",[970]],[[939,939],\"mapped\",[971]],[[940,961],\"valid\"],[[962,962],\"deviation\",[963]],[[963,974],\"valid\"],[[975,975],\"mapped\",[983]],[[976,976],\"mapped\",[946]],[[977,977],\"mapped\",[952]],[[978,978],\"mapped\",[965]],[[979,979],\"mapped\",[973]],[[980,980],\"mapped\",[971]],[[981,981],\"mapped\",[966]],[[982,982],\"mapped\",[960]],[[983,983],\"valid\"],[[984,984],\"mapped\",[985]],[[985,985],\"valid\"],[[986,986],\"mapped\",[987]],[[987,987],\"valid\"],[[988,988],\"mapped\",[989]],[[989,989],\"valid\"],[[990,990],\"mapped\",[991]],[[991,991],\"valid\"],[[992,992],\"mapped\",[993]],[[993,993],\"valid\"],[[994,994],\"mapped\",[995]],[[995,995],\"valid\"],[[996,996],\"mapped\",[997]],[[997,997],\"valid\"],[[998,998],\"mapped\",[999]],[[999,999],\"valid\"],[[1000,1000],\"mapped\",[1001]],[[1001,1001],\"valid\"],[[1002,1002],\"mapped\",[1003]],[[1003,1003],\"valid\"],[[1004,1004],\"mapped\",[1005]],[[1005,1005],\"valid\"],[[1006,1006],\"mapped\",[1007]],[[1007,1007],\"valid\"],[[1008,1008],\"mapped\",[954]],[[1009,1009],\"mapped\",[961]],[[1010,1010],\"mapped\",[963]],[[1011,1011],\"valid\"],[[1012,1012],\"mapped\",[952]],[[1013,1013],\"mapped\",[949]],[[1014,1014],\"valid\",[],\"NV8\"],[[1015,1015],\"mapped\",[1016]],[[1016,1016],\"valid\"],[[1017,1017],\"mapped\",[963]],[[1018,1018],\"mapped\",[1019]],[[1019,1019],\"valid\"],[[1020,1020],\"valid\"],[[1021,1021],\"mapped\",[891]],[[1022,1022],\"mapped\",[892]],[[1023,1023],\"mapped\",[893]],[[1024,1024],\"mapped\",[1104]],[[1025,1025],\"mapped\",[1105]],[[1026,1026],\"mapped\",[1106]],[[1027,1027],\"mapped\",[1107]],[[1028,1028],\"mapped\",[1108]],[[1029,1029],\"mapped\",[1109]],[[1030,1030],\"mapped\",[1110]],[[1031,1031],\"mapped\",[1111]],[[1032,1032],\"mapped\",[1112]],[[1033,1033],\"mapped\",[1113]],[[1034,1034],\"mapped\",[1114]],[[1035,1035],\"mapped\",[1115]],[[1036,1036],\"mapped\",[1116]],[[1037,1037],\"mapped\",[1117]],[[1038,1038],\"mapped\",[1118]],[[1039,1039],\"mapped\",[1119]],[[1040,1040],\"mapped\",[1072]],[[1041,1041],\"mapped\",[1073]],[[1042,1042],\"mapped\",[1074]],[[1043,1043],\"mapped\",[1075]],[[1044,1044],\"mapped\",[1076]],[[1045,1045],\"mapped\",[1077]],[[1046,1046],\"mapped\",[1078]],[[1047,1047],\"mapped\",[1079]],[[1048,1048],\"mapped\",[1080]],[[1049,1049],\"mapped\",[1081]],[[1050,1050],\"mapped\",[1082]],[[1051,1051],\"mapped\",[1083]],[[1052,1052],\"mapped\",[1084]],[[1053,1053],\"mapped\",[1085]],[[1054,1054],\"mapped\",[1086]],[[1055,1055],\"mapped\",[1087]],[[1056,1056],\"mapped\",[1088]],[[1057,1057],\"mapped\",[1089]],[[1058,1058],\"mapped\",[1090]],[[1059,1059],\"mapped\",[1091]],[[1060,1060],\"mapped\",[1092]],[[1061,1061],\"mapped\",[1093]],[[1062,1062],\"mapped\",[1094]],[[1063,1063],\"mapped\",[1095]],[[1064,1064],\"mapped\",[1096]],[[1065,1065],\"mapped\",[1097]],[[1066,1066],\"mapped\",[1098]],[[1067,1067],\"mapped\",[1099]],[[1068,1068],\"mapped\",[1100]],[[1069,1069],\"mapped\",[1101]],[[1070,1070],\"mapped\",[1102]],[[1071,1071],\"mapped\",[1103]],[[1072,1103],\"valid\"],[[1104,1104],\"valid\"],[[1105,1116],\"valid\"],[[1117,1117],\"valid\"],[[1118,1119],\"valid\"],[[1120,1120],\"mapped\",[1121]],[[1121,1121],\"valid\"],[[1122,1122],\"mapped\",[1123]],[[1123,1123],\"valid\"],[[1124,1124],\"mapped\",[1125]],[[1125,1125],\"valid\"],[[1126,1126],\"mapped\",[1127]],[[1127,1127],\"valid\"],[[1128,1128],\"mapped\",[1129]],[[1129,1129],\"valid\"],[[1130,1130],\"mapped\",[1131]],[[1131,1131],\"valid\"],[[1132,1132],\"mapped\",[1133]],[[1133,1133],\"valid\"],[[1134,1134],\"mapped\",[1135]],[[1135,1135],\"valid\"],[[1136,1136],\"mapped\",[1137]],[[1137,1137],\"valid\"],[[1138,1138],\"mapped\",[1139]],[[1139,1139],\"valid\"],[[1140,1140],\"mapped\",[1141]],[[1141,1141],\"valid\"],[[1142,1142],\"mapped\",[1143]],[[1143,1143],\"valid\"],[[1144,1144],\"mapped\",[1145]],[[1145,1145],\"valid\"],[[1146,1146],\"mapped\",[1147]],[[1147,1147],\"valid\"],[[1148,1148],\"mapped\",[1149]],[[1149,1149],\"valid\"],[[1150,1150],\"mapped\",[1151]],[[1151,1151],\"valid\"],[[1152,1152],\"mapped\",[1153]],[[1153,1153],\"valid\"],[[1154,1154],\"valid\",[],\"NV8\"],[[1155,1158],\"valid\"],[[1159,1159],\"valid\"],[[1160,1161],\"valid\",[],\"NV8\"],[[1162,1162],\"mapped\",[1163]],[[1163,1163],\"valid\"],[[1164,1164],\"mapped\",[1165]],[[1165,1165],\"valid\"],[[1166,1166],\"mapped\",[1167]],[[1167,1167],\"valid\"],[[1168,1168],\"mapped\",[1169]],[[1169,1169],\"valid\"],[[1170,1170],\"mapped\",[1171]],[[1171,1171],\"valid\"],[[1172,1172],\"mapped\",[1173]],[[1173,1173],\"valid\"],[[1174,1174],\"mapped\",[1175]],[[1175,1175],\"valid\"],[[1176,1176],\"mapped\",[1177]],[[1177,1177],\"valid\"],[[1178,1178],\"mapped\",[1179]],[[1179,1179],\"valid\"],[[1180,1180],\"mapped\",[1181]],[[1181,1181],\"valid\"],[[1182,1182],\"mapped\",[1183]],[[1183,1183],\"valid\"],[[1184,1184],\"mapped\",[1185]],[[1185,1185],\"valid\"],[[1186,1186],\"mapped\",[1187]],[[1187,1187],\"valid\"],[[1188,1188],\"mapped\",[1189]],[[1189,1189],\"valid\"],[[1190,1190],\"mapped\",[1191]],[[1191,1191],\"valid\"],[[1192,1192],\"mapped\",[1193]],[[1193,1193],\"valid\"],[[1194,1194],\"mapped\",[1195]],[[1195,1195],\"valid\"],[[1196,1196],\"mapped\",[1197]],[[1197,1197],\"valid\"],[[1198,1198],\"mapped\",[1199]],[[1199,1199],\"valid\"],[[1200,1200],\"mapped\",[1201]],[[1201,1201],\"valid\"],[[1202,1202],\"mapped\",[1203]],[[1203,1203],\"valid\"],[[1204,1204],\"mapped\",[1205]],[[1205,1205],\"valid\"],[[1206,1206],\"mapped\",[1207]],[[1207,1207],\"valid\"],[[1208,1208],\"mapped\",[1209]],[[1209,1209],\"valid\"],[[1210,1210],\"mapped\",[1211]],[[1211,1211],\"valid\"],[[1212,1212],\"mapped\",[1213]],[[1213,1213],\"valid\"],[[1214,1214],\"mapped\",[1215]],[[1215,1215],\"valid\"],[[1216,1216],\"disallowed\"],[[1217,1217],\"mapped\",[1218]],[[1218,1218],\"valid\"],[[1219,1219],\"mapped\",[1220]],[[1220,1220],\"valid\"],[[1221,1221],\"mapped\",[1222]],[[1222,1222],\"valid\"],[[1223,1223],\"mapped\",[1224]],[[1224,1224],\"valid\"],[[1225,1225],\"mapped\",[1226]],[[1226,1226],\"valid\"],[[1227,1227],\"mapped\",[1228]],[[1228,1228],\"valid\"],[[1229,1229],\"mapped\",[1230]],[[1230,1230],\"valid\"],[[1231,1231],\"valid\"],[[1232,1232],\"mapped\",[1233]],[[1233,1233],\"valid\"],[[1234,1234],\"mapped\",[1235]],[[1235,1235],\"valid\"],[[1236,1236],\"mapped\",[1237]],[[1237,1237],\"valid\"],[[1238,1238],\"mapped\",[1239]],[[1239,1239],\"valid\"],[[1240,1240],\"mapped\",[1241]],[[1241,1241],\"valid\"],[[1242,1242],\"mapped\",[1243]],[[1243,1243],\"valid\"],[[1244,1244],\"mapped\",[1245]],[[1245,1245],\"valid\"],[[1246,1246],\"mapped\",[1247]],[[1247,1247],\"valid\"],[[1248,1248],\"mapped\",[1249]],[[1249,1249],\"valid\"],[[1250,1250],\"mapped\",[1251]],[[1251,1251],\"valid\"],[[1252,1252],\"mapped\",[1253]],[[1253,1253],\"valid\"],[[1254,1254],\"mapped\",[1255]],[[1255,1255],\"valid\"],[[1256,1256],\"mapped\",[1257]],[[1257,1257],\"valid\"],[[1258,1258],\"mapped\",[1259]],[[1259,1259],\"valid\"],[[1260,1260],\"mapped\",[1261]],[[1261,1261],\"valid\"],[[1262,1262],\"mapped\",[1263]],[[1263,1263],\"valid\"],[[1264,1264],\"mapped\",[1265]],[[1265,1265],\"valid\"],[[1266,1266],\"mapped\",[1267]],[[1267,1267],\"valid\"],[[1268,1268],\"mapped\",[1269]],[[1269,1269],\"valid\"],[[1270,1270],\"mapped\",[1271]],[[1271,1271],\"valid\"],[[1272,1272],\"mapped\",[1273]],[[1273,1273],\"valid\"],[[1274,1274],\"mapped\",[1275]],[[1275,1275],\"valid\"],[[1276,1276],\"mapped\",[1277]],[[1277,1277],\"valid\"],[[1278,1278],\"mapped\",[1279]],[[1279,1279],\"valid\"],[[1280,1280],\"mapped\",[1281]],[[1281,1281],\"valid\"],[[1282,1282],\"mapped\",[1283]],[[1283,1283],\"valid\"],[[1284,1284],\"mapped\",[1285]],[[1285,1285],\"valid\"],[[1286,1286],\"mapped\",[1287]],[[1287,1287],\"valid\"],[[1288,1288],\"mapped\",[1289]],[[1289,1289],\"valid\"],[[1290,1290],\"mapped\",[1291]],[[1291,1291],\"valid\"],[[1292,1292],\"mapped\",[1293]],[[1293,1293],\"valid\"],[[1294,1294],\"mapped\",[1295]],[[1295,1295],\"valid\"],[[1296,1296],\"mapped\",[1297]],[[1297,1297],\"valid\"],[[1298,1298],\"mapped\",[1299]],[[1299,1299],\"valid\"],[[1300,1300],\"mapped\",[1301]],[[1301,1301],\"valid\"],[[1302,1302],\"mapped\",[1303]],[[1303,1303],\"valid\"],[[1304,1304],\"mapped\",[1305]],[[1305,1305],\"valid\"],[[1306,1306],\"mapped\",[1307]],[[1307,1307],\"valid\"],[[1308,1308],\"mapped\",[1309]],[[1309,1309],\"valid\"],[[1310,1310],\"mapped\",[1311]],[[1311,1311],\"valid\"],[[1312,1312],\"mapped\",[1313]],[[1313,1313],\"valid\"],[[1314,1314],\"mapped\",[1315]],[[1315,1315],\"valid\"],[[1316,1316],\"mapped\",[1317]],[[1317,1317],\"valid\"],[[1318,1318],\"mapped\",[1319]],[[1319,1319],\"valid\"],[[1320,1320],\"mapped\",[1321]],[[1321,1321],\"valid\"],[[1322,1322],\"mapped\",[1323]],[[1323,1323],\"valid\"],[[1324,1324],\"mapped\",[1325]],[[1325,1325],\"valid\"],[[1326,1326],\"mapped\",[1327]],[[1327,1327],\"valid\"],[[1328,1328],\"disallowed\"],[[1329,1329],\"mapped\",[1377]],[[1330,1330],\"mapped\",[1378]],[[1331,1331],\"mapped\",[1379]],[[1332,1332],\"mapped\",[1380]],[[1333,1333],\"mapped\",[1381]],[[1334,1334],\"mapped\",[1382]],[[1335,1335],\"mapped\",[1383]],[[1336,1336],\"mapped\",[1384]],[[1337,1337],\"mapped\",[1385]],[[1338,1338],\"mapped\",[1386]],[[1339,1339],\"mapped\",[1387]],[[1340,1340],\"mapped\",[1388]],[[1341,1341],\"mapped\",[1389]],[[1342,1342],\"mapped\",[1390]],[[1343,1343],\"mapped\",[1391]],[[1344,1344],\"mapped\",[1392]],[[1345,1345],\"mapped\",[1393]],[[1346,1346],\"mapped\",[1394]],[[1347,1347],\"mapped\",[1395]],[[1348,1348],\"mapped\",[1396]],[[1349,1349],\"mapped\",[1397]],[[1350,1350],\"mapped\",[1398]],[[1351,1351],\"mapped\",[1399]],[[1352,1352],\"mapped\",[1400]],[[1353,1353],\"mapped\",[1401]],[[1354,1354],\"mapped\",[1402]],[[1355,1355],\"mapped\",[1403]],[[1356,1356],\"mapped\",[1404]],[[1357,1357],\"mapped\",[1405]],[[1358,1358],\"mapped\",[1406]],[[1359,1359],\"mapped\",[1407]],[[1360,1360],\"mapped\",[1408]],[[1361,1361],\"mapped\",[1409]],[[1362,1362],\"mapped\",[1410]],[[1363,1363],\"mapped\",[1411]],[[1364,1364],\"mapped\",[1412]],[[1365,1365],\"mapped\",[1413]],[[1366,1366],\"mapped\",[1414]],[[1367,1368],\"disallowed\"],[[1369,1369],\"valid\"],[[1370,1375],\"valid\",[],\"NV8\"],[[1376,1376],\"disallowed\"],[[1377,1414],\"valid\"],[[1415,1415],\"mapped\",[1381,1410]],[[1416,1416],\"disallowed\"],[[1417,1417],\"valid\",[],\"NV8\"],[[1418,1418],\"valid\",[],\"NV8\"],[[1419,1420],\"disallowed\"],[[1421,1422],\"valid\",[],\"NV8\"],[[1423,1423],\"valid\",[],\"NV8\"],[[1424,1424],\"disallowed\"],[[1425,1441],\"valid\"],[[1442,1442],\"valid\"],[[1443,1455],\"valid\"],[[1456,1465],\"valid\"],[[1466,1466],\"valid\"],[[1467,1469],\"valid\"],[[1470,1470],\"valid\",[],\"NV8\"],[[1471,1471],\"valid\"],[[1472,1472],\"valid\",[],\"NV8\"],[[1473,1474],\"valid\"],[[1475,1475],\"valid\",[],\"NV8\"],[[1476,1476],\"valid\"],[[1477,1477],\"valid\"],[[1478,1478],\"valid\",[],\"NV8\"],[[1479,1479],\"valid\"],[[1480,1487],\"disallowed\"],[[1488,1514],\"valid\"],[[1515,1519],\"disallowed\"],[[1520,1524],\"valid\"],[[1525,1535],\"disallowed\"],[[1536,1539],\"disallowed\"],[[1540,1540],\"disallowed\"],[[1541,1541],\"disallowed\"],[[1542,1546],\"valid\",[],\"NV8\"],[[1547,1547],\"valid\",[],\"NV8\"],[[1548,1548],\"valid\",[],\"NV8\"],[[1549,1551],\"valid\",[],\"NV8\"],[[1552,1557],\"valid\"],[[1558,1562],\"valid\"],[[1563,1563],\"valid\",[],\"NV8\"],[[1564,1564],\"disallowed\"],[[1565,1565],\"disallowed\"],[[1566,1566],\"valid\",[],\"NV8\"],[[1567,1567],\"valid\",[],\"NV8\"],[[1568,1568],\"valid\"],[[1569,1594],\"valid\"],[[1595,1599],\"valid\"],[[1600,1600],\"valid\",[],\"NV8\"],[[1601,1618],\"valid\"],[[1619,1621],\"valid\"],[[1622,1624],\"valid\"],[[1625,1630],\"valid\"],[[1631,1631],\"valid\"],[[1632,1641],\"valid\"],[[1642,1645],\"valid\",[],\"NV8\"],[[1646,1647],\"valid\"],[[1648,1652],\"valid\"],[[1653,1653],\"mapped\",[1575,1652]],[[1654,1654],\"mapped\",[1608,1652]],[[1655,1655],\"mapped\",[1735,1652]],[[1656,1656],\"mapped\",[1610,1652]],[[1657,1719],\"valid\"],[[1720,1721],\"valid\"],[[1722,1726],\"valid\"],[[1727,1727],\"valid\"],[[1728,1742],\"valid\"],[[1743,1743],\"valid\"],[[1744,1747],\"valid\"],[[1748,1748],\"valid\",[],\"NV8\"],[[1749,1756],\"valid\"],[[1757,1757],\"disallowed\"],[[1758,1758],\"valid\",[],\"NV8\"],[[1759,1768],\"valid\"],[[1769,1769],\"valid\",[],\"NV8\"],[[1770,1773],\"valid\"],[[1774,1775],\"valid\"],[[1776,1785],\"valid\"],[[1786,1790],\"valid\"],[[1791,1791],\"valid\"],[[1792,1805],\"valid\",[],\"NV8\"],[[1806,1806],\"disallowed\"],[[1807,1807],\"disallowed\"],[[1808,1836],\"valid\"],[[1837,1839],\"valid\"],[[1840,1866],\"valid\"],[[1867,1868],\"disallowed\"],[[1869,1871],\"valid\"],[[1872,1901],\"valid\"],[[1902,1919],\"valid\"],[[1920,1968],\"valid\"],[[1969,1969],\"valid\"],[[1970,1983],\"disallowed\"],[[1984,2037],\"valid\"],[[2038,2042],\"valid\",[],\"NV8\"],[[2043,2047],\"disallowed\"],[[2048,2093],\"valid\"],[[2094,2095],\"disallowed\"],[[2096,2110],\"valid\",[],\"NV8\"],[[2111,2111],\"disallowed\"],[[2112,2139],\"valid\"],[[2140,2141],\"disallowed\"],[[2142,2142],\"valid\",[],\"NV8\"],[[2143,2207],\"disallowed\"],[[2208,2208],\"valid\"],[[2209,2209],\"valid\"],[[2210,2220],\"valid\"],[[2221,2226],\"valid\"],[[2227,2228],\"valid\"],[[2229,2274],\"disallowed\"],[[2275,2275],\"valid\"],[[2276,2302],\"valid\"],[[2303,2303],\"valid\"],[[2304,2304],\"valid\"],[[2305,2307],\"valid\"],[[2308,2308],\"valid\"],[[2309,2361],\"valid\"],[[2362,2363],\"valid\"],[[2364,2381],\"valid\"],[[2382,2382],\"valid\"],[[2383,2383],\"valid\"],[[2384,2388],\"valid\"],[[2389,2389],\"valid\"],[[2390,2391],\"valid\"],[[2392,2392],\"mapped\",[2325,2364]],[[2393,2393],\"mapped\",[2326,2364]],[[2394,2394],\"mapped\",[2327,2364]],[[2395,2395],\"mapped\",[2332,2364]],[[2396,2396],\"mapped\",[2337,2364]],[[2397,2397],\"mapped\",[2338,2364]],[[2398,2398],\"mapped\",[2347,2364]],[[2399,2399],\"mapped\",[2351,2364]],[[2400,2403],\"valid\"],[[2404,2405],\"valid\",[],\"NV8\"],[[2406,2415],\"valid\"],[[2416,2416],\"valid\",[],\"NV8\"],[[2417,2418],\"valid\"],[[2419,2423],\"valid\"],[[2424,2424],\"valid\"],[[2425,2426],\"valid\"],[[2427,2428],\"valid\"],[[2429,2429],\"valid\"],[[2430,2431],\"valid\"],[[2432,2432],\"valid\"],[[2433,2435],\"valid\"],[[2436,2436],\"disallowed\"],[[2437,2444],\"valid\"],[[2445,2446],\"disallowed\"],[[2447,2448],\"valid\"],[[2449,2450],\"disallowed\"],[[2451,2472],\"valid\"],[[2473,2473],\"disallowed\"],[[2474,2480],\"valid\"],[[2481,2481],\"disallowed\"],[[2482,2482],\"valid\"],[[2483,2485],\"disallowed\"],[[2486,2489],\"valid\"],[[2490,2491],\"disallowed\"],[[2492,2492],\"valid\"],[[2493,2493],\"valid\"],[[2494,2500],\"valid\"],[[2501,2502],\"disallowed\"],[[2503,2504],\"valid\"],[[2505,2506],\"disallowed\"],[[2507,2509],\"valid\"],[[2510,2510],\"valid\"],[[2511,2518],\"disallowed\"],[[2519,2519],\"valid\"],[[2520,2523],\"disallowed\"],[[2524,2524],\"mapped\",[2465,2492]],[[2525,2525],\"mapped\",[2466,2492]],[[2526,2526],\"disallowed\"],[[2527,2527],\"mapped\",[2479,2492]],[[2528,2531],\"valid\"],[[2532,2533],\"disallowed\"],[[2534,2545],\"valid\"],[[2546,2554],\"valid\",[],\"NV8\"],[[2555,2555],\"valid\",[],\"NV8\"],[[2556,2560],\"disallowed\"],[[2561,2561],\"valid\"],[[2562,2562],\"valid\"],[[2563,2563],\"valid\"],[[2564,2564],\"disallowed\"],[[2565,2570],\"valid\"],[[2571,2574],\"disallowed\"],[[2575,2576],\"valid\"],[[2577,2578],\"disallowed\"],[[2579,2600],\"valid\"],[[2601,2601],\"disallowed\"],[[2602,2608],\"valid\"],[[2609,2609],\"disallowed\"],[[2610,2610],\"valid\"],[[2611,2611],\"mapped\",[2610,2620]],[[2612,2612],\"disallowed\"],[[2613,2613],\"valid\"],[[2614,2614],\"mapped\",[2616,2620]],[[2615,2615],\"disallowed\"],[[2616,2617],\"valid\"],[[2618,2619],\"disallowed\"],[[2620,2620],\"valid\"],[[2621,2621],\"disallowed\"],[[2622,2626],\"valid\"],[[2627,2630],\"disallowed\"],[[2631,2632],\"valid\"],[[2633,2634],\"disallowed\"],[[2635,2637],\"valid\"],[[2638,2640],\"disallowed\"],[[2641,2641],\"valid\"],[[2642,2648],\"disallowed\"],[[2649,2649],\"mapped\",[2582,2620]],[[2650,2650],\"mapped\",[2583,2620]],[[2651,2651],\"mapped\",[2588,2620]],[[2652,2652],\"valid\"],[[2653,2653],\"disallowed\"],[[2654,2654],\"mapped\",[2603,2620]],[[2655,2661],\"disallowed\"],[[2662,2676],\"valid\"],[[2677,2677],\"valid\"],[[2678,2688],\"disallowed\"],[[2689,2691],\"valid\"],[[2692,2692],\"disallowed\"],[[2693,2699],\"valid\"],[[2700,2700],\"valid\"],[[2701,2701],\"valid\"],[[2702,2702],\"disallowed\"],[[2703,2705],\"valid\"],[[2706,2706],\"disallowed\"],[[2707,2728],\"valid\"],[[2729,2729],\"disallowed\"],[[2730,2736],\"valid\"],[[2737,2737],\"disallowed\"],[[2738,2739],\"valid\"],[[2740,2740],\"disallowed\"],[[2741,2745],\"valid\"],[[2746,2747],\"disallowed\"],[[2748,2757],\"valid\"],[[2758,2758],\"disallowed\"],[[2759,2761],\"valid\"],[[2762,2762],\"disallowed\"],[[2763,2765],\"valid\"],[[2766,2767],\"disallowed\"],[[2768,2768],\"valid\"],[[2769,2783],\"disallowed\"],[[2784,2784],\"valid\"],[[2785,2787],\"valid\"],[[2788,2789],\"disallowed\"],[[2790,2799],\"valid\"],[[2800,2800],\"valid\",[],\"NV8\"],[[2801,2801],\"valid\",[],\"NV8\"],[[2802,2808],\"disallowed\"],[[2809,2809],\"valid\"],[[2810,2816],\"disallowed\"],[[2817,2819],\"valid\"],[[2820,2820],\"disallowed\"],[[2821,2828],\"valid\"],[[2829,2830],\"disallowed\"],[[2831,2832],\"valid\"],[[2833,2834],\"disallowed\"],[[2835,2856],\"valid\"],[[2857,2857],\"disallowed\"],[[2858,2864],\"valid\"],[[2865,2865],\"disallowed\"],[[2866,2867],\"valid\"],[[2868,2868],\"disallowed\"],[[2869,2869],\"valid\"],[[2870,2873],\"valid\"],[[2874,2875],\"disallowed\"],[[2876,2883],\"valid\"],[[2884,2884],\"valid\"],[[2885,2886],\"disallowed\"],[[2887,2888],\"valid\"],[[2889,2890],\"disallowed\"],[[2891,2893],\"valid\"],[[2894,2901],\"disallowed\"],[[2902,2903],\"valid\"],[[2904,2907],\"disallowed\"],[[2908,2908],\"mapped\",[2849,2876]],[[2909,2909],\"mapped\",[2850,2876]],[[2910,2910],\"disallowed\"],[[2911,2913],\"valid\"],[[2914,2915],\"valid\"],[[2916,2917],\"disallowed\"],[[2918,2927],\"valid\"],[[2928,2928],\"valid\",[],\"NV8\"],[[2929,2929],\"valid\"],[[2930,2935],\"valid\",[],\"NV8\"],[[2936,2945],\"disallowed\"],[[2946,2947],\"valid\"],[[2948,2948],\"disallowed\"],[[2949,2954],\"valid\"],[[2955,2957],\"disallowed\"],[[2958,2960],\"valid\"],[[2961,2961],\"disallowed\"],[[2962,2965],\"valid\"],[[2966,2968],\"disallowed\"],[[2969,2970],\"valid\"],[[2971,2971],\"disallowed\"],[[2972,2972],\"valid\"],[[2973,2973],\"disallowed\"],[[2974,2975],\"valid\"],[[2976,2978],\"disallowed\"],[[2979,2980],\"valid\"],[[2981,2983],\"disallowed\"],[[2984,2986],\"valid\"],[[2987,2989],\"disallowed\"],[[2990,2997],\"valid\"],[[2998,2998],\"valid\"],[[2999,3001],\"valid\"],[[3002,3005],\"disallowed\"],[[3006,3010],\"valid\"],[[3011,3013],\"disallowed\"],[[3014,3016],\"valid\"],[[3017,3017],\"disallowed\"],[[3018,3021],\"valid\"],[[3022,3023],\"disallowed\"],[[3024,3024],\"valid\"],[[3025,3030],\"disallowed\"],[[3031,3031],\"valid\"],[[3032,3045],\"disallowed\"],[[3046,3046],\"valid\"],[[3047,3055],\"valid\"],[[3056,3058],\"valid\",[],\"NV8\"],[[3059,3066],\"valid\",[],\"NV8\"],[[3067,3071],\"disallowed\"],[[3072,3072],\"valid\"],[[3073,3075],\"valid\"],[[3076,3076],\"disallowed\"],[[3077,3084],\"valid\"],[[3085,3085],\"disallowed\"],[[3086,3088],\"valid\"],[[3089,3089],\"disallowed\"],[[3090,3112],\"valid\"],[[3113,3113],\"disallowed\"],[[3114,3123],\"valid\"],[[3124,3124],\"valid\"],[[3125,3129],\"valid\"],[[3130,3132],\"disallowed\"],[[3133,3133],\"valid\"],[[3134,3140],\"valid\"],[[3141,3141],\"disallowed\"],[[3142,3144],\"valid\"],[[3145,3145],\"disallowed\"],[[3146,3149],\"valid\"],[[3150,3156],\"disallowed\"],[[3157,3158],\"valid\"],[[3159,3159],\"disallowed\"],[[3160,3161],\"valid\"],[[3162,3162],\"valid\"],[[3163,3167],\"disallowed\"],[[3168,3169],\"valid\"],[[3170,3171],\"valid\"],[[3172,3173],\"disallowed\"],[[3174,3183],\"valid\"],[[3184,3191],\"disallowed\"],[[3192,3199],\"valid\",[],\"NV8\"],[[3200,3200],\"disallowed\"],[[3201,3201],\"valid\"],[[3202,3203],\"valid\"],[[3204,3204],\"disallowed\"],[[3205,3212],\"valid\"],[[3213,3213],\"disallowed\"],[[3214,3216],\"valid\"],[[3217,3217],\"disallowed\"],[[3218,3240],\"valid\"],[[3241,3241],\"disallowed\"],[[3242,3251],\"valid\"],[[3252,3252],\"disallowed\"],[[3253,3257],\"valid\"],[[3258,3259],\"disallowed\"],[[3260,3261],\"valid\"],[[3262,3268],\"valid\"],[[3269,3269],\"disallowed\"],[[3270,3272],\"valid\"],[[3273,3273],\"disallowed\"],[[3274,3277],\"valid\"],[[3278,3284],\"disallowed\"],[[3285,3286],\"valid\"],[[3287,3293],\"disallowed\"],[[3294,3294],\"valid\"],[[3295,3295],\"disallowed\"],[[3296,3297],\"valid\"],[[3298,3299],\"valid\"],[[3300,3301],\"disallowed\"],[[3302,3311],\"valid\"],[[3312,3312],\"disallowed\"],[[3313,3314],\"valid\"],[[3315,3328],\"disallowed\"],[[3329,3329],\"valid\"],[[3330,3331],\"valid\"],[[3332,3332],\"disallowed\"],[[3333,3340],\"valid\"],[[3341,3341],\"disallowed\"],[[3342,3344],\"valid\"],[[3345,3345],\"disallowed\"],[[3346,3368],\"valid\"],[[3369,3369],\"valid\"],[[3370,3385],\"valid\"],[[3386,3386],\"valid\"],[[3387,3388],\"disallowed\"],[[3389,3389],\"valid\"],[[3390,3395],\"valid\"],[[3396,3396],\"valid\"],[[3397,3397],\"disallowed\"],[[3398,3400],\"valid\"],[[3401,3401],\"disallowed\"],[[3402,3405],\"valid\"],[[3406,3406],\"valid\"],[[3407,3414],\"disallowed\"],[[3415,3415],\"valid\"],[[3416,3422],\"disallowed\"],[[3423,3423],\"valid\"],[[3424,3425],\"valid\"],[[3426,3427],\"valid\"],[[3428,3429],\"disallowed\"],[[3430,3439],\"valid\"],[[3440,3445],\"valid\",[],\"NV8\"],[[3446,3448],\"disallowed\"],[[3449,3449],\"valid\",[],\"NV8\"],[[3450,3455],\"valid\"],[[3456,3457],\"disallowed\"],[[3458,3459],\"valid\"],[[3460,3460],\"disallowed\"],[[3461,3478],\"valid\"],[[3479,3481],\"disallowed\"],[[3482,3505],\"valid\"],[[3506,3506],\"disallowed\"],[[3507,3515],\"valid\"],[[3516,3516],\"disallowed\"],[[3517,3517],\"valid\"],[[3518,3519],\"disallowed\"],[[3520,3526],\"valid\"],[[3527,3529],\"disallowed\"],[[3530,3530],\"valid\"],[[3531,3534],\"disallowed\"],[[3535,3540],\"valid\"],[[3541,3541],\"disallowed\"],[[3542,3542],\"valid\"],[[3543,3543],\"disallowed\"],[[3544,3551],\"valid\"],[[3552,3557],\"disallowed\"],[[3558,3567],\"valid\"],[[3568,3569],\"disallowed\"],[[3570,3571],\"valid\"],[[3572,3572],\"valid\",[],\"NV8\"],[[3573,3584],\"disallowed\"],[[3585,3634],\"valid\"],[[3635,3635],\"mapped\",[3661,3634]],[[3636,3642],\"valid\"],[[3643,3646],\"disallowed\"],[[3647,3647],\"valid\",[],\"NV8\"],[[3648,3662],\"valid\"],[[3663,3663],\"valid\",[],\"NV8\"],[[3664,3673],\"valid\"],[[3674,3675],\"valid\",[],\"NV8\"],[[3676,3712],\"disallowed\"],[[3713,3714],\"valid\"],[[3715,3715],\"disallowed\"],[[3716,3716],\"valid\"],[[3717,3718],\"disallowed\"],[[3719,3720],\"valid\"],[[3721,3721],\"disallowed\"],[[3722,3722],\"valid\"],[[3723,3724],\"disallowed\"],[[3725,3725],\"valid\"],[[3726,3731],\"disallowed\"],[[3732,3735],\"valid\"],[[3736,3736],\"disallowed\"],[[3737,3743],\"valid\"],[[3744,3744],\"disallowed\"],[[3745,3747],\"valid\"],[[3748,3748],\"disallowed\"],[[3749,3749],\"valid\"],[[3750,3750],\"disallowed\"],[[3751,3751],\"valid\"],[[3752,3753],\"disallowed\"],[[3754,3755],\"valid\"],[[3756,3756],\"disallowed\"],[[3757,3762],\"valid\"],[[3763,3763],\"mapped\",[3789,3762]],[[3764,3769],\"valid\"],[[3770,3770],\"disallowed\"],[[3771,3773],\"valid\"],[[3774,3775],\"disallowed\"],[[3776,3780],\"valid\"],[[3781,3781],\"disallowed\"],[[3782,3782],\"valid\"],[[3783,3783],\"disallowed\"],[[3784,3789],\"valid\"],[[3790,3791],\"disallowed\"],[[3792,3801],\"valid\"],[[3802,3803],\"disallowed\"],[[3804,3804],\"mapped\",[3755,3737]],[[3805,3805],\"mapped\",[3755,3745]],[[3806,3807],\"valid\"],[[3808,3839],\"disallowed\"],[[3840,3840],\"valid\"],[[3841,3850],\"valid\",[],\"NV8\"],[[3851,3851],\"valid\"],[[3852,3852],\"mapped\",[3851]],[[3853,3863],\"valid\",[],\"NV8\"],[[3864,3865],\"valid\"],[[3866,3871],\"valid\",[],\"NV8\"],[[3872,3881],\"valid\"],[[3882,3892],\"valid\",[],\"NV8\"],[[3893,3893],\"valid\"],[[3894,3894],\"valid\",[],\"NV8\"],[[3895,3895],\"valid\"],[[3896,3896],\"valid\",[],\"NV8\"],[[3897,3897],\"valid\"],[[3898,3901],\"valid\",[],\"NV8\"],[[3902,3906],\"valid\"],[[3907,3907],\"mapped\",[3906,4023]],[[3908,3911],\"valid\"],[[3912,3912],\"disallowed\"],[[3913,3916],\"valid\"],[[3917,3917],\"mapped\",[3916,4023]],[[3918,3921],\"valid\"],[[3922,3922],\"mapped\",[3921,4023]],[[3923,3926],\"valid\"],[[3927,3927],\"mapped\",[3926,4023]],[[3928,3931],\"valid\"],[[3932,3932],\"mapped\",[3931,4023]],[[3933,3944],\"valid\"],[[3945,3945],\"mapped\",[3904,4021]],[[3946,3946],\"valid\"],[[3947,3948],\"valid\"],[[3949,3952],\"disallowed\"],[[3953,3954],\"valid\"],[[3955,3955],\"mapped\",[3953,3954]],[[3956,3956],\"valid\"],[[3957,3957],\"mapped\",[3953,3956]],[[3958,3958],\"mapped\",[4018,3968]],[[3959,3959],\"mapped\",[4018,3953,3968]],[[3960,3960],\"mapped\",[4019,3968]],[[3961,3961],\"mapped\",[4019,3953,3968]],[[3962,3968],\"valid\"],[[3969,3969],\"mapped\",[3953,3968]],[[3970,3972],\"valid\"],[[3973,3973],\"valid\",[],\"NV8\"],[[3974,3979],\"valid\"],[[3980,3983],\"valid\"],[[3984,3986],\"valid\"],[[3987,3987],\"mapped\",[3986,4023]],[[3988,3989],\"valid\"],[[3990,3990],\"valid\"],[[3991,3991],\"valid\"],[[3992,3992],\"disallowed\"],[[3993,3996],\"valid\"],[[3997,3997],\"mapped\",[3996,4023]],[[3998,4001],\"valid\"],[[4002,4002],\"mapped\",[4001,4023]],[[4003,4006],\"valid\"],[[4007,4007],\"mapped\",[4006,4023]],[[4008,4011],\"valid\"],[[4012,4012],\"mapped\",[4011,4023]],[[4013,4013],\"valid\"],[[4014,4016],\"valid\"],[[4017,4023],\"valid\"],[[4024,4024],\"valid\"],[[4025,4025],\"mapped\",[3984,4021]],[[4026,4028],\"valid\"],[[4029,4029],\"disallowed\"],[[4030,4037],\"valid\",[],\"NV8\"],[[4038,4038],\"valid\"],[[4039,4044],\"valid\",[],\"NV8\"],[[4045,4045],\"disallowed\"],[[4046,4046],\"valid\",[],\"NV8\"],[[4047,4047],\"valid\",[],\"NV8\"],[[4048,4049],\"valid\",[],\"NV8\"],[[4050,4052],\"valid\",[],\"NV8\"],[[4053,4056],\"valid\",[],\"NV8\"],[[4057,4058],\"valid\",[],\"NV8\"],[[4059,4095],\"disallowed\"],[[4096,4129],\"valid\"],[[4130,4130],\"valid\"],[[4131,4135],\"valid\"],[[4136,4136],\"valid\"],[[4137,4138],\"valid\"],[[4139,4139],\"valid\"],[[4140,4146],\"valid\"],[[4147,4149],\"valid\"],[[4150,4153],\"valid\"],[[4154,4159],\"valid\"],[[4160,4169],\"valid\"],[[4170,4175],\"valid\",[],\"NV8\"],[[4176,4185],\"valid\"],[[4186,4249],\"valid\"],[[4250,4253],\"valid\"],[[4254,4255],\"valid\",[],\"NV8\"],[[4256,4293],\"disallowed\"],[[4294,4294],\"disallowed\"],[[4295,4295],\"mapped\",[11559]],[[4296,4300],\"disallowed\"],[[4301,4301],\"mapped\",[11565]],[[4302,4303],\"disallowed\"],[[4304,4342],\"valid\"],[[4343,4344],\"valid\"],[[4345,4346],\"valid\"],[[4347,4347],\"valid\",[],\"NV8\"],[[4348,4348],\"mapped\",[4316]],[[4349,4351],\"valid\"],[[4352,4441],\"valid\",[],\"NV8\"],[[4442,4446],\"valid\",[],\"NV8\"],[[4447,4448],\"disallowed\"],[[4449,4514],\"valid\",[],\"NV8\"],[[4515,4519],\"valid\",[],\"NV8\"],[[4520,4601],\"valid\",[],\"NV8\"],[[4602,4607],\"valid\",[],\"NV8\"],[[4608,4614],\"valid\"],[[4615,4615],\"valid\"],[[4616,4678],\"valid\"],[[4679,4679],\"valid\"],[[4680,4680],\"valid\"],[[4681,4681],\"disallowed\"],[[4682,4685],\"valid\"],[[4686,4687],\"disallowed\"],[[4688,4694],\"valid\"],[[4695,4695],\"disallowed\"],[[4696,4696],\"valid\"],[[4697,4697],\"disallowed\"],[[4698,4701],\"valid\"],[[4702,4703],\"disallowed\"],[[4704,4742],\"valid\"],[[4743,4743],\"valid\"],[[4744,4744],\"valid\"],[[4745,4745],\"disallowed\"],[[4746,4749],\"valid\"],[[4750,4751],\"disallowed\"],[[4752,4782],\"valid\"],[[4783,4783],\"valid\"],[[4784,4784],\"valid\"],[[4785,4785],\"disallowed\"],[[4786,4789],\"valid\"],[[4790,4791],\"disallowed\"],[[4792,4798],\"valid\"],[[4799,4799],\"disallowed\"],[[4800,4800],\"valid\"],[[4801,4801],\"disallowed\"],[[4802,4805],\"valid\"],[[4806,4807],\"disallowed\"],[[4808,4814],\"valid\"],[[4815,4815],\"valid\"],[[4816,4822],\"valid\"],[[4823,4823],\"disallowed\"],[[4824,4846],\"valid\"],[[4847,4847],\"valid\"],[[4848,4878],\"valid\"],[[4879,4879],\"valid\"],[[4880,4880],\"valid\"],[[4881,4881],\"disallowed\"],[[4882,4885],\"valid\"],[[4886,4887],\"disallowed\"],[[4888,4894],\"valid\"],[[4895,4895],\"valid\"],[[4896,4934],\"valid\"],[[4935,4935],\"valid\"],[[4936,4954],\"valid\"],[[4955,4956],\"disallowed\"],[[4957,4958],\"valid\"],[[4959,4959],\"valid\"],[[4960,4960],\"valid\",[],\"NV8\"],[[4961,4988],\"valid\",[],\"NV8\"],[[4989,4991],\"disallowed\"],[[4992,5007],\"valid\"],[[5008,5017],\"valid\",[],\"NV8\"],[[5018,5023],\"disallowed\"],[[5024,5108],\"valid\"],[[5109,5109],\"valid\"],[[5110,5111],\"disallowed\"],[[5112,5112],\"mapped\",[5104]],[[5113,5113],\"mapped\",[5105]],[[5114,5114],\"mapped\",[5106]],[[5115,5115],\"mapped\",[5107]],[[5116,5116],\"mapped\",[5108]],[[5117,5117],\"mapped\",[5109]],[[5118,5119],\"disallowed\"],[[5120,5120],\"valid\",[],\"NV8\"],[[5121,5740],\"valid\"],[[5741,5742],\"valid\",[],\"NV8\"],[[5743,5750],\"valid\"],[[5751,5759],\"valid\"],[[5760,5760],\"disallowed\"],[[5761,5786],\"valid\"],[[5787,5788],\"valid\",[],\"NV8\"],[[5789,5791],\"disallowed\"],[[5792,5866],\"valid\"],[[5867,5872],\"valid\",[],\"NV8\"],[[5873,5880],\"valid\"],[[5881,5887],\"disallowed\"],[[5888,5900],\"valid\"],[[5901,5901],\"disallowed\"],[[5902,5908],\"valid\"],[[5909,5919],\"disallowed\"],[[5920,5940],\"valid\"],[[5941,5942],\"valid\",[],\"NV8\"],[[5943,5951],\"disallowed\"],[[5952,5971],\"valid\"],[[5972,5983],\"disallowed\"],[[5984,5996],\"valid\"],[[5997,5997],\"disallowed\"],[[5998,6000],\"valid\"],[[6001,6001],\"disallowed\"],[[6002,6003],\"valid\"],[[6004,6015],\"disallowed\"],[[6016,6067],\"valid\"],[[6068,6069],\"disallowed\"],[[6070,6099],\"valid\"],[[6100,6102],\"valid\",[],\"NV8\"],[[6103,6103],\"valid\"],[[6104,6107],\"valid\",[],\"NV8\"],[[6108,6108],\"valid\"],[[6109,6109],\"valid\"],[[6110,6111],\"disallowed\"],[[6112,6121],\"valid\"],[[6122,6127],\"disallowed\"],[[6128,6137],\"valid\",[],\"NV8\"],[[6138,6143],\"disallowed\"],[[6144,6149],\"valid\",[],\"NV8\"],[[6150,6150],\"disallowed\"],[[6151,6154],\"valid\",[],\"NV8\"],[[6155,6157],\"ignored\"],[[6158,6158],\"disallowed\"],[[6159,6159],\"disallowed\"],[[6160,6169],\"valid\"],[[6170,6175],\"disallowed\"],[[6176,6263],\"valid\"],[[6264,6271],\"disallowed\"],[[6272,6313],\"valid\"],[[6314,6314],\"valid\"],[[6315,6319],\"disallowed\"],[[6320,6389],\"valid\"],[[6390,6399],\"disallowed\"],[[6400,6428],\"valid\"],[[6429,6430],\"valid\"],[[6431,6431],\"disallowed\"],[[6432,6443],\"valid\"],[[6444,6447],\"disallowed\"],[[6448,6459],\"valid\"],[[6460,6463],\"disallowed\"],[[6464,6464],\"valid\",[],\"NV8\"],[[6465,6467],\"disallowed\"],[[6468,6469],\"valid\",[],\"NV8\"],[[6470,6509],\"valid\"],[[6510,6511],\"disallowed\"],[[6512,6516],\"valid\"],[[6517,6527],\"disallowed\"],[[6528,6569],\"valid\"],[[6570,6571],\"valid\"],[[6572,6575],\"disallowed\"],[[6576,6601],\"valid\"],[[6602,6607],\"disallowed\"],[[6608,6617],\"valid\"],[[6618,6618],\"valid\",[],\"XV8\"],[[6619,6621],\"disallowed\"],[[6622,6623],\"valid\",[],\"NV8\"],[[6624,6655],\"valid\",[],\"NV8\"],[[6656,6683],\"valid\"],[[6684,6685],\"disallowed\"],[[6686,6687],\"valid\",[],\"NV8\"],[[6688,6750],\"valid\"],[[6751,6751],\"disallowed\"],[[6752,6780],\"valid\"],[[6781,6782],\"disallowed\"],[[6783,6793],\"valid\"],[[6794,6799],\"disallowed\"],[[6800,6809],\"valid\"],[[6810,6815],\"disallowed\"],[[6816,6822],\"valid\",[],\"NV8\"],[[6823,6823],\"valid\"],[[6824,6829],\"valid\",[],\"NV8\"],[[6830,6831],\"disallowed\"],[[6832,6845],\"valid\"],[[6846,6846],\"valid\",[],\"NV8\"],[[6847,6911],\"disallowed\"],[[6912,6987],\"valid\"],[[6988,6991],\"disallowed\"],[[6992,7001],\"valid\"],[[7002,7018],\"valid\",[],\"NV8\"],[[7019,7027],\"valid\"],[[7028,7036],\"valid\",[],\"NV8\"],[[7037,7039],\"disallowed\"],[[7040,7082],\"valid\"],[[7083,7085],\"valid\"],[[7086,7097],\"valid\"],[[7098,7103],\"valid\"],[[7104,7155],\"valid\"],[[7156,7163],\"disallowed\"],[[7164,7167],\"valid\",[],\"NV8\"],[[7168,7223],\"valid\"],[[7224,7226],\"disallowed\"],[[7227,7231],\"valid\",[],\"NV8\"],[[7232,7241],\"valid\"],[[7242,7244],\"disallowed\"],[[7245,7293],\"valid\"],[[7294,7295],\"valid\",[],\"NV8\"],[[7296,7359],\"disallowed\"],[[7360,7367],\"valid\",[],\"NV8\"],[[7368,7375],\"disallowed\"],[[7376,7378],\"valid\"],[[7379,7379],\"valid\",[],\"NV8\"],[[7380,7410],\"valid\"],[[7411,7414],\"valid\"],[[7415,7415],\"disallowed\"],[[7416,7417],\"valid\"],[[7418,7423],\"disallowed\"],[[7424,7467],\"valid\"],[[7468,7468],\"mapped\",[97]],[[7469,7469],\"mapped\",[230]],[[7470,7470],\"mapped\",[98]],[[7471,7471],\"valid\"],[[7472,7472],\"mapped\",[100]],[[7473,7473],\"mapped\",[101]],[[7474,7474],\"mapped\",[477]],[[7475,7475],\"mapped\",[103]],[[7476,7476],\"mapped\",[104]],[[7477,7477],\"mapped\",[105]],[[7478,7478],\"mapped\",[106]],[[7479,7479],\"mapped\",[107]],[[7480,7480],\"mapped\",[108]],[[7481,7481],\"mapped\",[109]],[[7482,7482],\"mapped\",[110]],[[7483,7483],\"valid\"],[[7484,7484],\"mapped\",[111]],[[7485,7485],\"mapped\",[547]],[[7486,7486],\"mapped\",[112]],[[7487,7487],\"mapped\",[114]],[[7488,7488],\"mapped\",[116]],[[7489,7489],\"mapped\",[117]],[[7490,7490],\"mapped\",[119]],[[7491,7491],\"mapped\",[97]],[[7492,7492],\"mapped\",[592]],[[7493,7493],\"mapped\",[593]],[[7494,7494],\"mapped\",[7426]],[[7495,7495],\"mapped\",[98]],[[7496,7496],\"mapped\",[100]],[[7497,7497],\"mapped\",[101]],[[7498,7498],\"mapped\",[601]],[[7499,7499],\"mapped\",[603]],[[7500,7500],\"mapped\",[604]],[[7501,7501],\"mapped\",[103]],[[7502,7502],\"valid\"],[[7503,7503],\"mapped\",[107]],[[7504,7504],\"mapped\",[109]],[[7505,7505],\"mapped\",[331]],[[7506,7506],\"mapped\",[111]],[[7507,7507],\"mapped\",[596]],[[7508,7508],\"mapped\",[7446]],[[7509,7509],\"mapped\",[7447]],[[7510,7510],\"mapped\",[112]],[[7511,7511],\"mapped\",[116]],[[7512,7512],\"mapped\",[117]],[[7513,7513],\"mapped\",[7453]],[[7514,7514],\"mapped\",[623]],[[7515,7515],\"mapped\",[118]],[[7516,7516],\"mapped\",[7461]],[[7517,7517],\"mapped\",[946]],[[7518,7518],\"mapped\",[947]],[[7519,7519],\"mapped\",[948]],[[7520,7520],\"mapped\",[966]],[[7521,7521],\"mapped\",[967]],[[7522,7522],\"mapped\",[105]],[[7523,7523],\"mapped\",[114]],[[7524,7524],\"mapped\",[117]],[[7525,7525],\"mapped\",[118]],[[7526,7526],\"mapped\",[946]],[[7527,7527],\"mapped\",[947]],[[7528,7528],\"mapped\",[961]],[[7529,7529],\"mapped\",[966]],[[7530,7530],\"mapped\",[967]],[[7531,7531],\"valid\"],[[7532,7543],\"valid\"],[[7544,7544],\"mapped\",[1085]],[[7545,7578],\"valid\"],[[7579,7579],\"mapped\",[594]],[[7580,7580],\"mapped\",[99]],[[7581,7581],\"mapped\",[597]],[[7582,7582],\"mapped\",[240]],[[7583,7583],\"mapped\",[604]],[[7584,7584],\"mapped\",[102]],[[7585,7585],\"mapped\",[607]],[[7586,7586],\"mapped\",[609]],[[7587,7587],\"mapped\",[613]],[[7588,7588],\"mapped\",[616]],[[7589,7589],\"mapped\",[617]],[[7590,7590],\"mapped\",[618]],[[7591,7591],\"mapped\",[7547]],[[7592,7592],\"mapped\",[669]],[[7593,7593],\"mapped\",[621]],[[7594,7594],\"mapped\",[7557]],[[7595,7595],\"mapped\",[671]],[[7596,7596],\"mapped\",[625]],[[7597,7597],\"mapped\",[624]],[[7598,7598],\"mapped\",[626]],[[7599,7599],\"mapped\",[627]],[[7600,7600],\"mapped\",[628]],[[7601,7601],\"mapped\",[629]],[[7602,7602],\"mapped\",[632]],[[7603,7603],\"mapped\",[642]],[[7604,7604],\"mapped\",[643]],[[7605,7605],\"mapped\",[427]],[[7606,7606],\"mapped\",[649]],[[7607,7607],\"mapped\",[650]],[[7608,7608],\"mapped\",[7452]],[[7609,7609],\"mapped\",[651]],[[7610,7610],\"mapped\",[652]],[[7611,7611],\"mapped\",[122]],[[7612,7612],\"mapped\",[656]],[[7613,7613],\"mapped\",[657]],[[7614,7614],\"mapped\",[658]],[[7615,7615],\"mapped\",[952]],[[7616,7619],\"valid\"],[[7620,7626],\"valid\"],[[7627,7654],\"valid\"],[[7655,7669],\"valid\"],[[7670,7675],\"disallowed\"],[[7676,7676],\"valid\"],[[7677,7677],\"valid\"],[[7678,7679],\"valid\"],[[7680,7680],\"mapped\",[7681]],[[7681,7681],\"valid\"],[[7682,7682],\"mapped\",[7683]],[[7683,7683],\"valid\"],[[7684,7684],\"mapped\",[7685]],[[7685,7685],\"valid\"],[[7686,7686],\"mapped\",[7687]],[[7687,7687],\"valid\"],[[7688,7688],\"mapped\",[7689]],[[7689,7689],\"valid\"],[[7690,7690],\"mapped\",[7691]],[[7691,7691],\"valid\"],[[7692,7692],\"mapped\",[7693]],[[7693,7693],\"valid\"],[[7694,7694],\"mapped\",[7695]],[[7695,7695],\"valid\"],[[7696,7696],\"mapped\",[7697]],[[7697,7697],\"valid\"],[[7698,7698],\"mapped\",[7699]],[[7699,7699],\"valid\"],[[7700,7700],\"mapped\",[7701]],[[7701,7701],\"valid\"],[[7702,7702],\"mapped\",[7703]],[[7703,7703],\"valid\"],[[7704,7704],\"mapped\",[7705]],[[7705,7705],\"valid\"],[[7706,7706],\"mapped\",[7707]],[[7707,7707],\"valid\"],[[7708,7708],\"mapped\",[7709]],[[7709,7709],\"valid\"],[[7710,7710],\"mapped\",[7711]],[[7711,7711],\"valid\"],[[7712,7712],\"mapped\",[7713]],[[7713,7713],\"valid\"],[[7714,7714],\"mapped\",[7715]],[[7715,7715],\"valid\"],[[7716,7716],\"mapped\",[7717]],[[7717,7717],\"valid\"],[[7718,7718],\"mapped\",[7719]],[[7719,7719],\"valid\"],[[7720,7720],\"mapped\",[7721]],[[7721,7721],\"valid\"],[[7722,7722],\"mapped\",[7723]],[[7723,7723],\"valid\"],[[7724,7724],\"mapped\",[7725]],[[7725,7725],\"valid\"],[[7726,7726],\"mapped\",[7727]],[[7727,7727],\"valid\"],[[7728,7728],\"mapped\",[7729]],[[7729,7729],\"valid\"],[[7730,7730],\"mapped\",[7731]],[[7731,7731],\"valid\"],[[7732,7732],\"mapped\",[7733]],[[7733,7733],\"valid\"],[[7734,7734],\"mapped\",[7735]],[[7735,7735],\"valid\"],[[7736,7736],\"mapped\",[7737]],[[7737,7737],\"valid\"],[[7738,7738],\"mapped\",[7739]],[[7739,7739],\"valid\"],[[7740,7740],\"mapped\",[7741]],[[7741,7741],\"valid\"],[[7742,7742],\"mapped\",[7743]],[[7743,7743],\"valid\"],[[7744,7744],\"mapped\",[7745]],[[7745,7745],\"valid\"],[[7746,7746],\"mapped\",[7747]],[[7747,7747],\"valid\"],[[7748,7748],\"mapped\",[7749]],[[7749,7749],\"valid\"],[[7750,7750],\"mapped\",[7751]],[[7751,7751],\"valid\"],[[7752,7752],\"mapped\",[7753]],[[7753,7753],\"valid\"],[[7754,7754],\"mapped\",[7755]],[[7755,7755],\"valid\"],[[7756,7756],\"mapped\",[7757]],[[7757,7757],\"valid\"],[[7758,7758],\"mapped\",[7759]],[[7759,7759],\"valid\"],[[7760,7760],\"mapped\",[7761]],[[7761,7761],\"valid\"],[[7762,7762],\"mapped\",[7763]],[[7763,7763],\"valid\"],[[7764,7764],\"mapped\",[7765]],[[7765,7765],\"valid\"],[[7766,7766],\"mapped\",[7767]],[[7767,7767],\"valid\"],[[7768,7768],\"mapped\",[7769]],[[7769,7769],\"valid\"],[[7770,7770],\"mapped\",[7771]],[[7771,7771],\"valid\"],[[7772,7772],\"mapped\",[7773]],[[7773,7773],\"valid\"],[[7774,7774],\"mapped\",[7775]],[[7775,7775],\"valid\"],[[7776,7776],\"mapped\",[7777]],[[7777,7777],\"valid\"],[[7778,7778],\"mapped\",[7779]],[[7779,7779],\"valid\"],[[7780,7780],\"mapped\",[7781]],[[7781,7781],\"valid\"],[[7782,7782],\"mapped\",[7783]],[[7783,7783],\"valid\"],[[7784,7784],\"mapped\",[7785]],[[7785,7785],\"valid\"],[[7786,7786],\"mapped\",[7787]],[[7787,7787],\"valid\"],[[7788,7788],\"mapped\",[7789]],[[7789,7789],\"valid\"],[[7790,7790],\"mapped\",[7791]],[[7791,7791],\"valid\"],[[7792,7792],\"mapped\",[7793]],[[7793,7793],\"valid\"],[[7794,7794],\"mapped\",[7795]],[[7795,7795],\"valid\"],[[7796,7796],\"mapped\",[7797]],[[7797,7797],\"valid\"],[[7798,7798],\"mapped\",[7799]],[[7799,7799],\"valid\"],[[7800,7800],\"mapped\",[7801]],[[7801,7801],\"valid\"],[[7802,7802],\"mapped\",[7803]],[[7803,7803],\"valid\"],[[7804,7804],\"mapped\",[7805]],[[7805,7805],\"valid\"],[[7806,7806],\"mapped\",[7807]],[[7807,7807],\"valid\"],[[7808,7808],\"mapped\",[7809]],[[7809,7809],\"valid\"],[[7810,7810],\"mapped\",[7811]],[[7811,7811],\"valid\"],[[7812,7812],\"mapped\",[7813]],[[7813,7813],\"valid\"],[[7814,7814],\"mapped\",[7815]],[[7815,7815],\"valid\"],[[7816,7816],\"mapped\",[7817]],[[7817,7817],\"valid\"],[[7818,7818],\"mapped\",[7819]],[[7819,7819],\"valid\"],[[7820,7820],\"mapped\",[7821]],[[7821,7821],\"valid\"],[[7822,7822],\"mapped\",[7823]],[[7823,7823],\"valid\"],[[7824,7824],\"mapped\",[7825]],[[7825,7825],\"valid\"],[[7826,7826],\"mapped\",[7827]],[[7827,7827],\"valid\"],[[7828,7828],\"mapped\",[7829]],[[7829,7833],\"valid\"],[[7834,7834],\"mapped\",[97,702]],[[7835,7835],\"mapped\",[7777]],[[7836,7837],\"valid\"],[[7838,7838],\"mapped\",[115,115]],[[7839,7839],\"valid\"],[[7840,7840],\"mapped\",[7841]],[[7841,7841],\"valid\"],[[7842,7842],\"mapped\",[7843]],[[7843,7843],\"valid\"],[[7844,7844],\"mapped\",[7845]],[[7845,7845],\"valid\"],[[7846,7846],\"mapped\",[7847]],[[7847,7847],\"valid\"],[[7848,7848],\"mapped\",[7849]],[[7849,7849],\"valid\"],[[7850,7850],\"mapped\",[7851]],[[7851,7851],\"valid\"],[[7852,7852],\"mapped\",[7853]],[[7853,7853],\"valid\"],[[7854,7854],\"mapped\",[7855]],[[7855,7855],\"valid\"],[[7856,7856],\"mapped\",[7857]],[[7857,7857],\"valid\"],[[7858,7858],\"mapped\",[7859]],[[7859,7859],\"valid\"],[[7860,7860],\"mapped\",[7861]],[[7861,7861],\"valid\"],[[7862,7862],\"mapped\",[7863]],[[7863,7863],\"valid\"],[[7864,7864],\"mapped\",[7865]],[[7865,7865],\"valid\"],[[7866,7866],\"mapped\",[7867]],[[7867,7867],\"valid\"],[[7868,7868],\"mapped\",[7869]],[[7869,7869],\"valid\"],[[7870,7870],\"mapped\",[7871]],[[7871,7871],\"valid\"],[[7872,7872],\"mapped\",[7873]],[[7873,7873],\"valid\"],[[7874,7874],\"mapped\",[7875]],[[7875,7875],\"valid\"],[[7876,7876],\"mapped\",[7877]],[[7877,7877],\"valid\"],[[7878,7878],\"mapped\",[7879]],[[7879,7879],\"valid\"],[[7880,7880],\"mapped\",[7881]],[[7881,7881],\"valid\"],[[7882,7882],\"mapped\",[7883]],[[7883,7883],\"valid\"],[[7884,7884],\"mapped\",[7885]],[[7885,7885],\"valid\"],[[7886,7886],\"mapped\",[7887]],[[7887,7887],\"valid\"],[[7888,7888],\"mapped\",[7889]],[[7889,7889],\"valid\"],[[7890,7890],\"mapped\",[7891]],[[7891,7891],\"valid\"],[[7892,7892],\"mapped\",[7893]],[[7893,7893],\"valid\"],[[7894,7894],\"mapped\",[7895]],[[7895,7895],\"valid\"],[[7896,7896],\"mapped\",[7897]],[[7897,7897],\"valid\"],[[7898,7898],\"mapped\",[7899]],[[7899,7899],\"valid\"],[[7900,7900],\"mapped\",[7901]],[[7901,7901],\"valid\"],[[7902,7902],\"mapped\",[7903]],[[7903,7903],\"valid\"],[[7904,7904],\"mapped\",[7905]],[[7905,7905],\"valid\"],[[7906,7906],\"mapped\",[7907]],[[7907,7907],\"valid\"],[[7908,7908],\"mapped\",[7909]],[[7909,7909],\"valid\"],[[7910,7910],\"mapped\",[7911]],[[7911,7911],\"valid\"],[[7912,7912],\"mapped\",[7913]],[[7913,7913],\"valid\"],[[7914,7914],\"mapped\",[7915]],[[7915,7915],\"valid\"],[[7916,7916],\"mapped\",[7917]],[[7917,7917],\"valid\"],[[7918,7918],\"mapped\",[7919]],[[7919,7919],\"valid\"],[[7920,7920],\"mapped\",[7921]],[[7921,7921],\"valid\"],[[7922,7922],\"mapped\",[7923]],[[7923,7923],\"valid\"],[[7924,7924],\"mapped\",[7925]],[[7925,7925],\"valid\"],[[7926,7926],\"mapped\",[7927]],[[7927,7927],\"valid\"],[[7928,7928],\"mapped\",[7929]],[[7929,7929],\"valid\"],[[7930,7930],\"mapped\",[7931]],[[7931,7931],\"valid\"],[[7932,7932],\"mapped\",[7933]],[[7933,7933],\"valid\"],[[7934,7934],\"mapped\",[7935]],[[7935,7935],\"valid\"],[[7936,7943],\"valid\"],[[7944,7944],\"mapped\",[7936]],[[7945,7945],\"mapped\",[7937]],[[7946,7946],\"mapped\",[7938]],[[7947,7947],\"mapped\",[7939]],[[7948,7948],\"mapped\",[7940]],[[7949,7949],\"mapped\",[7941]],[[7950,7950],\"mapped\",[7942]],[[7951,7951],\"mapped\",[7943]],[[7952,7957],\"valid\"],[[7958,7959],\"disallowed\"],[[7960,7960],\"mapped\",[7952]],[[7961,7961],\"mapped\",[7953]],[[7962,7962],\"mapped\",[7954]],[[7963,7963],\"mapped\",[7955]],[[7964,7964],\"mapped\",[7956]],[[7965,7965],\"mapped\",[7957]],[[7966,7967],\"disallowed\"],[[7968,7975],\"valid\"],[[7976,7976],\"mapped\",[7968]],[[7977,7977],\"mapped\",[7969]],[[7978,7978],\"mapped\",[7970]],[[7979,7979],\"mapped\",[7971]],[[7980,7980],\"mapped\",[7972]],[[7981,7981],\"mapped\",[7973]],[[7982,7982],\"mapped\",[7974]],[[7983,7983],\"mapped\",[7975]],[[7984,7991],\"valid\"],[[7992,7992],\"mapped\",[7984]],[[7993,7993],\"mapped\",[7985]],[[7994,7994],\"mapped\",[7986]],[[7995,7995],\"mapped\",[7987]],[[7996,7996],\"mapped\",[7988]],[[7997,7997],\"mapped\",[7989]],[[7998,7998],\"mapped\",[7990]],[[7999,7999],\"mapped\",[7991]],[[8000,8005],\"valid\"],[[8006,8007],\"disallowed\"],[[8008,8008],\"mapped\",[8000]],[[8009,8009],\"mapped\",[8001]],[[8010,8010],\"mapped\",[8002]],[[8011,8011],\"mapped\",[8003]],[[8012,8012],\"mapped\",[8004]],[[8013,8013],\"mapped\",[8005]],[[8014,8015],\"disallowed\"],[[8016,8023],\"valid\"],[[8024,8024],\"disallowed\"],[[8025,8025],\"mapped\",[8017]],[[8026,8026],\"disallowed\"],[[8027,8027],\"mapped\",[8019]],[[8028,8028],\"disallowed\"],[[8029,8029],\"mapped\",[8021]],[[8030,8030],\"disallowed\"],[[8031,8031],\"mapped\",[8023]],[[8032,8039],\"valid\"],[[8040,8040],\"mapped\",[8032]],[[8041,8041],\"mapped\",[8033]],[[8042,8042],\"mapped\",[8034]],[[8043,8043],\"mapped\",[8035]],[[8044,8044],\"mapped\",[8036]],[[8045,8045],\"mapped\",[8037]],[[8046,8046],\"mapped\",[8038]],[[8047,8047],\"mapped\",[8039]],[[8048,8048],\"valid\"],[[8049,8049],\"mapped\",[940]],[[8050,8050],\"valid\"],[[8051,8051],\"mapped\",[941]],[[8052,8052],\"valid\"],[[8053,8053],\"mapped\",[942]],[[8054,8054],\"valid\"],[[8055,8055],\"mapped\",[943]],[[8056,8056],\"valid\"],[[8057,8057],\"mapped\",[972]],[[8058,8058],\"valid\"],[[8059,8059],\"mapped\",[973]],[[8060,8060],\"valid\"],[[8061,8061],\"mapped\",[974]],[[8062,8063],\"disallowed\"],[[8064,8064],\"mapped\",[7936,953]],[[8065,8065],\"mapped\",[7937,953]],[[8066,8066],\"mapped\",[7938,953]],[[8067,8067],\"mapped\",[7939,953]],[[8068,8068],\"mapped\",[7940,953]],[[8069,8069],\"mapped\",[7941,953]],[[8070,8070],\"mapped\",[7942,953]],[[8071,8071],\"mapped\",[7943,953]],[[8072,8072],\"mapped\",[7936,953]],[[8073,8073],\"mapped\",[7937,953]],[[8074,8074],\"mapped\",[7938,953]],[[8075,8075],\"mapped\",[7939,953]],[[8076,8076],\"mapped\",[7940,953]],[[8077,8077],\"mapped\",[7941,953]],[[8078,8078],\"mapped\",[7942,953]],[[8079,8079],\"mapped\",[7943,953]],[[8080,8080],\"mapped\",[7968,953]],[[8081,8081],\"mapped\",[7969,953]],[[8082,8082],\"mapped\",[7970,953]],[[8083,8083],\"mapped\",[7971,953]],[[8084,8084],\"mapped\",[7972,953]],[[8085,8085],\"mapped\",[7973,953]],[[8086,8086],\"mapped\",[7974,953]],[[8087,8087],\"mapped\",[7975,953]],[[8088,8088],\"mapped\",[7968,953]],[[8089,8089],\"mapped\",[7969,953]],[[8090,8090],\"mapped\",[7970,953]],[[8091,8091],\"mapped\",[7971,953]],[[8092,8092],\"mapped\",[7972,953]],[[8093,8093],\"mapped\",[7973,953]],[[8094,8094],\"mapped\",[7974,953]],[[8095,8095],\"mapped\",[7975,953]],[[8096,8096],\"mapped\",[8032,953]],[[8097,8097],\"mapped\",[8033,953]],[[8098,8098],\"mapped\",[8034,953]],[[8099,8099],\"mapped\",[8035,953]],[[8100,8100],\"mapped\",[8036,953]],[[8101,8101],\"mapped\",[8037,953]],[[8102,8102],\"mapped\",[8038,953]],[[8103,8103],\"mapped\",[8039,953]],[[8104,8104],\"mapped\",[8032,953]],[[8105,8105],\"mapped\",[8033,953]],[[8106,8106],\"mapped\",[8034,953]],[[8107,8107],\"mapped\",[8035,953]],[[8108,8108],\"mapped\",[8036,953]],[[8109,8109],\"mapped\",[8037,953]],[[8110,8110],\"mapped\",[8038,953]],[[8111,8111],\"mapped\",[8039,953]],[[8112,8113],\"valid\"],[[8114,8114],\"mapped\",[8048,953]],[[8115,8115],\"mapped\",[945,953]],[[8116,8116],\"mapped\",[940,953]],[[8117,8117],\"disallowed\"],[[8118,8118],\"valid\"],[[8119,8119],\"mapped\",[8118,953]],[[8120,8120],\"mapped\",[8112]],[[8121,8121],\"mapped\",[8113]],[[8122,8122],\"mapped\",[8048]],[[8123,8123],\"mapped\",[940]],[[8124,8124],\"mapped\",[945,953]],[[8125,8125],\"disallowed_STD3_mapped\",[32,787]],[[8126,8126],\"mapped\",[953]],[[8127,8127],\"disallowed_STD3_mapped\",[32,787]],[[8128,8128],\"disallowed_STD3_mapped\",[32,834]],[[8129,8129],\"disallowed_STD3_mapped\",[32,776,834]],[[8130,8130],\"mapped\",[8052,953]],[[8131,8131],\"mapped\",[951,953]],[[8132,8132],\"mapped\",[942,953]],[[8133,8133],\"disallowed\"],[[8134,8134],\"valid\"],[[8135,8135],\"mapped\",[8134,953]],[[8136,8136],\"mapped\",[8050]],[[8137,8137],\"mapped\",[941]],[[8138,8138],\"mapped\",[8052]],[[8139,8139],\"mapped\",[942]],[[8140,8140],\"mapped\",[951,953]],[[8141,8141],\"disallowed_STD3_mapped\",[32,787,768]],[[8142,8142],\"disallowed_STD3_mapped\",[32,787,769]],[[8143,8143],\"disallowed_STD3_mapped\",[32,787,834]],[[8144,8146],\"valid\"],[[8147,8147],\"mapped\",[912]],[[8148,8149],\"disallowed\"],[[8150,8151],\"valid\"],[[8152,8152],\"mapped\",[8144]],[[8153,8153],\"mapped\",[8145]],[[8154,8154],\"mapped\",[8054]],[[8155,8155],\"mapped\",[943]],[[8156,8156],\"disallowed\"],[[8157,8157],\"disallowed_STD3_mapped\",[32,788,768]],[[8158,8158],\"disallowed_STD3_mapped\",[32,788,769]],[[8159,8159],\"disallowed_STD3_mapped\",[32,788,834]],[[8160,8162],\"valid\"],[[8163,8163],\"mapped\",[944]],[[8164,8167],\"valid\"],[[8168,8168],\"mapped\",[8160]],[[8169,8169],\"mapped\",[8161]],[[8170,8170],\"mapped\",[8058]],[[8171,8171],\"mapped\",[973]],[[8172,8172],\"mapped\",[8165]],[[8173,8173],\"disallowed_STD3_mapped\",[32,776,768]],[[8174,8174],\"disallowed_STD3_mapped\",[32,776,769]],[[8175,8175],\"disallowed_STD3_mapped\",[96]],[[8176,8177],\"disallowed\"],[[8178,8178],\"mapped\",[8060,953]],[[8179,8179],\"mapped\",[969,953]],[[8180,8180],\"mapped\",[974,953]],[[8181,8181],\"disallowed\"],[[8182,8182],\"valid\"],[[8183,8183],\"mapped\",[8182,953]],[[8184,8184],\"mapped\",[8056]],[[8185,8185],\"mapped\",[972]],[[8186,8186],\"mapped\",[8060]],[[8187,8187],\"mapped\",[974]],[[8188,8188],\"mapped\",[969,953]],[[8189,8189],\"disallowed_STD3_mapped\",[32,769]],[[8190,8190],\"disallowed_STD3_mapped\",[32,788]],[[8191,8191],\"disallowed\"],[[8192,8202],\"disallowed_STD3_mapped\",[32]],[[8203,8203],\"ignored\"],[[8204,8205],\"deviation\",[]],[[8206,8207],\"disallowed\"],[[8208,8208],\"valid\",[],\"NV8\"],[[8209,8209],\"mapped\",[8208]],[[8210,8214],\"valid\",[],\"NV8\"],[[8215,8215],\"disallowed_STD3_mapped\",[32,819]],[[8216,8227],\"valid\",[],\"NV8\"],[[8228,8230],\"disallowed\"],[[8231,8231],\"valid\",[],\"NV8\"],[[8232,8238],\"disallowed\"],[[8239,8239],\"disallowed_STD3_mapped\",[32]],[[8240,8242],\"valid\",[],\"NV8\"],[[8243,8243],\"mapped\",[8242,8242]],[[8244,8244],\"mapped\",[8242,8242,8242]],[[8245,8245],\"valid\",[],\"NV8\"],[[8246,8246],\"mapped\",[8245,8245]],[[8247,8247],\"mapped\",[8245,8245,8245]],[[8248,8251],\"valid\",[],\"NV8\"],[[8252,8252],\"disallowed_STD3_mapped\",[33,33]],[[8253,8253],\"valid\",[],\"NV8\"],[[8254,8254],\"disallowed_STD3_mapped\",[32,773]],[[8255,8262],\"valid\",[],\"NV8\"],[[8263,8263],\"disallowed_STD3_mapped\",[63,63]],[[8264,8264],\"disallowed_STD3_mapped\",[63,33]],[[8265,8265],\"disallowed_STD3_mapped\",[33,63]],[[8266,8269],\"valid\",[],\"NV8\"],[[8270,8274],\"valid\",[],\"NV8\"],[[8275,8276],\"valid\",[],\"NV8\"],[[8277,8278],\"valid\",[],\"NV8\"],[[8279,8279],\"mapped\",[8242,8242,8242,8242]],[[8280,8286],\"valid\",[],\"NV8\"],[[8287,8287],\"disallowed_STD3_mapped\",[32]],[[8288,8288],\"ignored\"],[[8289,8291],\"disallowed\"],[[8292,8292],\"ignored\"],[[8293,8293],\"disallowed\"],[[8294,8297],\"disallowed\"],[[8298,8303],\"disallowed\"],[[8304,8304],\"mapped\",[48]],[[8305,8305],\"mapped\",[105]],[[8306,8307],\"disallowed\"],[[8308,8308],\"mapped\",[52]],[[8309,8309],\"mapped\",[53]],[[8310,8310],\"mapped\",[54]],[[8311,8311],\"mapped\",[55]],[[8312,8312],\"mapped\",[56]],[[8313,8313],\"mapped\",[57]],[[8314,8314],\"disallowed_STD3_mapped\",[43]],[[8315,8315],\"mapped\",[8722]],[[8316,8316],\"disallowed_STD3_mapped\",[61]],[[8317,8317],\"disallowed_STD3_mapped\",[40]],[[8318,8318],\"disallowed_STD3_mapped\",[41]],[[8319,8319],\"mapped\",[110]],[[8320,8320],\"mapped\",[48]],[[8321,8321],\"mapped\",[49]],[[8322,8322],\"mapped\",[50]],[[8323,8323],\"mapped\",[51]],[[8324,8324],\"mapped\",[52]],[[8325,8325],\"mapped\",[53]],[[8326,8326],\"mapped\",[54]],[[8327,8327],\"mapped\",[55]],[[8328,8328],\"mapped\",[56]],[[8329,8329],\"mapped\",[57]],[[8330,8330],\"disallowed_STD3_mapped\",[43]],[[8331,8331],\"mapped\",[8722]],[[8332,8332],\"disallowed_STD3_mapped\",[61]],[[8333,8333],\"disallowed_STD3_mapped\",[40]],[[8334,8334],\"disallowed_STD3_mapped\",[41]],[[8335,8335],\"disallowed\"],[[8336,8336],\"mapped\",[97]],[[8337,8337],\"mapped\",[101]],[[8338,8338],\"mapped\",[111]],[[8339,8339],\"mapped\",[120]],[[8340,8340],\"mapped\",[601]],[[8341,8341],\"mapped\",[104]],[[8342,8342],\"mapped\",[107]],[[8343,8343],\"mapped\",[108]],[[8344,8344],\"mapped\",[109]],[[8345,8345],\"mapped\",[110]],[[8346,8346],\"mapped\",[112]],[[8347,8347],\"mapped\",[115]],[[8348,8348],\"mapped\",[116]],[[8349,8351],\"disallowed\"],[[8352,8359],\"valid\",[],\"NV8\"],[[8360,8360],\"mapped\",[114,115]],[[8361,8362],\"valid\",[],\"NV8\"],[[8363,8363],\"valid\",[],\"NV8\"],[[8364,8364],\"valid\",[],\"NV8\"],[[8365,8367],\"valid\",[],\"NV8\"],[[8368,8369],\"valid\",[],\"NV8\"],[[8370,8373],\"valid\",[],\"NV8\"],[[8374,8376],\"valid\",[],\"NV8\"],[[8377,8377],\"valid\",[],\"NV8\"],[[8378,8378],\"valid\",[],\"NV8\"],[[8379,8381],\"valid\",[],\"NV8\"],[[8382,8382],\"valid\",[],\"NV8\"],[[8383,8399],\"disallowed\"],[[8400,8417],\"valid\",[],\"NV8\"],[[8418,8419],\"valid\",[],\"NV8\"],[[8420,8426],\"valid\",[],\"NV8\"],[[8427,8427],\"valid\",[],\"NV8\"],[[8428,8431],\"valid\",[],\"NV8\"],[[8432,8432],\"valid\",[],\"NV8\"],[[8433,8447],\"disallowed\"],[[8448,8448],\"disallowed_STD3_mapped\",[97,47,99]],[[8449,8449],\"disallowed_STD3_mapped\",[97,47,115]],[[8450,8450],\"mapped\",[99]],[[8451,8451],\"mapped\",[176,99]],[[8452,8452],\"valid\",[],\"NV8\"],[[8453,8453],\"disallowed_STD3_mapped\",[99,47,111]],[[8454,8454],\"disallowed_STD3_mapped\",[99,47,117]],[[8455,8455],\"mapped\",[603]],[[8456,8456],\"valid\",[],\"NV8\"],[[8457,8457],\"mapped\",[176,102]],[[8458,8458],\"mapped\",[103]],[[8459,8462],\"mapped\",[104]],[[8463,8463],\"mapped\",[295]],[[8464,8465],\"mapped\",[105]],[[8466,8467],\"mapped\",[108]],[[8468,8468],\"valid\",[],\"NV8\"],[[8469,8469],\"mapped\",[110]],[[8470,8470],\"mapped\",[110,111]],[[8471,8472],\"valid\",[],\"NV8\"],[[8473,8473],\"mapped\",[112]],[[8474,8474],\"mapped\",[113]],[[8475,8477],\"mapped\",[114]],[[8478,8479],\"valid\",[],\"NV8\"],[[8480,8480],\"mapped\",[115,109]],[[8481,8481],\"mapped\",[116,101,108]],[[8482,8482],\"mapped\",[116,109]],[[8483,8483],\"valid\",[],\"NV8\"],[[8484,8484],\"mapped\",[122]],[[8485,8485],\"valid\",[],\"NV8\"],[[8486,8486],\"mapped\",[969]],[[8487,8487],\"valid\",[],\"NV8\"],[[8488,8488],\"mapped\",[122]],[[8489,8489],\"valid\",[],\"NV8\"],[[8490,8490],\"mapped\",[107]],[[8491,8491],\"mapped\",[229]],[[8492,8492],\"mapped\",[98]],[[8493,8493],\"mapped\",[99]],[[8494,8494],\"valid\",[],\"NV8\"],[[8495,8496],\"mapped\",[101]],[[8497,8497],\"mapped\",[102]],[[8498,8498],\"disallowed\"],[[8499,8499],\"mapped\",[109]],[[8500,8500],\"mapped\",[111]],[[8501,8501],\"mapped\",[1488]],[[8502,8502],\"mapped\",[1489]],[[8503,8503],\"mapped\",[1490]],[[8504,8504],\"mapped\",[1491]],[[8505,8505],\"mapped\",[105]],[[8506,8506],\"valid\",[],\"NV8\"],[[8507,8507],\"mapped\",[102,97,120]],[[8508,8508],\"mapped\",[960]],[[8509,8510],\"mapped\",[947]],[[8511,8511],\"mapped\",[960]],[[8512,8512],\"mapped\",[8721]],[[8513,8516],\"valid\",[],\"NV8\"],[[8517,8518],\"mapped\",[100]],[[8519,8519],\"mapped\",[101]],[[8520,8520],\"mapped\",[105]],[[8521,8521],\"mapped\",[106]],[[8522,8523],\"valid\",[],\"NV8\"],[[8524,8524],\"valid\",[],\"NV8\"],[[8525,8525],\"valid\",[],\"NV8\"],[[8526,8526],\"valid\"],[[8527,8527],\"valid\",[],\"NV8\"],[[8528,8528],\"mapped\",[49,8260,55]],[[8529,8529],\"mapped\",[49,8260,57]],[[8530,8530],\"mapped\",[49,8260,49,48]],[[8531,8531],\"mapped\",[49,8260,51]],[[8532,8532],\"mapped\",[50,8260,51]],[[8533,8533],\"mapped\",[49,8260,53]],[[8534,8534],\"mapped\",[50,8260,53]],[[8535,8535],\"mapped\",[51,8260,53]],[[8536,8536],\"mapped\",[52,8260,53]],[[8537,8537],\"mapped\",[49,8260,54]],[[8538,8538],\"mapped\",[53,8260,54]],[[8539,8539],\"mapped\",[49,8260,56]],[[8540,8540],\"mapped\",[51,8260,56]],[[8541,8541],\"mapped\",[53,8260,56]],[[8542,8542],\"mapped\",[55,8260,56]],[[8543,8543],\"mapped\",[49,8260]],[[8544,8544],\"mapped\",[105]],[[8545,8545],\"mapped\",[105,105]],[[8546,8546],\"mapped\",[105,105,105]],[[8547,8547],\"mapped\",[105,118]],[[8548,8548],\"mapped\",[118]],[[8549,8549],\"mapped\",[118,105]],[[8550,8550],\"mapped\",[118,105,105]],[[8551,8551],\"mapped\",[118,105,105,105]],[[8552,8552],\"mapped\",[105,120]],[[8553,8553],\"mapped\",[120]],[[8554,8554],\"mapped\",[120,105]],[[8555,8555],\"mapped\",[120,105,105]],[[8556,8556],\"mapped\",[108]],[[8557,8557],\"mapped\",[99]],[[8558,8558],\"mapped\",[100]],[[8559,8559],\"mapped\",[109]],[[8560,8560],\"mapped\",[105]],[[8561,8561],\"mapped\",[105,105]],[[8562,8562],\"mapped\",[105,105,105]],[[8563,8563],\"mapped\",[105,118]],[[8564,8564],\"mapped\",[118]],[[8565,8565],\"mapped\",[118,105]],[[8566,8566],\"mapped\",[118,105,105]],[[8567,8567],\"mapped\",[118,105,105,105]],[[8568,8568],\"mapped\",[105,120]],[[8569,8569],\"mapped\",[120]],[[8570,8570],\"mapped\",[120,105]],[[8571,8571],\"mapped\",[120,105,105]],[[8572,8572],\"mapped\",[108]],[[8573,8573],\"mapped\",[99]],[[8574,8574],\"mapped\",[100]],[[8575,8575],\"mapped\",[109]],[[8576,8578],\"valid\",[],\"NV8\"],[[8579,8579],\"disallowed\"],[[8580,8580],\"valid\"],[[8581,8584],\"valid\",[],\"NV8\"],[[8585,8585],\"mapped\",[48,8260,51]],[[8586,8587],\"valid\",[],\"NV8\"],[[8588,8591],\"disallowed\"],[[8592,8682],\"valid\",[],\"NV8\"],[[8683,8691],\"valid\",[],\"NV8\"],[[8692,8703],\"valid\",[],\"NV8\"],[[8704,8747],\"valid\",[],\"NV8\"],[[8748,8748],\"mapped\",[8747,8747]],[[8749,8749],\"mapped\",[8747,8747,8747]],[[8750,8750],\"valid\",[],\"NV8\"],[[8751,8751],\"mapped\",[8750,8750]],[[8752,8752],\"mapped\",[8750,8750,8750]],[[8753,8799],\"valid\",[],\"NV8\"],[[8800,8800],\"disallowed_STD3_valid\"],[[8801,8813],\"valid\",[],\"NV8\"],[[8814,8815],\"disallowed_STD3_valid\"],[[8816,8945],\"valid\",[],\"NV8\"],[[8946,8959],\"valid\",[],\"NV8\"],[[8960,8960],\"valid\",[],\"NV8\"],[[8961,8961],\"valid\",[],\"NV8\"],[[8962,9000],\"valid\",[],\"NV8\"],[[9001,9001],\"mapped\",[12296]],[[9002,9002],\"mapped\",[12297]],[[9003,9082],\"valid\",[],\"NV8\"],[[9083,9083],\"valid\",[],\"NV8\"],[[9084,9084],\"valid\",[],\"NV8\"],[[9085,9114],\"valid\",[],\"NV8\"],[[9115,9166],\"valid\",[],\"NV8\"],[[9167,9168],\"valid\",[],\"NV8\"],[[9169,9179],\"valid\",[],\"NV8\"],[[9180,9191],\"valid\",[],\"NV8\"],[[9192,9192],\"valid\",[],\"NV8\"],[[9193,9203],\"valid\",[],\"NV8\"],[[9204,9210],\"valid\",[],\"NV8\"],[[9211,9215],\"disallowed\"],[[9216,9252],\"valid\",[],\"NV8\"],[[9253,9254],\"valid\",[],\"NV8\"],[[9255,9279],\"disallowed\"],[[9280,9290],\"valid\",[],\"NV8\"],[[9291,9311],\"disallowed\"],[[9312,9312],\"mapped\",[49]],[[9313,9313],\"mapped\",[50]],[[9314,9314],\"mapped\",[51]],[[9315,9315],\"mapped\",[52]],[[9316,9316],\"mapped\",[53]],[[9317,9317],\"mapped\",[54]],[[9318,9318],\"mapped\",[55]],[[9319,9319],\"mapped\",[56]],[[9320,9320],\"mapped\",[57]],[[9321,9321],\"mapped\",[49,48]],[[9322,9322],\"mapped\",[49,49]],[[9323,9323],\"mapped\",[49,50]],[[9324,9324],\"mapped\",[49,51]],[[9325,9325],\"mapped\",[49,52]],[[9326,9326],\"mapped\",[49,53]],[[9327,9327],\"mapped\",[49,54]],[[9328,9328],\"mapped\",[49,55]],[[9329,9329],\"mapped\",[49,56]],[[9330,9330],\"mapped\",[49,57]],[[9331,9331],\"mapped\",[50,48]],[[9332,9332],\"disallowed_STD3_mapped\",[40,49,41]],[[9333,9333],\"disallowed_STD3_mapped\",[40,50,41]],[[9334,9334],\"disallowed_STD3_mapped\",[40,51,41]],[[9335,9335],\"disallowed_STD3_mapped\",[40,52,41]],[[9336,9336],\"disallowed_STD3_mapped\",[40,53,41]],[[9337,9337],\"disallowed_STD3_mapped\",[40,54,41]],[[9338,9338],\"disallowed_STD3_mapped\",[40,55,41]],[[9339,9339],\"disallowed_STD3_mapped\",[40,56,41]],[[9340,9340],\"disallowed_STD3_mapped\",[40,57,41]],[[9341,9341],\"disallowed_STD3_mapped\",[40,49,48,41]],[[9342,9342],\"disallowed_STD3_mapped\",[40,49,49,41]],[[9343,9343],\"disallowed_STD3_mapped\",[40,49,50,41]],[[9344,9344],\"disallowed_STD3_mapped\",[40,49,51,41]],[[9345,9345],\"disallowed_STD3_mapped\",[40,49,52,41]],[[9346,9346],\"disallowed_STD3_mapped\",[40,49,53,41]],[[9347,9347],\"disallowed_STD3_mapped\",[40,49,54,41]],[[9348,9348],\"disallowed_STD3_mapped\",[40,49,55,41]],[[9349,9349],\"disallowed_STD3_mapped\",[40,49,56,41]],[[9350,9350],\"disallowed_STD3_mapped\",[40,49,57,41]],[[9351,9351],\"disallowed_STD3_mapped\",[40,50,48,41]],[[9352,9371],\"disallowed\"],[[9372,9372],\"disallowed_STD3_mapped\",[40,97,41]],[[9373,9373],\"disallowed_STD3_mapped\",[40,98,41]],[[9374,9374],\"disallowed_STD3_mapped\",[40,99,41]],[[9375,9375],\"disallowed_STD3_mapped\",[40,100,41]],[[9376,9376],\"disallowed_STD3_mapped\",[40,101,41]],[[9377,9377],\"disallowed_STD3_mapped\",[40,102,41]],[[9378,9378],\"disallowed_STD3_mapped\",[40,103,41]],[[9379,9379],\"disallowed_STD3_mapped\",[40,104,41]],[[9380,9380],\"disallowed_STD3_mapped\",[40,105,41]],[[9381,9381],\"disallowed_STD3_mapped\",[40,106,41]],[[9382,9382],\"disallowed_STD3_mapped\",[40,107,41]],[[9383,9383],\"disallowed_STD3_mapped\",[40,108,41]],[[9384,9384],\"disallowed_STD3_mapped\",[40,109,41]],[[9385,9385],\"disallowed_STD3_mapped\",[40,110,41]],[[9386,9386],\"disallowed_STD3_mapped\",[40,111,41]],[[9387,9387],\"disallowed_STD3_mapped\",[40,112,41]],[[9388,9388],\"disallowed_STD3_mapped\",[40,113,41]],[[9389,9389],\"disallowed_STD3_mapped\",[40,114,41]],[[9390,9390],\"disallowed_STD3_mapped\",[40,115,41]],[[9391,9391],\"disallowed_STD3_mapped\",[40,116,41]],[[9392,9392],\"disallowed_STD3_mapped\",[40,117,41]],[[9393,9393],\"disallowed_STD3_mapped\",[40,118,41]],[[9394,9394],\"disallowed_STD3_mapped\",[40,119,41]],[[9395,9395],\"disallowed_STD3_mapped\",[40,120,41]],[[9396,9396],\"disallowed_STD3_mapped\",[40,121,41]],[[9397,9397],\"disallowed_STD3_mapped\",[40,122,41]],[[9398,9398],\"mapped\",[97]],[[9399,9399],\"mapped\",[98]],[[9400,9400],\"mapped\",[99]],[[9401,9401],\"mapped\",[100]],[[9402,9402],\"mapped\",[101]],[[9403,9403],\"mapped\",[102]],[[9404,9404],\"mapped\",[103]],[[9405,9405],\"mapped\",[104]],[[9406,9406],\"mapped\",[105]],[[9407,9407],\"mapped\",[106]],[[9408,9408],\"mapped\",[107]],[[9409,9409],\"mapped\",[108]],[[9410,9410],\"mapped\",[109]],[[9411,9411],\"mapped\",[110]],[[9412,9412],\"mapped\",[111]],[[9413,9413],\"mapped\",[112]],[[9414,9414],\"mapped\",[113]],[[9415,9415],\"mapped\",[114]],[[9416,9416],\"mapped\",[115]],[[9417,9417],\"mapped\",[116]],[[9418,9418],\"mapped\",[117]],[[9419,9419],\"mapped\",[118]],[[9420,9420],\"mapped\",[119]],[[9421,9421],\"mapped\",[120]],[[9422,9422],\"mapped\",[121]],[[9423,9423],\"mapped\",[122]],[[9424,9424],\"mapped\",[97]],[[9425,9425],\"mapped\",[98]],[[9426,9426],\"mapped\",[99]],[[9427,9427],\"mapped\",[100]],[[9428,9428],\"mapped\",[101]],[[9429,9429],\"mapped\",[102]],[[9430,9430],\"mapped\",[103]],[[9431,9431],\"mapped\",[104]],[[9432,9432],\"mapped\",[105]],[[9433,9433],\"mapped\",[106]],[[9434,9434],\"mapped\",[107]],[[9435,9435],\"mapped\",[108]],[[9436,9436],\"mapped\",[109]],[[9437,9437],\"mapped\",[110]],[[9438,9438],\"mapped\",[111]],[[9439,9439],\"mapped\",[112]],[[9440,9440],\"mapped\",[113]],[[9441,9441],\"mapped\",[114]],[[9442,9442],\"mapped\",[115]],[[9443,9443],\"mapped\",[116]],[[9444,9444],\"mapped\",[117]],[[9445,9445],\"mapped\",[118]],[[9446,9446],\"mapped\",[119]],[[9447,9447],\"mapped\",[120]],[[9448,9448],\"mapped\",[121]],[[9449,9449],\"mapped\",[122]],[[9450,9450],\"mapped\",[48]],[[9451,9470],\"valid\",[],\"NV8\"],[[9471,9471],\"valid\",[],\"NV8\"],[[9472,9621],\"valid\",[],\"NV8\"],[[9622,9631],\"valid\",[],\"NV8\"],[[9632,9711],\"valid\",[],\"NV8\"],[[9712,9719],\"valid\",[],\"NV8\"],[[9720,9727],\"valid\",[],\"NV8\"],[[9728,9747],\"valid\",[],\"NV8\"],[[9748,9749],\"valid\",[],\"NV8\"],[[9750,9751],\"valid\",[],\"NV8\"],[[9752,9752],\"valid\",[],\"NV8\"],[[9753,9753],\"valid\",[],\"NV8\"],[[9754,9839],\"valid\",[],\"NV8\"],[[9840,9841],\"valid\",[],\"NV8\"],[[9842,9853],\"valid\",[],\"NV8\"],[[9854,9855],\"valid\",[],\"NV8\"],[[9856,9865],\"valid\",[],\"NV8\"],[[9866,9873],\"valid\",[],\"NV8\"],[[9874,9884],\"valid\",[],\"NV8\"],[[9885,9885],\"valid\",[],\"NV8\"],[[9886,9887],\"valid\",[],\"NV8\"],[[9888,9889],\"valid\",[],\"NV8\"],[[9890,9905],\"valid\",[],\"NV8\"],[[9906,9906],\"valid\",[],\"NV8\"],[[9907,9916],\"valid\",[],\"NV8\"],[[9917,9919],\"valid\",[],\"NV8\"],[[9920,9923],\"valid\",[],\"NV8\"],[[9924,9933],\"valid\",[],\"NV8\"],[[9934,9934],\"valid\",[],\"NV8\"],[[9935,9953],\"valid\",[],\"NV8\"],[[9954,9954],\"valid\",[],\"NV8\"],[[9955,9955],\"valid\",[],\"NV8\"],[[9956,9959],\"valid\",[],\"NV8\"],[[9960,9983],\"valid\",[],\"NV8\"],[[9984,9984],\"valid\",[],\"NV8\"],[[9985,9988],\"valid\",[],\"NV8\"],[[9989,9989],\"valid\",[],\"NV8\"],[[9990,9993],\"valid\",[],\"NV8\"],[[9994,9995],\"valid\",[],\"NV8\"],[[9996,10023],\"valid\",[],\"NV8\"],[[10024,10024],\"valid\",[],\"NV8\"],[[10025,10059],\"valid\",[],\"NV8\"],[[10060,10060],\"valid\",[],\"NV8\"],[[10061,10061],\"valid\",[],\"NV8\"],[[10062,10062],\"valid\",[],\"NV8\"],[[10063,10066],\"valid\",[],\"NV8\"],[[10067,10069],\"valid\",[],\"NV8\"],[[10070,10070],\"valid\",[],\"NV8\"],[[10071,10071],\"valid\",[],\"NV8\"],[[10072,10078],\"valid\",[],\"NV8\"],[[10079,10080],\"valid\",[],\"NV8\"],[[10081,10087],\"valid\",[],\"NV8\"],[[10088,10101],\"valid\",[],\"NV8\"],[[10102,10132],\"valid\",[],\"NV8\"],[[10133,10135],\"valid\",[],\"NV8\"],[[10136,10159],\"valid\",[],\"NV8\"],[[10160,10160],\"valid\",[],\"NV8\"],[[10161,10174],\"valid\",[],\"NV8\"],[[10175,10175],\"valid\",[],\"NV8\"],[[10176,10182],\"valid\",[],\"NV8\"],[[10183,10186],\"valid\",[],\"NV8\"],[[10187,10187],\"valid\",[],\"NV8\"],[[10188,10188],\"valid\",[],\"NV8\"],[[10189,10189],\"valid\",[],\"NV8\"],[[10190,10191],\"valid\",[],\"NV8\"],[[10192,10219],\"valid\",[],\"NV8\"],[[10220,10223],\"valid\",[],\"NV8\"],[[10224,10239],\"valid\",[],\"NV8\"],[[10240,10495],\"valid\",[],\"NV8\"],[[10496,10763],\"valid\",[],\"NV8\"],[[10764,10764],\"mapped\",[8747,8747,8747,8747]],[[10765,10867],\"valid\",[],\"NV8\"],[[10868,10868],\"disallowed_STD3_mapped\",[58,58,61]],[[10869,10869],\"disallowed_STD3_mapped\",[61,61]],[[10870,10870],\"disallowed_STD3_mapped\",[61,61,61]],[[10871,10971],\"valid\",[],\"NV8\"],[[10972,10972],\"mapped\",[10973,824]],[[10973,11007],\"valid\",[],\"NV8\"],[[11008,11021],\"valid\",[],\"NV8\"],[[11022,11027],\"valid\",[],\"NV8\"],[[11028,11034],\"valid\",[],\"NV8\"],[[11035,11039],\"valid\",[],\"NV8\"],[[11040,11043],\"valid\",[],\"NV8\"],[[11044,11084],\"valid\",[],\"NV8\"],[[11085,11087],\"valid\",[],\"NV8\"],[[11088,11092],\"valid\",[],\"NV8\"],[[11093,11097],\"valid\",[],\"NV8\"],[[11098,11123],\"valid\",[],\"NV8\"],[[11124,11125],\"disallowed\"],[[11126,11157],\"valid\",[],\"NV8\"],[[11158,11159],\"disallowed\"],[[11160,11193],\"valid\",[],\"NV8\"],[[11194,11196],\"disallowed\"],[[11197,11208],\"valid\",[],\"NV8\"],[[11209,11209],\"disallowed\"],[[11210,11217],\"valid\",[],\"NV8\"],[[11218,11243],\"disallowed\"],[[11244,11247],\"valid\",[],\"NV8\"],[[11248,11263],\"disallowed\"],[[11264,11264],\"mapped\",[11312]],[[11265,11265],\"mapped\",[11313]],[[11266,11266],\"mapped\",[11314]],[[11267,11267],\"mapped\",[11315]],[[11268,11268],\"mapped\",[11316]],[[11269,11269],\"mapped\",[11317]],[[11270,11270],\"mapped\",[11318]],[[11271,11271],\"mapped\",[11319]],[[11272,11272],\"mapped\",[11320]],[[11273,11273],\"mapped\",[11321]],[[11274,11274],\"mapped\",[11322]],[[11275,11275],\"mapped\",[11323]],[[11276,11276],\"mapped\",[11324]],[[11277,11277],\"mapped\",[11325]],[[11278,11278],\"mapped\",[11326]],[[11279,11279],\"mapped\",[11327]],[[11280,11280],\"mapped\",[11328]],[[11281,11281],\"mapped\",[11329]],[[11282,11282],\"mapped\",[11330]],[[11283,11283],\"mapped\",[11331]],[[11284,11284],\"mapped\",[11332]],[[11285,11285],\"mapped\",[11333]],[[11286,11286],\"mapped\",[11334]],[[11287,11287],\"mapped\",[11335]],[[11288,11288],\"mapped\",[11336]],[[11289,11289],\"mapped\",[11337]],[[11290,11290],\"mapped\",[11338]],[[11291,11291],\"mapped\",[11339]],[[11292,11292],\"mapped\",[11340]],[[11293,11293],\"mapped\",[11341]],[[11294,11294],\"mapped\",[11342]],[[11295,11295],\"mapped\",[11343]],[[11296,11296],\"mapped\",[11344]],[[11297,11297],\"mapped\",[11345]],[[11298,11298],\"mapped\",[11346]],[[11299,11299],\"mapped\",[11347]],[[11300,11300],\"mapped\",[11348]],[[11301,11301],\"mapped\",[11349]],[[11302,11302],\"mapped\",[11350]],[[11303,11303],\"mapped\",[11351]],[[11304,11304],\"mapped\",[11352]],[[11305,11305],\"mapped\",[11353]],[[11306,11306],\"mapped\",[11354]],[[11307,11307],\"mapped\",[11355]],[[11308,11308],\"mapped\",[11356]],[[11309,11309],\"mapped\",[11357]],[[11310,11310],\"mapped\",[11358]],[[11311,11311],\"disallowed\"],[[11312,11358],\"valid\"],[[11359,11359],\"disallowed\"],[[11360,11360],\"mapped\",[11361]],[[11361,11361],\"valid\"],[[11362,11362],\"mapped\",[619]],[[11363,11363],\"mapped\",[7549]],[[11364,11364],\"mapped\",[637]],[[11365,11366],\"valid\"],[[11367,11367],\"mapped\",[11368]],[[11368,11368],\"valid\"],[[11369,11369],\"mapped\",[11370]],[[11370,11370],\"valid\"],[[11371,11371],\"mapped\",[11372]],[[11372,11372],\"valid\"],[[11373,11373],\"mapped\",[593]],[[11374,11374],\"mapped\",[625]],[[11375,11375],\"mapped\",[592]],[[11376,11376],\"mapped\",[594]],[[11377,11377],\"valid\"],[[11378,11378],\"mapped\",[11379]],[[11379,11379],\"valid\"],[[11380,11380],\"valid\"],[[11381,11381],\"mapped\",[11382]],[[11382,11383],\"valid\"],[[11384,11387],\"valid\"],[[11388,11388],\"mapped\",[106]],[[11389,11389],\"mapped\",[118]],[[11390,11390],\"mapped\",[575]],[[11391,11391],\"mapped\",[576]],[[11392,11392],\"mapped\",[11393]],[[11393,11393],\"valid\"],[[11394,11394],\"mapped\",[11395]],[[11395,11395],\"valid\"],[[11396,11396],\"mapped\",[11397]],[[11397,11397],\"valid\"],[[11398,11398],\"mapped\",[11399]],[[11399,11399],\"valid\"],[[11400,11400],\"mapped\",[11401]],[[11401,11401],\"valid\"],[[11402,11402],\"mapped\",[11403]],[[11403,11403],\"valid\"],[[11404,11404],\"mapped\",[11405]],[[11405,11405],\"valid\"],[[11406,11406],\"mapped\",[11407]],[[11407,11407],\"valid\"],[[11408,11408],\"mapped\",[11409]],[[11409,11409],\"valid\"],[[11410,11410],\"mapped\",[11411]],[[11411,11411],\"valid\"],[[11412,11412],\"mapped\",[11413]],[[11413,11413],\"valid\"],[[11414,11414],\"mapped\",[11415]],[[11415,11415],\"valid\"],[[11416,11416],\"mapped\",[11417]],[[11417,11417],\"valid\"],[[11418,11418],\"mapped\",[11419]],[[11419,11419],\"valid\"],[[11420,11420],\"mapped\",[11421]],[[11421,11421],\"valid\"],[[11422,11422],\"mapped\",[11423]],[[11423,11423],\"valid\"],[[11424,11424],\"mapped\",[11425]],[[11425,11425],\"valid\"],[[11426,11426],\"mapped\",[11427]],[[11427,11427],\"valid\"],[[11428,11428],\"mapped\",[11429]],[[11429,11429],\"valid\"],[[11430,11430],\"mapped\",[11431]],[[11431,11431],\"valid\"],[[11432,11432],\"mapped\",[11433]],[[11433,11433],\"valid\"],[[11434,11434],\"mapped\",[11435]],[[11435,11435],\"valid\"],[[11436,11436],\"mapped\",[11437]],[[11437,11437],\"valid\"],[[11438,11438],\"mapped\",[11439]],[[11439,11439],\"valid\"],[[11440,11440],\"mapped\",[11441]],[[11441,11441],\"valid\"],[[11442,11442],\"mapped\",[11443]],[[11443,11443],\"valid\"],[[11444,11444],\"mapped\",[11445]],[[11445,11445],\"valid\"],[[11446,11446],\"mapped\",[11447]],[[11447,11447],\"valid\"],[[11448,11448],\"mapped\",[11449]],[[11449,11449],\"valid\"],[[11450,11450],\"mapped\",[11451]],[[11451,11451],\"valid\"],[[11452,11452],\"mapped\",[11453]],[[11453,11453],\"valid\"],[[11454,11454],\"mapped\",[11455]],[[11455,11455],\"valid\"],[[11456,11456],\"mapped\",[11457]],[[11457,11457],\"valid\"],[[11458,11458],\"mapped\",[11459]],[[11459,11459],\"valid\"],[[11460,11460],\"mapped\",[11461]],[[11461,11461],\"valid\"],[[11462,11462],\"mapped\",[11463]],[[11463,11463],\"valid\"],[[11464,11464],\"mapped\",[11465]],[[11465,11465],\"valid\"],[[11466,11466],\"mapped\",[11467]],[[11467,11467],\"valid\"],[[11468,11468],\"mapped\",[11469]],[[11469,11469],\"valid\"],[[11470,11470],\"mapped\",[11471]],[[11471,11471],\"valid\"],[[11472,11472],\"mapped\",[11473]],[[11473,11473],\"valid\"],[[11474,11474],\"mapped\",[11475]],[[11475,11475],\"valid\"],[[11476,11476],\"mapped\",[11477]],[[11477,11477],\"valid\"],[[11478,11478],\"mapped\",[11479]],[[11479,11479],\"valid\"],[[11480,11480],\"mapped\",[11481]],[[11481,11481],\"valid\"],[[11482,11482],\"mapped\",[11483]],[[11483,11483],\"valid\"],[[11484,11484],\"mapped\",[11485]],[[11485,11485],\"valid\"],[[11486,11486],\"mapped\",[11487]],[[11487,11487],\"valid\"],[[11488,11488],\"mapped\",[11489]],[[11489,11489],\"valid\"],[[11490,11490],\"mapped\",[11491]],[[11491,11492],\"valid\"],[[11493,11498],\"valid\",[],\"NV8\"],[[11499,11499],\"mapped\",[11500]],[[11500,11500],\"valid\"],[[11501,11501],\"mapped\",[11502]],[[11502,11505],\"valid\"],[[11506,11506],\"mapped\",[11507]],[[11507,11507],\"valid\"],[[11508,11512],\"disallowed\"],[[11513,11519],\"valid\",[],\"NV8\"],[[11520,11557],\"valid\"],[[11558,11558],\"disallowed\"],[[11559,11559],\"valid\"],[[11560,11564],\"disallowed\"],[[11565,11565],\"valid\"],[[11566,11567],\"disallowed\"],[[11568,11621],\"valid\"],[[11622,11623],\"valid\"],[[11624,11630],\"disallowed\"],[[11631,11631],\"mapped\",[11617]],[[11632,11632],\"valid\",[],\"NV8\"],[[11633,11646],\"disallowed\"],[[11647,11647],\"valid\"],[[11648,11670],\"valid\"],[[11671,11679],\"disallowed\"],[[11680,11686],\"valid\"],[[11687,11687],\"disallowed\"],[[11688,11694],\"valid\"],[[11695,11695],\"disallowed\"],[[11696,11702],\"valid\"],[[11703,11703],\"disallowed\"],[[11704,11710],\"valid\"],[[11711,11711],\"disallowed\"],[[11712,11718],\"valid\"],[[11719,11719],\"disallowed\"],[[11720,11726],\"valid\"],[[11727,11727],\"disallowed\"],[[11728,11734],\"valid\"],[[11735,11735],\"disallowed\"],[[11736,11742],\"valid\"],[[11743,11743],\"disallowed\"],[[11744,11775],\"valid\"],[[11776,11799],\"valid\",[],\"NV8\"],[[11800,11803],\"valid\",[],\"NV8\"],[[11804,11805],\"valid\",[],\"NV8\"],[[11806,11822],\"valid\",[],\"NV8\"],[[11823,11823],\"valid\"],[[11824,11824],\"valid\",[],\"NV8\"],[[11825,11825],\"valid\",[],\"NV8\"],[[11826,11835],\"valid\",[],\"NV8\"],[[11836,11842],\"valid\",[],\"NV8\"],[[11843,11903],\"disallowed\"],[[11904,11929],\"valid\",[],\"NV8\"],[[11930,11930],\"disallowed\"],[[11931,11934],\"valid\",[],\"NV8\"],[[11935,11935],\"mapped\",[27597]],[[11936,12018],\"valid\",[],\"NV8\"],[[12019,12019],\"mapped\",[40863]],[[12020,12031],\"disallowed\"],[[12032,12032],\"mapped\",[19968]],[[12033,12033],\"mapped\",[20008]],[[12034,12034],\"mapped\",[20022]],[[12035,12035],\"mapped\",[20031]],[[12036,12036],\"mapped\",[20057]],[[12037,12037],\"mapped\",[20101]],[[12038,12038],\"mapped\",[20108]],[[12039,12039],\"mapped\",[20128]],[[12040,12040],\"mapped\",[20154]],[[12041,12041],\"mapped\",[20799]],[[12042,12042],\"mapped\",[20837]],[[12043,12043],\"mapped\",[20843]],[[12044,12044],\"mapped\",[20866]],[[12045,12045],\"mapped\",[20886]],[[12046,12046],\"mapped\",[20907]],[[12047,12047],\"mapped\",[20960]],[[12048,12048],\"mapped\",[20981]],[[12049,12049],\"mapped\",[20992]],[[12050,12050],\"mapped\",[21147]],[[12051,12051],\"mapped\",[21241]],[[12052,12052],\"mapped\",[21269]],[[12053,12053],\"mapped\",[21274]],[[12054,12054],\"mapped\",[21304]],[[12055,12055],\"mapped\",[21313]],[[12056,12056],\"mapped\",[21340]],[[12057,12057],\"mapped\",[21353]],[[12058,12058],\"mapped\",[21378]],[[12059,12059],\"mapped\",[21430]],[[12060,12060],\"mapped\",[21448]],[[12061,12061],\"mapped\",[21475]],[[12062,12062],\"mapped\",[22231]],[[12063,12063],\"mapped\",[22303]],[[12064,12064],\"mapped\",[22763]],[[12065,12065],\"mapped\",[22786]],[[12066,12066],\"mapped\",[22794]],[[12067,12067],\"mapped\",[22805]],[[12068,12068],\"mapped\",[22823]],[[12069,12069],\"mapped\",[22899]],[[12070,12070],\"mapped\",[23376]],[[12071,12071],\"mapped\",[23424]],[[12072,12072],\"mapped\",[23544]],[[12073,12073],\"mapped\",[23567]],[[12074,12074],\"mapped\",[23586]],[[12075,12075],\"mapped\",[23608]],[[12076,12076],\"mapped\",[23662]],[[12077,12077],\"mapped\",[23665]],[[12078,12078],\"mapped\",[24027]],[[12079,12079],\"mapped\",[24037]],[[12080,12080],\"mapped\",[24049]],[[12081,12081],\"mapped\",[24062]],[[12082,12082],\"mapped\",[24178]],[[12083,12083],\"mapped\",[24186]],[[12084,12084],\"mapped\",[24191]],[[12085,12085],\"mapped\",[24308]],[[12086,12086],\"mapped\",[24318]],[[12087,12087],\"mapped\",[24331]],[[12088,12088],\"mapped\",[24339]],[[12089,12089],\"mapped\",[24400]],[[12090,12090],\"mapped\",[24417]],[[12091,12091],\"mapped\",[24435]],[[12092,12092],\"mapped\",[24515]],[[12093,12093],\"mapped\",[25096]],[[12094,12094],\"mapped\",[25142]],[[12095,12095],\"mapped\",[25163]],[[12096,12096],\"mapped\",[25903]],[[12097,12097],\"mapped\",[25908]],[[12098,12098],\"mapped\",[25991]],[[12099,12099],\"mapped\",[26007]],[[12100,12100],\"mapped\",[26020]],[[12101,12101],\"mapped\",[26041]],[[12102,12102],\"mapped\",[26080]],[[12103,12103],\"mapped\",[26085]],[[12104,12104],\"mapped\",[26352]],[[12105,12105],\"mapped\",[26376]],[[12106,12106],\"mapped\",[26408]],[[12107,12107],\"mapped\",[27424]],[[12108,12108],\"mapped\",[27490]],[[12109,12109],\"mapped\",[27513]],[[12110,12110],\"mapped\",[27571]],[[12111,12111],\"mapped\",[27595]],[[12112,12112],\"mapped\",[27604]],[[12113,12113],\"mapped\",[27611]],[[12114,12114],\"mapped\",[27663]],[[12115,12115],\"mapped\",[27668]],[[12116,12116],\"mapped\",[27700]],[[12117,12117],\"mapped\",[28779]],[[12118,12118],\"mapped\",[29226]],[[12119,12119],\"mapped\",[29238]],[[12120,12120],\"mapped\",[29243]],[[12121,12121],\"mapped\",[29247]],[[12122,12122],\"mapped\",[29255]],[[12123,12123],\"mapped\",[29273]],[[12124,12124],\"mapped\",[29275]],[[12125,12125],\"mapped\",[29356]],[[12126,12126],\"mapped\",[29572]],[[12127,12127],\"mapped\",[29577]],[[12128,12128],\"mapped\",[29916]],[[12129,12129],\"mapped\",[29926]],[[12130,12130],\"mapped\",[29976]],[[12131,12131],\"mapped\",[29983]],[[12132,12132],\"mapped\",[29992]],[[12133,12133],\"mapped\",[30000]],[[12134,12134],\"mapped\",[30091]],[[12135,12135],\"mapped\",[30098]],[[12136,12136],\"mapped\",[30326]],[[12137,12137],\"mapped\",[30333]],[[12138,12138],\"mapped\",[30382]],[[12139,12139],\"mapped\",[30399]],[[12140,12140],\"mapped\",[30446]],[[12141,12141],\"mapped\",[30683]],[[12142,12142],\"mapped\",[30690]],[[12143,12143],\"mapped\",[30707]],[[12144,12144],\"mapped\",[31034]],[[12145,12145],\"mapped\",[31160]],[[12146,12146],\"mapped\",[31166]],[[12147,12147],\"mapped\",[31348]],[[12148,12148],\"mapped\",[31435]],[[12149,12149],\"mapped\",[31481]],[[12150,12150],\"mapped\",[31859]],[[12151,12151],\"mapped\",[31992]],[[12152,12152],\"mapped\",[32566]],[[12153,12153],\"mapped\",[32593]],[[12154,12154],\"mapped\",[32650]],[[12155,12155],\"mapped\",[32701]],[[12156,12156],\"mapped\",[32769]],[[12157,12157],\"mapped\",[32780]],[[12158,12158],\"mapped\",[32786]],[[12159,12159],\"mapped\",[32819]],[[12160,12160],\"mapped\",[32895]],[[12161,12161],\"mapped\",[32905]],[[12162,12162],\"mapped\",[33251]],[[12163,12163],\"mapped\",[33258]],[[12164,12164],\"mapped\",[33267]],[[12165,12165],\"mapped\",[33276]],[[12166,12166],\"mapped\",[33292]],[[12167,12167],\"mapped\",[33307]],[[12168,12168],\"mapped\",[33311]],[[12169,12169],\"mapped\",[33390]],[[12170,12170],\"mapped\",[33394]],[[12171,12171],\"mapped\",[33400]],[[12172,12172],\"mapped\",[34381]],[[12173,12173],\"mapped\",[34411]],[[12174,12174],\"mapped\",[34880]],[[12175,12175],\"mapped\",[34892]],[[12176,12176],\"mapped\",[34915]],[[12177,12177],\"mapped\",[35198]],[[12178,12178],\"mapped\",[35211]],[[12179,12179],\"mapped\",[35282]],[[12180,12180],\"mapped\",[35328]],[[12181,12181],\"mapped\",[35895]],[[12182,12182],\"mapped\",[35910]],[[12183,12183],\"mapped\",[35925]],[[12184,12184],\"mapped\",[35960]],[[12185,12185],\"mapped\",[35997]],[[12186,12186],\"mapped\",[36196]],[[12187,12187],\"mapped\",[36208]],[[12188,12188],\"mapped\",[36275]],[[12189,12189],\"mapped\",[36523]],[[12190,12190],\"mapped\",[36554]],[[12191,12191],\"mapped\",[36763]],[[12192,12192],\"mapped\",[36784]],[[12193,12193],\"mapped\",[36789]],[[12194,12194],\"mapped\",[37009]],[[12195,12195],\"mapped\",[37193]],[[12196,12196],\"mapped\",[37318]],[[12197,12197],\"mapped\",[37324]],[[12198,12198],\"mapped\",[37329]],[[12199,12199],\"mapped\",[38263]],[[12200,12200],\"mapped\",[38272]],[[12201,12201],\"mapped\",[38428]],[[12202,12202],\"mapped\",[38582]],[[12203,12203],\"mapped\",[38585]],[[12204,12204],\"mapped\",[38632]],[[12205,12205],\"mapped\",[38737]],[[12206,12206],\"mapped\",[38750]],[[12207,12207],\"mapped\",[38754]],[[12208,12208],\"mapped\",[38761]],[[12209,12209],\"mapped\",[38859]],[[12210,12210],\"mapped\",[38893]],[[12211,12211],\"mapped\",[38899]],[[12212,12212],\"mapped\",[38913]],[[12213,12213],\"mapped\",[39080]],[[12214,12214],\"mapped\",[39131]],[[12215,12215],\"mapped\",[39135]],[[12216,12216],\"mapped\",[39318]],[[12217,12217],\"mapped\",[39321]],[[12218,12218],\"mapped\",[39340]],[[12219,12219],\"mapped\",[39592]],[[12220,12220],\"mapped\",[39640]],[[12221,12221],\"mapped\",[39647]],[[12222,12222],\"mapped\",[39717]],[[12223,12223],\"mapped\",[39727]],[[12224,12224],\"mapped\",[39730]],[[12225,12225],\"mapped\",[39740]],[[12226,12226],\"mapped\",[39770]],[[12227,12227],\"mapped\",[40165]],[[12228,12228],\"mapped\",[40565]],[[12229,12229],\"mapped\",[40575]],[[12230,12230],\"mapped\",[40613]],[[12231,12231],\"mapped\",[40635]],[[12232,12232],\"mapped\",[40643]],[[12233,12233],\"mapped\",[40653]],[[12234,12234],\"mapped\",[40657]],[[12235,12235],\"mapped\",[40697]],[[12236,12236],\"mapped\",[40701]],[[12237,12237],\"mapped\",[40718]],[[12238,12238],\"mapped\",[40723]],[[12239,12239],\"mapped\",[40736]],[[12240,12240],\"mapped\",[40763]],[[12241,12241],\"mapped\",[40778]],[[12242,12242],\"mapped\",[40786]],[[12243,12243],\"mapped\",[40845]],[[12244,12244],\"mapped\",[40860]],[[12245,12245],\"mapped\",[40864]],[[12246,12271],\"disallowed\"],[[12272,12283],\"disallowed\"],[[12284,12287],\"disallowed\"],[[12288,12288],\"disallowed_STD3_mapped\",[32]],[[12289,12289],\"valid\",[],\"NV8\"],[[12290,12290],\"mapped\",[46]],[[12291,12292],\"valid\",[],\"NV8\"],[[12293,12295],\"valid\"],[[12296,12329],\"valid\",[],\"NV8\"],[[12330,12333],\"valid\"],[[12334,12341],\"valid\",[],\"NV8\"],[[12342,12342],\"mapped\",[12306]],[[12343,12343],\"valid\",[],\"NV8\"],[[12344,12344],\"mapped\",[21313]],[[12345,12345],\"mapped\",[21316]],[[12346,12346],\"mapped\",[21317]],[[12347,12347],\"valid\",[],\"NV8\"],[[12348,12348],\"valid\"],[[12349,12349],\"valid\",[],\"NV8\"],[[12350,12350],\"valid\",[],\"NV8\"],[[12351,12351],\"valid\",[],\"NV8\"],[[12352,12352],\"disallowed\"],[[12353,12436],\"valid\"],[[12437,12438],\"valid\"],[[12439,12440],\"disallowed\"],[[12441,12442],\"valid\"],[[12443,12443],\"disallowed_STD3_mapped\",[32,12441]],[[12444,12444],\"disallowed_STD3_mapped\",[32,12442]],[[12445,12446],\"valid\"],[[12447,12447],\"mapped\",[12424,12426]],[[12448,12448],\"valid\",[],\"NV8\"],[[12449,12542],\"valid\"],[[12543,12543],\"mapped\",[12467,12488]],[[12544,12548],\"disallowed\"],[[12549,12588],\"valid\"],[[12589,12589],\"valid\"],[[12590,12592],\"disallowed\"],[[12593,12593],\"mapped\",[4352]],[[12594,12594],\"mapped\",[4353]],[[12595,12595],\"mapped\",[4522]],[[12596,12596],\"mapped\",[4354]],[[12597,12597],\"mapped\",[4524]],[[12598,12598],\"mapped\",[4525]],[[12599,12599],\"mapped\",[4355]],[[12600,12600],\"mapped\",[4356]],[[12601,12601],\"mapped\",[4357]],[[12602,12602],\"mapped\",[4528]],[[12603,12603],\"mapped\",[4529]],[[12604,12604],\"mapped\",[4530]],[[12605,12605],\"mapped\",[4531]],[[12606,12606],\"mapped\",[4532]],[[12607,12607],\"mapped\",[4533]],[[12608,12608],\"mapped\",[4378]],[[12609,12609],\"mapped\",[4358]],[[12610,12610],\"mapped\",[4359]],[[12611,12611],\"mapped\",[4360]],[[12612,12612],\"mapped\",[4385]],[[12613,12613],\"mapped\",[4361]],[[12614,12614],\"mapped\",[4362]],[[12615,12615],\"mapped\",[4363]],[[12616,12616],\"mapped\",[4364]],[[12617,12617],\"mapped\",[4365]],[[12618,12618],\"mapped\",[4366]],[[12619,12619],\"mapped\",[4367]],[[12620,12620],\"mapped\",[4368]],[[12621,12621],\"mapped\",[4369]],[[12622,12622],\"mapped\",[4370]],[[12623,12623],\"mapped\",[4449]],[[12624,12624],\"mapped\",[4450]],[[12625,12625],\"mapped\",[4451]],[[12626,12626],\"mapped\",[4452]],[[12627,12627],\"mapped\",[4453]],[[12628,12628],\"mapped\",[4454]],[[12629,12629],\"mapped\",[4455]],[[12630,12630],\"mapped\",[4456]],[[12631,12631],\"mapped\",[4457]],[[12632,12632],\"mapped\",[4458]],[[12633,12633],\"mapped\",[4459]],[[12634,12634],\"mapped\",[4460]],[[12635,12635],\"mapped\",[4461]],[[12636,12636],\"mapped\",[4462]],[[12637,12637],\"mapped\",[4463]],[[12638,12638],\"mapped\",[4464]],[[12639,12639],\"mapped\",[4465]],[[12640,12640],\"mapped\",[4466]],[[12641,12641],\"mapped\",[4467]],[[12642,12642],\"mapped\",[4468]],[[12643,12643],\"mapped\",[4469]],[[12644,12644],\"disallowed\"],[[12645,12645],\"mapped\",[4372]],[[12646,12646],\"mapped\",[4373]],[[12647,12647],\"mapped\",[4551]],[[12648,12648],\"mapped\",[4552]],[[12649,12649],\"mapped\",[4556]],[[12650,12650],\"mapped\",[4558]],[[12651,12651],\"mapped\",[4563]],[[12652,12652],\"mapped\",[4567]],[[12653,12653],\"mapped\",[4569]],[[12654,12654],\"mapped\",[4380]],[[12655,12655],\"mapped\",[4573]],[[12656,12656],\"mapped\",[4575]],[[12657,12657],\"mapped\",[4381]],[[12658,12658],\"mapped\",[4382]],[[12659,12659],\"mapped\",[4384]],[[12660,12660],\"mapped\",[4386]],[[12661,12661],\"mapped\",[4387]],[[12662,12662],\"mapped\",[4391]],[[12663,12663],\"mapped\",[4393]],[[12664,12664],\"mapped\",[4395]],[[12665,12665],\"mapped\",[4396]],[[12666,12666],\"mapped\",[4397]],[[12667,12667],\"mapped\",[4398]],[[12668,12668],\"mapped\",[4399]],[[12669,12669],\"mapped\",[4402]],[[12670,12670],\"mapped\",[4406]],[[12671,12671],\"mapped\",[4416]],[[12672,12672],\"mapped\",[4423]],[[12673,12673],\"mapped\",[4428]],[[12674,12674],\"mapped\",[4593]],[[12675,12675],\"mapped\",[4594]],[[12676,12676],\"mapped\",[4439]],[[12677,12677],\"mapped\",[4440]],[[12678,12678],\"mapped\",[4441]],[[12679,12679],\"mapped\",[4484]],[[12680,12680],\"mapped\",[4485]],[[12681,12681],\"mapped\",[4488]],[[12682,12682],\"mapped\",[4497]],[[12683,12683],\"mapped\",[4498]],[[12684,12684],\"mapped\",[4500]],[[12685,12685],\"mapped\",[4510]],[[12686,12686],\"mapped\",[4513]],[[12687,12687],\"disallowed\"],[[12688,12689],\"valid\",[],\"NV8\"],[[12690,12690],\"mapped\",[19968]],[[12691,12691],\"mapped\",[20108]],[[12692,12692],\"mapped\",[19977]],[[12693,12693],\"mapped\",[22235]],[[12694,12694],\"mapped\",[19978]],[[12695,12695],\"mapped\",[20013]],[[12696,12696],\"mapped\",[19979]],[[12697,12697],\"mapped\",[30002]],[[12698,12698],\"mapped\",[20057]],[[12699,12699],\"mapped\",[19993]],[[12700,12700],\"mapped\",[19969]],[[12701,12701],\"mapped\",[22825]],[[12702,12702],\"mapped\",[22320]],[[12703,12703],\"mapped\",[20154]],[[12704,12727],\"valid\"],[[12728,12730],\"valid\"],[[12731,12735],\"disallowed\"],[[12736,12751],\"valid\",[],\"NV8\"],[[12752,12771],\"valid\",[],\"NV8\"],[[12772,12783],\"disallowed\"],[[12784,12799],\"valid\"],[[12800,12800],\"disallowed_STD3_mapped\",[40,4352,41]],[[12801,12801],\"disallowed_STD3_mapped\",[40,4354,41]],[[12802,12802],\"disallowed_STD3_mapped\",[40,4355,41]],[[12803,12803],\"disallowed_STD3_mapped\",[40,4357,41]],[[12804,12804],\"disallowed_STD3_mapped\",[40,4358,41]],[[12805,12805],\"disallowed_STD3_mapped\",[40,4359,41]],[[12806,12806],\"disallowed_STD3_mapped\",[40,4361,41]],[[12807,12807],\"disallowed_STD3_mapped\",[40,4363,41]],[[12808,12808],\"disallowed_STD3_mapped\",[40,4364,41]],[[12809,12809],\"disallowed_STD3_mapped\",[40,4366,41]],[[12810,12810],\"disallowed_STD3_mapped\",[40,4367,41]],[[12811,12811],\"disallowed_STD3_mapped\",[40,4368,41]],[[12812,12812],\"disallowed_STD3_mapped\",[40,4369,41]],[[12813,12813],\"disallowed_STD3_mapped\",[40,4370,41]],[[12814,12814],\"disallowed_STD3_mapped\",[40,44032,41]],[[12815,12815],\"disallowed_STD3_mapped\",[40,45208,41]],[[12816,12816],\"disallowed_STD3_mapped\",[40,45796,41]],[[12817,12817],\"disallowed_STD3_mapped\",[40,46972,41]],[[12818,12818],\"disallowed_STD3_mapped\",[40,47560,41]],[[12819,12819],\"disallowed_STD3_mapped\",[40,48148,41]],[[12820,12820],\"disallowed_STD3_mapped\",[40,49324,41]],[[12821,12821],\"disallowed_STD3_mapped\",[40,50500,41]],[[12822,12822],\"disallowed_STD3_mapped\",[40,51088,41]],[[12823,12823],\"disallowed_STD3_mapped\",[40,52264,41]],[[12824,12824],\"disallowed_STD3_mapped\",[40,52852,41]],[[12825,12825],\"disallowed_STD3_mapped\",[40,53440,41]],[[12826,12826],\"disallowed_STD3_mapped\",[40,54028,41]],[[12827,12827],\"disallowed_STD3_mapped\",[40,54616,41]],[[12828,12828],\"disallowed_STD3_mapped\",[40,51452,41]],[[12829,12829],\"disallowed_STD3_mapped\",[40,50724,51204,41]],[[12830,12830],\"disallowed_STD3_mapped\",[40,50724,54980,41]],[[12831,12831],\"disallowed\"],[[12832,12832],\"disallowed_STD3_mapped\",[40,19968,41]],[[12833,12833],\"disallowed_STD3_mapped\",[40,20108,41]],[[12834,12834],\"disallowed_STD3_mapped\",[40,19977,41]],[[12835,12835],\"disallowed_STD3_mapped\",[40,22235,41]],[[12836,12836],\"disallowed_STD3_mapped\",[40,20116,41]],[[12837,12837],\"disallowed_STD3_mapped\",[40,20845,41]],[[12838,12838],\"disallowed_STD3_mapped\",[40,19971,41]],[[12839,12839],\"disallowed_STD3_mapped\",[40,20843,41]],[[12840,12840],\"disallowed_STD3_mapped\",[40,20061,41]],[[12841,12841],\"disallowed_STD3_mapped\",[40,21313,41]],[[12842,12842],\"disallowed_STD3_mapped\",[40,26376,41]],[[12843,12843],\"disallowed_STD3_mapped\",[40,28779,41]],[[12844,12844],\"disallowed_STD3_mapped\",[40,27700,41]],[[12845,12845],\"disallowed_STD3_mapped\",[40,26408,41]],[[12846,12846],\"disallowed_STD3_mapped\",[40,37329,41]],[[12847,12847],\"disallowed_STD3_mapped\",[40,22303,41]],[[12848,12848],\"disallowed_STD3_mapped\",[40,26085,41]],[[12849,12849],\"disallowed_STD3_mapped\",[40,26666,41]],[[12850,12850],\"disallowed_STD3_mapped\",[40,26377,41]],[[12851,12851],\"disallowed_STD3_mapped\",[40,31038,41]],[[12852,12852],\"disallowed_STD3_mapped\",[40,21517,41]],[[12853,12853],\"disallowed_STD3_mapped\",[40,29305,41]],[[12854,12854],\"disallowed_STD3_mapped\",[40,36001,41]],[[12855,12855],\"disallowed_STD3_mapped\",[40,31069,41]],[[12856,12856],\"disallowed_STD3_mapped\",[40,21172,41]],[[12857,12857],\"disallowed_STD3_mapped\",[40,20195,41]],[[12858,12858],\"disallowed_STD3_mapped\",[40,21628,41]],[[12859,12859],\"disallowed_STD3_mapped\",[40,23398,41]],[[12860,12860],\"disallowed_STD3_mapped\",[40,30435,41]],[[12861,12861],\"disallowed_STD3_mapped\",[40,20225,41]],[[12862,12862],\"disallowed_STD3_mapped\",[40,36039,41]],[[12863,12863],\"disallowed_STD3_mapped\",[40,21332,41]],[[12864,12864],\"disallowed_STD3_mapped\",[40,31085,41]],[[12865,12865],\"disallowed_STD3_mapped\",[40,20241,41]],[[12866,12866],\"disallowed_STD3_mapped\",[40,33258,41]],[[12867,12867],\"disallowed_STD3_mapped\",[40,33267,41]],[[12868,12868],\"mapped\",[21839]],[[12869,12869],\"mapped\",[24188]],[[12870,12870],\"mapped\",[25991]],[[12871,12871],\"mapped\",[31631]],[[12872,12879],\"valid\",[],\"NV8\"],[[12880,12880],\"mapped\",[112,116,101]],[[12881,12881],\"mapped\",[50,49]],[[12882,12882],\"mapped\",[50,50]],[[12883,12883],\"mapped\",[50,51]],[[12884,12884],\"mapped\",[50,52]],[[12885,12885],\"mapped\",[50,53]],[[12886,12886],\"mapped\",[50,54]],[[12887,12887],\"mapped\",[50,55]],[[12888,12888],\"mapped\",[50,56]],[[12889,12889],\"mapped\",[50,57]],[[12890,12890],\"mapped\",[51,48]],[[12891,12891],\"mapped\",[51,49]],[[12892,12892],\"mapped\",[51,50]],[[12893,12893],\"mapped\",[51,51]],[[12894,12894],\"mapped\",[51,52]],[[12895,12895],\"mapped\",[51,53]],[[12896,12896],\"mapped\",[4352]],[[12897,12897],\"mapped\",[4354]],[[12898,12898],\"mapped\",[4355]],[[12899,12899],\"mapped\",[4357]],[[12900,12900],\"mapped\",[4358]],[[12901,12901],\"mapped\",[4359]],[[12902,12902],\"mapped\",[4361]],[[12903,12903],\"mapped\",[4363]],[[12904,12904],\"mapped\",[4364]],[[12905,12905],\"mapped\",[4366]],[[12906,12906],\"mapped\",[4367]],[[12907,12907],\"mapped\",[4368]],[[12908,12908],\"mapped\",[4369]],[[12909,12909],\"mapped\",[4370]],[[12910,12910],\"mapped\",[44032]],[[12911,12911],\"mapped\",[45208]],[[12912,12912],\"mapped\",[45796]],[[12913,12913],\"mapped\",[46972]],[[12914,12914],\"mapped\",[47560]],[[12915,12915],\"mapped\",[48148]],[[12916,12916],\"mapped\",[49324]],[[12917,12917],\"mapped\",[50500]],[[12918,12918],\"mapped\",[51088]],[[12919,12919],\"mapped\",[52264]],[[12920,12920],\"mapped\",[52852]],[[12921,12921],\"mapped\",[53440]],[[12922,12922],\"mapped\",[54028]],[[12923,12923],\"mapped\",[54616]],[[12924,12924],\"mapped\",[52280,44256]],[[12925,12925],\"mapped\",[51452,51032]],[[12926,12926],\"mapped\",[50864]],[[12927,12927],\"valid\",[],\"NV8\"],[[12928,12928],\"mapped\",[19968]],[[12929,12929],\"mapped\",[20108]],[[12930,12930],\"mapped\",[19977]],[[12931,12931],\"mapped\",[22235]],[[12932,12932],\"mapped\",[20116]],[[12933,12933],\"mapped\",[20845]],[[12934,12934],\"mapped\",[19971]],[[12935,12935],\"mapped\",[20843]],[[12936,12936],\"mapped\",[20061]],[[12937,12937],\"mapped\",[21313]],[[12938,12938],\"mapped\",[26376]],[[12939,12939],\"mapped\",[28779]],[[12940,12940],\"mapped\",[27700]],[[12941,12941],\"mapped\",[26408]],[[12942,12942],\"mapped\",[37329]],[[12943,12943],\"mapped\",[22303]],[[12944,12944],\"mapped\",[26085]],[[12945,12945],\"mapped\",[26666]],[[12946,12946],\"mapped\",[26377]],[[12947,12947],\"mapped\",[31038]],[[12948,12948],\"mapped\",[21517]],[[12949,12949],\"mapped\",[29305]],[[12950,12950],\"mapped\",[36001]],[[12951,12951],\"mapped\",[31069]],[[12952,12952],\"mapped\",[21172]],[[12953,12953],\"mapped\",[31192]],[[12954,12954],\"mapped\",[30007]],[[12955,12955],\"mapped\",[22899]],[[12956,12956],\"mapped\",[36969]],[[12957,12957],\"mapped\",[20778]],[[12958,12958],\"mapped\",[21360]],[[12959,12959],\"mapped\",[27880]],[[12960,12960],\"mapped\",[38917]],[[12961,12961],\"mapped\",[20241]],[[12962,12962],\"mapped\",[20889]],[[12963,12963],\"mapped\",[27491]],[[12964,12964],\"mapped\",[19978]],[[12965,12965],\"mapped\",[20013]],[[12966,12966],\"mapped\",[19979]],[[12967,12967],\"mapped\",[24038]],[[12968,12968],\"mapped\",[21491]],[[12969,12969],\"mapped\",[21307]],[[12970,12970],\"mapped\",[23447]],[[12971,12971],\"mapped\",[23398]],[[12972,12972],\"mapped\",[30435]],[[12973,12973],\"mapped\",[20225]],[[12974,12974],\"mapped\",[36039]],[[12975,12975],\"mapped\",[21332]],[[12976,12976],\"mapped\",[22812]],[[12977,12977],\"mapped\",[51,54]],[[12978,12978],\"mapped\",[51,55]],[[12979,12979],\"mapped\",[51,56]],[[12980,12980],\"mapped\",[51,57]],[[12981,12981],\"mapped\",[52,48]],[[12982,12982],\"mapped\",[52,49]],[[12983,12983],\"mapped\",[52,50]],[[12984,12984],\"mapped\",[52,51]],[[12985,12985],\"mapped\",[52,52]],[[12986,12986],\"mapped\",[52,53]],[[12987,12987],\"mapped\",[52,54]],[[12988,12988],\"mapped\",[52,55]],[[12989,12989],\"mapped\",[52,56]],[[12990,12990],\"mapped\",[52,57]],[[12991,12991],\"mapped\",[53,48]],[[12992,12992],\"mapped\",[49,26376]],[[12993,12993],\"mapped\",[50,26376]],[[12994,12994],\"mapped\",[51,26376]],[[12995,12995],\"mapped\",[52,26376]],[[12996,12996],\"mapped\",[53,26376]],[[12997,12997],\"mapped\",[54,26376]],[[12998,12998],\"mapped\",[55,26376]],[[12999,12999],\"mapped\",[56,26376]],[[13000,13000],\"mapped\",[57,26376]],[[13001,13001],\"mapped\",[49,48,26376]],[[13002,13002],\"mapped\",[49,49,26376]],[[13003,13003],\"mapped\",[49,50,26376]],[[13004,13004],\"mapped\",[104,103]],[[13005,13005],\"mapped\",[101,114,103]],[[13006,13006],\"mapped\",[101,118]],[[13007,13007],\"mapped\",[108,116,100]],[[13008,13008],\"mapped\",[12450]],[[13009,13009],\"mapped\",[12452]],[[13010,13010],\"mapped\",[12454]],[[13011,13011],\"mapped\",[12456]],[[13012,13012],\"mapped\",[12458]],[[13013,13013],\"mapped\",[12459]],[[13014,13014],\"mapped\",[12461]],[[13015,13015],\"mapped\",[12463]],[[13016,13016],\"mapped\",[12465]],[[13017,13017],\"mapped\",[12467]],[[13018,13018],\"mapped\",[12469]],[[13019,13019],\"mapped\",[12471]],[[13020,13020],\"mapped\",[12473]],[[13021,13021],\"mapped\",[12475]],[[13022,13022],\"mapped\",[12477]],[[13023,13023],\"mapped\",[12479]],[[13024,13024],\"mapped\",[12481]],[[13025,13025],\"mapped\",[12484]],[[13026,13026],\"mapped\",[12486]],[[13027,13027],\"mapped\",[12488]],[[13028,13028],\"mapped\",[12490]],[[13029,13029],\"mapped\",[12491]],[[13030,13030],\"mapped\",[12492]],[[13031,13031],\"mapped\",[12493]],[[13032,13032],\"mapped\",[12494]],[[13033,13033],\"mapped\",[12495]],[[13034,13034],\"mapped\",[12498]],[[13035,13035],\"mapped\",[12501]],[[13036,13036],\"mapped\",[12504]],[[13037,13037],\"mapped\",[12507]],[[13038,13038],\"mapped\",[12510]],[[13039,13039],\"mapped\",[12511]],[[13040,13040],\"mapped\",[12512]],[[13041,13041],\"mapped\",[12513]],[[13042,13042],\"mapped\",[12514]],[[13043,13043],\"mapped\",[12516]],[[13044,13044],\"mapped\",[12518]],[[13045,13045],\"mapped\",[12520]],[[13046,13046],\"mapped\",[12521]],[[13047,13047],\"mapped\",[12522]],[[13048,13048],\"mapped\",[12523]],[[13049,13049],\"mapped\",[12524]],[[13050,13050],\"mapped\",[12525]],[[13051,13051],\"mapped\",[12527]],[[13052,13052],\"mapped\",[12528]],[[13053,13053],\"mapped\",[12529]],[[13054,13054],\"mapped\",[12530]],[[13055,13055],\"disallowed\"],[[13056,13056],\"mapped\",[12450,12497,12540,12488]],[[13057,13057],\"mapped\",[12450,12523,12501,12449]],[[13058,13058],\"mapped\",[12450,12531,12506,12450]],[[13059,13059],\"mapped\",[12450,12540,12523]],[[13060,13060],\"mapped\",[12452,12491,12531,12464]],[[13061,13061],\"mapped\",[12452,12531,12481]],[[13062,13062],\"mapped\",[12454,12457,12531]],[[13063,13063],\"mapped\",[12456,12473,12463,12540,12489]],[[13064,13064],\"mapped\",[12456,12540,12459,12540]],[[13065,13065],\"mapped\",[12458,12531,12473]],[[13066,13066],\"mapped\",[12458,12540,12512]],[[13067,13067],\"mapped\",[12459,12452,12522]],[[13068,13068],\"mapped\",[12459,12521,12483,12488]],[[13069,13069],\"mapped\",[12459,12525,12522,12540]],[[13070,13070],\"mapped\",[12460,12525,12531]],[[13071,13071],\"mapped\",[12460,12531,12510]],[[13072,13072],\"mapped\",[12462,12460]],[[13073,13073],\"mapped\",[12462,12491,12540]],[[13074,13074],\"mapped\",[12461,12517,12522,12540]],[[13075,13075],\"mapped\",[12462,12523,12480,12540]],[[13076,13076],\"mapped\",[12461,12525]],[[13077,13077],\"mapped\",[12461,12525,12464,12521,12512]],[[13078,13078],\"mapped\",[12461,12525,12513,12540,12488,12523]],[[13079,13079],\"mapped\",[12461,12525,12527,12483,12488]],[[13080,13080],\"mapped\",[12464,12521,12512]],[[13081,13081],\"mapped\",[12464,12521,12512,12488,12531]],[[13082,13082],\"mapped\",[12463,12523,12476,12452,12525]],[[13083,13083],\"mapped\",[12463,12525,12540,12493]],[[13084,13084],\"mapped\",[12465,12540,12473]],[[13085,13085],\"mapped\",[12467,12523,12490]],[[13086,13086],\"mapped\",[12467,12540,12509]],[[13087,13087],\"mapped\",[12469,12452,12463,12523]],[[13088,13088],\"mapped\",[12469,12531,12481,12540,12512]],[[13089,13089],\"mapped\",[12471,12522,12531,12464]],[[13090,13090],\"mapped\",[12475,12531,12481]],[[13091,13091],\"mapped\",[12475,12531,12488]],[[13092,13092],\"mapped\",[12480,12540,12473]],[[13093,13093],\"mapped\",[12487,12471]],[[13094,13094],\"mapped\",[12489,12523]],[[13095,13095],\"mapped\",[12488,12531]],[[13096,13096],\"mapped\",[12490,12494]],[[13097,13097],\"mapped\",[12494,12483,12488]],[[13098,13098],\"mapped\",[12495,12452,12484]],[[13099,13099],\"mapped\",[12497,12540,12475,12531,12488]],[[13100,13100],\"mapped\",[12497,12540,12484]],[[13101,13101],\"mapped\",[12496,12540,12524,12523]],[[13102,13102],\"mapped\",[12500,12450,12473,12488,12523]],[[13103,13103],\"mapped\",[12500,12463,12523]],[[13104,13104],\"mapped\",[12500,12467]],[[13105,13105],\"mapped\",[12499,12523]],[[13106,13106],\"mapped\",[12501,12449,12521,12483,12489]],[[13107,13107],\"mapped\",[12501,12451,12540,12488]],[[13108,13108],\"mapped\",[12502,12483,12471,12455,12523]],[[13109,13109],\"mapped\",[12501,12521,12531]],[[13110,13110],\"mapped\",[12504,12463,12479,12540,12523]],[[13111,13111],\"mapped\",[12506,12477]],[[13112,13112],\"mapped\",[12506,12491,12498]],[[13113,13113],\"mapped\",[12504,12523,12484]],[[13114,13114],\"mapped\",[12506,12531,12473]],[[13115,13115],\"mapped\",[12506,12540,12472]],[[13116,13116],\"mapped\",[12505,12540,12479]],[[13117,13117],\"mapped\",[12509,12452,12531,12488]],[[13118,13118],\"mapped\",[12508,12523,12488]],[[13119,13119],\"mapped\",[12507,12531]],[[13120,13120],\"mapped\",[12509,12531,12489]],[[13121,13121],\"mapped\",[12507,12540,12523]],[[13122,13122],\"mapped\",[12507,12540,12531]],[[13123,13123],\"mapped\",[12510,12452,12463,12525]],[[13124,13124],\"mapped\",[12510,12452,12523]],[[13125,13125],\"mapped\",[12510,12483,12495]],[[13126,13126],\"mapped\",[12510,12523,12463]],[[13127,13127],\"mapped\",[12510,12531,12471,12519,12531]],[[13128,13128],\"mapped\",[12511,12463,12525,12531]],[[13129,13129],\"mapped\",[12511,12522]],[[13130,13130],\"mapped\",[12511,12522,12496,12540,12523]],[[13131,13131],\"mapped\",[12513,12460]],[[13132,13132],\"mapped\",[12513,12460,12488,12531]],[[13133,13133],\"mapped\",[12513,12540,12488,12523]],[[13134,13134],\"mapped\",[12516,12540,12489]],[[13135,13135],\"mapped\",[12516,12540,12523]],[[13136,13136],\"mapped\",[12518,12450,12531]],[[13137,13137],\"mapped\",[12522,12483,12488,12523]],[[13138,13138],\"mapped\",[12522,12521]],[[13139,13139],\"mapped\",[12523,12500,12540]],[[13140,13140],\"mapped\",[12523,12540,12502,12523]],[[13141,13141],\"mapped\",[12524,12512]],[[13142,13142],\"mapped\",[12524,12531,12488,12466,12531]],[[13143,13143],\"mapped\",[12527,12483,12488]],[[13144,13144],\"mapped\",[48,28857]],[[13145,13145],\"mapped\",[49,28857]],[[13146,13146],\"mapped\",[50,28857]],[[13147,13147],\"mapped\",[51,28857]],[[13148,13148],\"mapped\",[52,28857]],[[13149,13149],\"mapped\",[53,28857]],[[13150,13150],\"mapped\",[54,28857]],[[13151,13151],\"mapped\",[55,28857]],[[13152,13152],\"mapped\",[56,28857]],[[13153,13153],\"mapped\",[57,28857]],[[13154,13154],\"mapped\",[49,48,28857]],[[13155,13155],\"mapped\",[49,49,28857]],[[13156,13156],\"mapped\",[49,50,28857]],[[13157,13157],\"mapped\",[49,51,28857]],[[13158,13158],\"mapped\",[49,52,28857]],[[13159,13159],\"mapped\",[49,53,28857]],[[13160,13160],\"mapped\",[49,54,28857]],[[13161,13161],\"mapped\",[49,55,28857]],[[13162,13162],\"mapped\",[49,56,28857]],[[13163,13163],\"mapped\",[49,57,28857]],[[13164,13164],\"mapped\",[50,48,28857]],[[13165,13165],\"mapped\",[50,49,28857]],[[13166,13166],\"mapped\",[50,50,28857]],[[13167,13167],\"mapped\",[50,51,28857]],[[13168,13168],\"mapped\",[50,52,28857]],[[13169,13169],\"mapped\",[104,112,97]],[[13170,13170],\"mapped\",[100,97]],[[13171,13171],\"mapped\",[97,117]],[[13172,13172],\"mapped\",[98,97,114]],[[13173,13173],\"mapped\",[111,118]],[[13174,13174],\"mapped\",[112,99]],[[13175,13175],\"mapped\",[100,109]],[[13176,13176],\"mapped\",[100,109,50]],[[13177,13177],\"mapped\",[100,109,51]],[[13178,13178],\"mapped\",[105,117]],[[13179,13179],\"mapped\",[24179,25104]],[[13180,13180],\"mapped\",[26157,21644]],[[13181,13181],\"mapped\",[22823,27491]],[[13182,13182],\"mapped\",[26126,27835]],[[13183,13183],\"mapped\",[26666,24335,20250,31038]],[[13184,13184],\"mapped\",[112,97]],[[13185,13185],\"mapped\",[110,97]],[[13186,13186],\"mapped\",[956,97]],[[13187,13187],\"mapped\",[109,97]],[[13188,13188],\"mapped\",[107,97]],[[13189,13189],\"mapped\",[107,98]],[[13190,13190],\"mapped\",[109,98]],[[13191,13191],\"mapped\",[103,98]],[[13192,13192],\"mapped\",[99,97,108]],[[13193,13193],\"mapped\",[107,99,97,108]],[[13194,13194],\"mapped\",[112,102]],[[13195,13195],\"mapped\",[110,102]],[[13196,13196],\"mapped\",[956,102]],[[13197,13197],\"mapped\",[956,103]],[[13198,13198],\"mapped\",[109,103]],[[13199,13199],\"mapped\",[107,103]],[[13200,13200],\"mapped\",[104,122]],[[13201,13201],\"mapped\",[107,104,122]],[[13202,13202],\"mapped\",[109,104,122]],[[13203,13203],\"mapped\",[103,104,122]],[[13204,13204],\"mapped\",[116,104,122]],[[13205,13205],\"mapped\",[956,108]],[[13206,13206],\"mapped\",[109,108]],[[13207,13207],\"mapped\",[100,108]],[[13208,13208],\"mapped\",[107,108]],[[13209,13209],\"mapped\",[102,109]],[[13210,13210],\"mapped\",[110,109]],[[13211,13211],\"mapped\",[956,109]],[[13212,13212],\"mapped\",[109,109]],[[13213,13213],\"mapped\",[99,109]],[[13214,13214],\"mapped\",[107,109]],[[13215,13215],\"mapped\",[109,109,50]],[[13216,13216],\"mapped\",[99,109,50]],[[13217,13217],\"mapped\",[109,50]],[[13218,13218],\"mapped\",[107,109,50]],[[13219,13219],\"mapped\",[109,109,51]],[[13220,13220],\"mapped\",[99,109,51]],[[13221,13221],\"mapped\",[109,51]],[[13222,13222],\"mapped\",[107,109,51]],[[13223,13223],\"mapped\",[109,8725,115]],[[13224,13224],\"mapped\",[109,8725,115,50]],[[13225,13225],\"mapped\",[112,97]],[[13226,13226],\"mapped\",[107,112,97]],[[13227,13227],\"mapped\",[109,112,97]],[[13228,13228],\"mapped\",[103,112,97]],[[13229,13229],\"mapped\",[114,97,100]],[[13230,13230],\"mapped\",[114,97,100,8725,115]],[[13231,13231],\"mapped\",[114,97,100,8725,115,50]],[[13232,13232],\"mapped\",[112,115]],[[13233,13233],\"mapped\",[110,115]],[[13234,13234],\"mapped\",[956,115]],[[13235,13235],\"mapped\",[109,115]],[[13236,13236],\"mapped\",[112,118]],[[13237,13237],\"mapped\",[110,118]],[[13238,13238],\"mapped\",[956,118]],[[13239,13239],\"mapped\",[109,118]],[[13240,13240],\"mapped\",[107,118]],[[13241,13241],\"mapped\",[109,118]],[[13242,13242],\"mapped\",[112,119]],[[13243,13243],\"mapped\",[110,119]],[[13244,13244],\"mapped\",[956,119]],[[13245,13245],\"mapped\",[109,119]],[[13246,13246],\"mapped\",[107,119]],[[13247,13247],\"mapped\",[109,119]],[[13248,13248],\"mapped\",[107,969]],[[13249,13249],\"mapped\",[109,969]],[[13250,13250],\"disallowed\"],[[13251,13251],\"mapped\",[98,113]],[[13252,13252],\"mapped\",[99,99]],[[13253,13253],\"mapped\",[99,100]],[[13254,13254],\"mapped\",[99,8725,107,103]],[[13255,13255],\"disallowed\"],[[13256,13256],\"mapped\",[100,98]],[[13257,13257],\"mapped\",[103,121]],[[13258,13258],\"mapped\",[104,97]],[[13259,13259],\"mapped\",[104,112]],[[13260,13260],\"mapped\",[105,110]],[[13261,13261],\"mapped\",[107,107]],[[13262,13262],\"mapped\",[107,109]],[[13263,13263],\"mapped\",[107,116]],[[13264,13264],\"mapped\",[108,109]],[[13265,13265],\"mapped\",[108,110]],[[13266,13266],\"mapped\",[108,111,103]],[[13267,13267],\"mapped\",[108,120]],[[13268,13268],\"mapped\",[109,98]],[[13269,13269],\"mapped\",[109,105,108]],[[13270,13270],\"mapped\",[109,111,108]],[[13271,13271],\"mapped\",[112,104]],[[13272,13272],\"disallowed\"],[[13273,13273],\"mapped\",[112,112,109]],[[13274,13274],\"mapped\",[112,114]],[[13275,13275],\"mapped\",[115,114]],[[13276,13276],\"mapped\",[115,118]],[[13277,13277],\"mapped\",[119,98]],[[13278,13278],\"mapped\",[118,8725,109]],[[13279,13279],\"mapped\",[97,8725,109]],[[13280,13280],\"mapped\",[49,26085]],[[13281,13281],\"mapped\",[50,26085]],[[13282,13282],\"mapped\",[51,26085]],[[13283,13283],\"mapped\",[52,26085]],[[13284,13284],\"mapped\",[53,26085]],[[13285,13285],\"mapped\",[54,26085]],[[13286,13286],\"mapped\",[55,26085]],[[13287,13287],\"mapped\",[56,26085]],[[13288,13288],\"mapped\",[57,26085]],[[13289,13289],\"mapped\",[49,48,26085]],[[13290,13290],\"mapped\",[49,49,26085]],[[13291,13291],\"mapped\",[49,50,26085]],[[13292,13292],\"mapped\",[49,51,26085]],[[13293,13293],\"mapped\",[49,52,26085]],[[13294,13294],\"mapped\",[49,53,26085]],[[13295,13295],\"mapped\",[49,54,26085]],[[13296,13296],\"mapped\",[49,55,26085]],[[13297,13297],\"mapped\",[49,56,26085]],[[13298,13298],\"mapped\",[49,57,26085]],[[13299,13299],\"mapped\",[50,48,26085]],[[13300,13300],\"mapped\",[50,49,26085]],[[13301,13301],\"mapped\",[50,50,26085]],[[13302,13302],\"mapped\",[50,51,26085]],[[13303,13303],\"mapped\",[50,52,26085]],[[13304,13304],\"mapped\",[50,53,26085]],[[13305,13305],\"mapped\",[50,54,26085]],[[13306,13306],\"mapped\",[50,55,26085]],[[13307,13307],\"mapped\",[50,56,26085]],[[13308,13308],\"mapped\",[50,57,26085]],[[13309,13309],\"mapped\",[51,48,26085]],[[13310,13310],\"mapped\",[51,49,26085]],[[13311,13311],\"mapped\",[103,97,108]],[[13312,19893],\"valid\"],[[19894,19903],\"disallowed\"],[[19904,19967],\"valid\",[],\"NV8\"],[[19968,40869],\"valid\"],[[40870,40891],\"valid\"],[[40892,40899],\"valid\"],[[40900,40907],\"valid\"],[[40908,40908],\"valid\"],[[40909,40917],\"valid\"],[[40918,40959],\"disallowed\"],[[40960,42124],\"valid\"],[[42125,42127],\"disallowed\"],[[42128,42145],\"valid\",[],\"NV8\"],[[42146,42147],\"valid\",[],\"NV8\"],[[42148,42163],\"valid\",[],\"NV8\"],[[42164,42164],\"valid\",[],\"NV8\"],[[42165,42176],\"valid\",[],\"NV8\"],[[42177,42177],\"valid\",[],\"NV8\"],[[42178,42180],\"valid\",[],\"NV8\"],[[42181,42181],\"valid\",[],\"NV8\"],[[42182,42182],\"valid\",[],\"NV8\"],[[42183,42191],\"disallowed\"],[[42192,42237],\"valid\"],[[42238,42239],\"valid\",[],\"NV8\"],[[42240,42508],\"valid\"],[[42509,42511],\"valid\",[],\"NV8\"],[[42512,42539],\"valid\"],[[42540,42559],\"disallowed\"],[[42560,42560],\"mapped\",[42561]],[[42561,42561],\"valid\"],[[42562,42562],\"mapped\",[42563]],[[42563,42563],\"valid\"],[[42564,42564],\"mapped\",[42565]],[[42565,42565],\"valid\"],[[42566,42566],\"mapped\",[42567]],[[42567,42567],\"valid\"],[[42568,42568],\"mapped\",[42569]],[[42569,42569],\"valid\"],[[42570,42570],\"mapped\",[42571]],[[42571,42571],\"valid\"],[[42572,42572],\"mapped\",[42573]],[[42573,42573],\"valid\"],[[42574,42574],\"mapped\",[42575]],[[42575,42575],\"valid\"],[[42576,42576],\"mapped\",[42577]],[[42577,42577],\"valid\"],[[42578,42578],\"mapped\",[42579]],[[42579,42579],\"valid\"],[[42580,42580],\"mapped\",[42581]],[[42581,42581],\"valid\"],[[42582,42582],\"mapped\",[42583]],[[42583,42583],\"valid\"],[[42584,42584],\"mapped\",[42585]],[[42585,42585],\"valid\"],[[42586,42586],\"mapped\",[42587]],[[42587,42587],\"valid\"],[[42588,42588],\"mapped\",[42589]],[[42589,42589],\"valid\"],[[42590,42590],\"mapped\",[42591]],[[42591,42591],\"valid\"],[[42592,42592],\"mapped\",[42593]],[[42593,42593],\"valid\"],[[42594,42594],\"mapped\",[42595]],[[42595,42595],\"valid\"],[[42596,42596],\"mapped\",[42597]],[[42597,42597],\"valid\"],[[42598,42598],\"mapped\",[42599]],[[42599,42599],\"valid\"],[[42600,42600],\"mapped\",[42601]],[[42601,42601],\"valid\"],[[42602,42602],\"mapped\",[42603]],[[42603,42603],\"valid\"],[[42604,42604],\"mapped\",[42605]],[[42605,42607],\"valid\"],[[42608,42611],\"valid\",[],\"NV8\"],[[42612,42619],\"valid\"],[[42620,42621],\"valid\"],[[42622,42622],\"valid\",[],\"NV8\"],[[42623,42623],\"valid\"],[[42624,42624],\"mapped\",[42625]],[[42625,42625],\"valid\"],[[42626,42626],\"mapped\",[42627]],[[42627,42627],\"valid\"],[[42628,42628],\"mapped\",[42629]],[[42629,42629],\"valid\"],[[42630,42630],\"mapped\",[42631]],[[42631,42631],\"valid\"],[[42632,42632],\"mapped\",[42633]],[[42633,42633],\"valid\"],[[42634,42634],\"mapped\",[42635]],[[42635,42635],\"valid\"],[[42636,42636],\"mapped\",[42637]],[[42637,42637],\"valid\"],[[42638,42638],\"mapped\",[42639]],[[42639,42639],\"valid\"],[[42640,42640],\"mapped\",[42641]],[[42641,42641],\"valid\"],[[42642,42642],\"mapped\",[42643]],[[42643,42643],\"valid\"],[[42644,42644],\"mapped\",[42645]],[[42645,42645],\"valid\"],[[42646,42646],\"mapped\",[42647]],[[42647,42647],\"valid\"],[[42648,42648],\"mapped\",[42649]],[[42649,42649],\"valid\"],[[42650,42650],\"mapped\",[42651]],[[42651,42651],\"valid\"],[[42652,42652],\"mapped\",[1098]],[[42653,42653],\"mapped\",[1100]],[[42654,42654],\"valid\"],[[42655,42655],\"valid\"],[[42656,42725],\"valid\"],[[42726,42735],\"valid\",[],\"NV8\"],[[42736,42737],\"valid\"],[[42738,42743],\"valid\",[],\"NV8\"],[[42744,42751],\"disallowed\"],[[42752,42774],\"valid\",[],\"NV8\"],[[42775,42778],\"valid\"],[[42779,42783],\"valid\"],[[42784,42785],\"valid\",[],\"NV8\"],[[42786,42786],\"mapped\",[42787]],[[42787,42787],\"valid\"],[[42788,42788],\"mapped\",[42789]],[[42789,42789],\"valid\"],[[42790,42790],\"mapped\",[42791]],[[42791,42791],\"valid\"],[[42792,42792],\"mapped\",[42793]],[[42793,42793],\"valid\"],[[42794,42794],\"mapped\",[42795]],[[42795,42795],\"valid\"],[[42796,42796],\"mapped\",[42797]],[[42797,42797],\"valid\"],[[42798,42798],\"mapped\",[42799]],[[42799,42801],\"valid\"],[[42802,42802],\"mapped\",[42803]],[[42803,42803],\"valid\"],[[42804,42804],\"mapped\",[42805]],[[42805,42805],\"valid\"],[[42806,42806],\"mapped\",[42807]],[[42807,42807],\"valid\"],[[42808,42808],\"mapped\",[42809]],[[42809,42809],\"valid\"],[[42810,42810],\"mapped\",[42811]],[[42811,42811],\"valid\"],[[42812,42812],\"mapped\",[42813]],[[42813,42813],\"valid\"],[[42814,42814],\"mapped\",[42815]],[[42815,42815],\"valid\"],[[42816,42816],\"mapped\",[42817]],[[42817,42817],\"valid\"],[[42818,42818],\"mapped\",[42819]],[[42819,42819],\"valid\"],[[42820,42820],\"mapped\",[42821]],[[42821,42821],\"valid\"],[[42822,42822],\"mapped\",[42823]],[[42823,42823],\"valid\"],[[42824,42824],\"mapped\",[42825]],[[42825,42825],\"valid\"],[[42826,42826],\"mapped\",[42827]],[[42827,42827],\"valid\"],[[42828,42828],\"mapped\",[42829]],[[42829,42829],\"valid\"],[[42830,42830],\"mapped\",[42831]],[[42831,42831],\"valid\"],[[42832,42832],\"mapped\",[42833]],[[42833,42833],\"valid\"],[[42834,42834],\"mapped\",[42835]],[[42835,42835],\"valid\"],[[42836,42836],\"mapped\",[42837]],[[42837,42837],\"valid\"],[[42838,42838],\"mapped\",[42839]],[[42839,42839],\"valid\"],[[42840,42840],\"mapped\",[42841]],[[42841,42841],\"valid\"],[[42842,42842],\"mapped\",[42843]],[[42843,42843],\"valid\"],[[42844,42844],\"mapped\",[42845]],[[42845,42845],\"valid\"],[[42846,42846],\"mapped\",[42847]],[[42847,42847],\"valid\"],[[42848,42848],\"mapped\",[42849]],[[42849,42849],\"valid\"],[[42850,42850],\"mapped\",[42851]],[[42851,42851],\"valid\"],[[42852,42852],\"mapped\",[42853]],[[42853,42853],\"valid\"],[[42854,42854],\"mapped\",[42855]],[[42855,42855],\"valid\"],[[42856,42856],\"mapped\",[42857]],[[42857,42857],\"valid\"],[[42858,42858],\"mapped\",[42859]],[[42859,42859],\"valid\"],[[42860,42860],\"mapped\",[42861]],[[42861,42861],\"valid\"],[[42862,42862],\"mapped\",[42863]],[[42863,42863],\"valid\"],[[42864,42864],\"mapped\",[42863]],[[42865,42872],\"valid\"],[[42873,42873],\"mapped\",[42874]],[[42874,42874],\"valid\"],[[42875,42875],\"mapped\",[42876]],[[42876,42876],\"valid\"],[[42877,42877],\"mapped\",[7545]],[[42878,42878],\"mapped\",[42879]],[[42879,42879],\"valid\"],[[42880,42880],\"mapped\",[42881]],[[42881,42881],\"valid\"],[[42882,42882],\"mapped\",[42883]],[[42883,42883],\"valid\"],[[42884,42884],\"mapped\",[42885]],[[42885,42885],\"valid\"],[[42886,42886],\"mapped\",[42887]],[[42887,42888],\"valid\"],[[42889,42890],\"valid\",[],\"NV8\"],[[42891,42891],\"mapped\",[42892]],[[42892,42892],\"valid\"],[[42893,42893],\"mapped\",[613]],[[42894,42894],\"valid\"],[[42895,42895],\"valid\"],[[42896,42896],\"mapped\",[42897]],[[42897,42897],\"valid\"],[[42898,42898],\"mapped\",[42899]],[[42899,42899],\"valid\"],[[42900,42901],\"valid\"],[[42902,42902],\"mapped\",[42903]],[[42903,42903],\"valid\"],[[42904,42904],\"mapped\",[42905]],[[42905,42905],\"valid\"],[[42906,42906],\"mapped\",[42907]],[[42907,42907],\"valid\"],[[42908,42908],\"mapped\",[42909]],[[42909,42909],\"valid\"],[[42910,42910],\"mapped\",[42911]],[[42911,42911],\"valid\"],[[42912,42912],\"mapped\",[42913]],[[42913,42913],\"valid\"],[[42914,42914],\"mapped\",[42915]],[[42915,42915],\"valid\"],[[42916,42916],\"mapped\",[42917]],[[42917,42917],\"valid\"],[[42918,42918],\"mapped\",[42919]],[[42919,42919],\"valid\"],[[42920,42920],\"mapped\",[42921]],[[42921,42921],\"valid\"],[[42922,42922],\"mapped\",[614]],[[42923,42923],\"mapped\",[604]],[[42924,42924],\"mapped\",[609]],[[42925,42925],\"mapped\",[620]],[[42926,42927],\"disallowed\"],[[42928,42928],\"mapped\",[670]],[[42929,42929],\"mapped\",[647]],[[42930,42930],\"mapped\",[669]],[[42931,42931],\"mapped\",[43859]],[[42932,42932],\"mapped\",[42933]],[[42933,42933],\"valid\"],[[42934,42934],\"mapped\",[42935]],[[42935,42935],\"valid\"],[[42936,42998],\"disallowed\"],[[42999,42999],\"valid\"],[[43000,43000],\"mapped\",[295]],[[43001,43001],\"mapped\",[339]],[[43002,43002],\"valid\"],[[43003,43007],\"valid\"],[[43008,43047],\"valid\"],[[43048,43051],\"valid\",[],\"NV8\"],[[43052,43055],\"disallowed\"],[[43056,43065],\"valid\",[],\"NV8\"],[[43066,43071],\"disallowed\"],[[43072,43123],\"valid\"],[[43124,43127],\"valid\",[],\"NV8\"],[[43128,43135],\"disallowed\"],[[43136,43204],\"valid\"],[[43205,43213],\"disallowed\"],[[43214,43215],\"valid\",[],\"NV8\"],[[43216,43225],\"valid\"],[[43226,43231],\"disallowed\"],[[43232,43255],\"valid\"],[[43256,43258],\"valid\",[],\"NV8\"],[[43259,43259],\"valid\"],[[43260,43260],\"valid\",[],\"NV8\"],[[43261,43261],\"valid\"],[[43262,43263],\"disallowed\"],[[43264,43309],\"valid\"],[[43310,43311],\"valid\",[],\"NV8\"],[[43312,43347],\"valid\"],[[43348,43358],\"disallowed\"],[[43359,43359],\"valid\",[],\"NV8\"],[[43360,43388],\"valid\",[],\"NV8\"],[[43389,43391],\"disallowed\"],[[43392,43456],\"valid\"],[[43457,43469],\"valid\",[],\"NV8\"],[[43470,43470],\"disallowed\"],[[43471,43481],\"valid\"],[[43482,43485],\"disallowed\"],[[43486,43487],\"valid\",[],\"NV8\"],[[43488,43518],\"valid\"],[[43519,43519],\"disallowed\"],[[43520,43574],\"valid\"],[[43575,43583],\"disallowed\"],[[43584,43597],\"valid\"],[[43598,43599],\"disallowed\"],[[43600,43609],\"valid\"],[[43610,43611],\"disallowed\"],[[43612,43615],\"valid\",[],\"NV8\"],[[43616,43638],\"valid\"],[[43639,43641],\"valid\",[],\"NV8\"],[[43642,43643],\"valid\"],[[43644,43647],\"valid\"],[[43648,43714],\"valid\"],[[43715,43738],\"disallowed\"],[[43739,43741],\"valid\"],[[43742,43743],\"valid\",[],\"NV8\"],[[43744,43759],\"valid\"],[[43760,43761],\"valid\",[],\"NV8\"],[[43762,43766],\"valid\"],[[43767,43776],\"disallowed\"],[[43777,43782],\"valid\"],[[43783,43784],\"disallowed\"],[[43785,43790],\"valid\"],[[43791,43792],\"disallowed\"],[[43793,43798],\"valid\"],[[43799,43807],\"disallowed\"],[[43808,43814],\"valid\"],[[43815,43815],\"disallowed\"],[[43816,43822],\"valid\"],[[43823,43823],\"disallowed\"],[[43824,43866],\"valid\"],[[43867,43867],\"valid\",[],\"NV8\"],[[43868,43868],\"mapped\",[42791]],[[43869,43869],\"mapped\",[43831]],[[43870,43870],\"mapped\",[619]],[[43871,43871],\"mapped\",[43858]],[[43872,43875],\"valid\"],[[43876,43877],\"valid\"],[[43878,43887],\"disallowed\"],[[43888,43888],\"mapped\",[5024]],[[43889,43889],\"mapped\",[5025]],[[43890,43890],\"mapped\",[5026]],[[43891,43891],\"mapped\",[5027]],[[43892,43892],\"mapped\",[5028]],[[43893,43893],\"mapped\",[5029]],[[43894,43894],\"mapped\",[5030]],[[43895,43895],\"mapped\",[5031]],[[43896,43896],\"mapped\",[5032]],[[43897,43897],\"mapped\",[5033]],[[43898,43898],\"mapped\",[5034]],[[43899,43899],\"mapped\",[5035]],[[43900,43900],\"mapped\",[5036]],[[43901,43901],\"mapped\",[5037]],[[43902,43902],\"mapped\",[5038]],[[43903,43903],\"mapped\",[5039]],[[43904,43904],\"mapped\",[5040]],[[43905,43905],\"mapped\",[5041]],[[43906,43906],\"mapped\",[5042]],[[43907,43907],\"mapped\",[5043]],[[43908,43908],\"mapped\",[5044]],[[43909,43909],\"mapped\",[5045]],[[43910,43910],\"mapped\",[5046]],[[43911,43911],\"mapped\",[5047]],[[43912,43912],\"mapped\",[5048]],[[43913,43913],\"mapped\",[5049]],[[43914,43914],\"mapped\",[5050]],[[43915,43915],\"mapped\",[5051]],[[43916,43916],\"mapped\",[5052]],[[43917,43917],\"mapped\",[5053]],[[43918,43918],\"mapped\",[5054]],[[43919,43919],\"mapped\",[5055]],[[43920,43920],\"mapped\",[5056]],[[43921,43921],\"mapped\",[5057]],[[43922,43922],\"mapped\",[5058]],[[43923,43923],\"mapped\",[5059]],[[43924,43924],\"mapped\",[5060]],[[43925,43925],\"mapped\",[5061]],[[43926,43926],\"mapped\",[5062]],[[43927,43927],\"mapped\",[5063]],[[43928,43928],\"mapped\",[5064]],[[43929,43929],\"mapped\",[5065]],[[43930,43930],\"mapped\",[5066]],[[43931,43931],\"mapped\",[5067]],[[43932,43932],\"mapped\",[5068]],[[43933,43933],\"mapped\",[5069]],[[43934,43934],\"mapped\",[5070]],[[43935,43935],\"mapped\",[5071]],[[43936,43936],\"mapped\",[5072]],[[43937,43937],\"mapped\",[5073]],[[43938,43938],\"mapped\",[5074]],[[43939,43939],\"mapped\",[5075]],[[43940,43940],\"mapped\",[5076]],[[43941,43941],\"mapped\",[5077]],[[43942,43942],\"mapped\",[5078]],[[43943,43943],\"mapped\",[5079]],[[43944,43944],\"mapped\",[5080]],[[43945,43945],\"mapped\",[5081]],[[43946,43946],\"mapped\",[5082]],[[43947,43947],\"mapped\",[5083]],[[43948,43948],\"mapped\",[5084]],[[43949,43949],\"mapped\",[5085]],[[43950,43950],\"mapped\",[5086]],[[43951,43951],\"mapped\",[5087]],[[43952,43952],\"mapped\",[5088]],[[43953,43953],\"mapped\",[5089]],[[43954,43954],\"mapped\",[5090]],[[43955,43955],\"mapped\",[5091]],[[43956,43956],\"mapped\",[5092]],[[43957,43957],\"mapped\",[5093]],[[43958,43958],\"mapped\",[5094]],[[43959,43959],\"mapped\",[5095]],[[43960,43960],\"mapped\",[5096]],[[43961,43961],\"mapped\",[5097]],[[43962,43962],\"mapped\",[5098]],[[43963,43963],\"mapped\",[5099]],[[43964,43964],\"mapped\",[5100]],[[43965,43965],\"mapped\",[5101]],[[43966,43966],\"mapped\",[5102]],[[43967,43967],\"mapped\",[5103]],[[43968,44010],\"valid\"],[[44011,44011],\"valid\",[],\"NV8\"],[[44012,44013],\"valid\"],[[44014,44015],\"disallowed\"],[[44016,44025],\"valid\"],[[44026,44031],\"disallowed\"],[[44032,55203],\"valid\"],[[55204,55215],\"disallowed\"],[[55216,55238],\"valid\",[],\"NV8\"],[[55239,55242],\"disallowed\"],[[55243,55291],\"valid\",[],\"NV8\"],[[55292,55295],\"disallowed\"],[[55296,57343],\"disallowed\"],[[57344,63743],\"disallowed\"],[[63744,63744],\"mapped\",[35912]],[[63745,63745],\"mapped\",[26356]],[[63746,63746],\"mapped\",[36554]],[[63747,63747],\"mapped\",[36040]],[[63748,63748],\"mapped\",[28369]],[[63749,63749],\"mapped\",[20018]],[[63750,63750],\"mapped\",[21477]],[[63751,63752],\"mapped\",[40860]],[[63753,63753],\"mapped\",[22865]],[[63754,63754],\"mapped\",[37329]],[[63755,63755],\"mapped\",[21895]],[[63756,63756],\"mapped\",[22856]],[[63757,63757],\"mapped\",[25078]],[[63758,63758],\"mapped\",[30313]],[[63759,63759],\"mapped\",[32645]],[[63760,63760],\"mapped\",[34367]],[[63761,63761],\"mapped\",[34746]],[[63762,63762],\"mapped\",[35064]],[[63763,63763],\"mapped\",[37007]],[[63764,63764],\"mapped\",[27138]],[[63765,63765],\"mapped\",[27931]],[[63766,63766],\"mapped\",[28889]],[[63767,63767],\"mapped\",[29662]],[[63768,63768],\"mapped\",[33853]],[[63769,63769],\"mapped\",[37226]],[[63770,63770],\"mapped\",[39409]],[[63771,63771],\"mapped\",[20098]],[[63772,63772],\"mapped\",[21365]],[[63773,63773],\"mapped\",[27396]],[[63774,63774],\"mapped\",[29211]],[[63775,63775],\"mapped\",[34349]],[[63776,63776],\"mapped\",[40478]],[[63777,63777],\"mapped\",[23888]],[[63778,63778],\"mapped\",[28651]],[[63779,63779],\"mapped\",[34253]],[[63780,63780],\"mapped\",[35172]],[[63781,63781],\"mapped\",[25289]],[[63782,63782],\"mapped\",[33240]],[[63783,63783],\"mapped\",[34847]],[[63784,63784],\"mapped\",[24266]],[[63785,63785],\"mapped\",[26391]],[[63786,63786],\"mapped\",[28010]],[[63787,63787],\"mapped\",[29436]],[[63788,63788],\"mapped\",[37070]],[[63789,63789],\"mapped\",[20358]],[[63790,63790],\"mapped\",[20919]],[[63791,63791],\"mapped\",[21214]],[[63792,63792],\"mapped\",[25796]],[[63793,63793],\"mapped\",[27347]],[[63794,63794],\"mapped\",[29200]],[[63795,63795],\"mapped\",[30439]],[[63796,63796],\"mapped\",[32769]],[[63797,63797],\"mapped\",[34310]],[[63798,63798],\"mapped\",[34396]],[[63799,63799],\"mapped\",[36335]],[[63800,63800],\"mapped\",[38706]],[[63801,63801],\"mapped\",[39791]],[[63802,63802],\"mapped\",[40442]],[[63803,63803],\"mapped\",[30860]],[[63804,63804],\"mapped\",[31103]],[[63805,63805],\"mapped\",[32160]],[[63806,63806],\"mapped\",[33737]],[[63807,63807],\"mapped\",[37636]],[[63808,63808],\"mapped\",[40575]],[[63809,63809],\"mapped\",[35542]],[[63810,63810],\"mapped\",[22751]],[[63811,63811],\"mapped\",[24324]],[[63812,63812],\"mapped\",[31840]],[[63813,63813],\"mapped\",[32894]],[[63814,63814],\"mapped\",[29282]],[[63815,63815],\"mapped\",[30922]],[[63816,63816],\"mapped\",[36034]],[[63817,63817],\"mapped\",[38647]],[[63818,63818],\"mapped\",[22744]],[[63819,63819],\"mapped\",[23650]],[[63820,63820],\"mapped\",[27155]],[[63821,63821],\"mapped\",[28122]],[[63822,63822],\"mapped\",[28431]],[[63823,63823],\"mapped\",[32047]],[[63824,63824],\"mapped\",[32311]],[[63825,63825],\"mapped\",[38475]],[[63826,63826],\"mapped\",[21202]],[[63827,63827],\"mapped\",[32907]],[[63828,63828],\"mapped\",[20956]],[[63829,63829],\"mapped\",[20940]],[[63830,63830],\"mapped\",[31260]],[[63831,63831],\"mapped\",[32190]],[[63832,63832],\"mapped\",[33777]],[[63833,63833],\"mapped\",[38517]],[[63834,63834],\"mapped\",[35712]],[[63835,63835],\"mapped\",[25295]],[[63836,63836],\"mapped\",[27138]],[[63837,63837],\"mapped\",[35582]],[[63838,63838],\"mapped\",[20025]],[[63839,63839],\"mapped\",[23527]],[[63840,63840],\"mapped\",[24594]],[[63841,63841],\"mapped\",[29575]],[[63842,63842],\"mapped\",[30064]],[[63843,63843],\"mapped\",[21271]],[[63844,63844],\"mapped\",[30971]],[[63845,63845],\"mapped\",[20415]],[[63846,63846],\"mapped\",[24489]],[[63847,63847],\"mapped\",[19981]],[[63848,63848],\"mapped\",[27852]],[[63849,63849],\"mapped\",[25976]],[[63850,63850],\"mapped\",[32034]],[[63851,63851],\"mapped\",[21443]],[[63852,63852],\"mapped\",[22622]],[[63853,63853],\"mapped\",[30465]],[[63854,63854],\"mapped\",[33865]],[[63855,63855],\"mapped\",[35498]],[[63856,63856],\"mapped\",[27578]],[[63857,63857],\"mapped\",[36784]],[[63858,63858],\"mapped\",[27784]],[[63859,63859],\"mapped\",[25342]],[[63860,63860],\"mapped\",[33509]],[[63861,63861],\"mapped\",[25504]],[[63862,63862],\"mapped\",[30053]],[[63863,63863],\"mapped\",[20142]],[[63864,63864],\"mapped\",[20841]],[[63865,63865],\"mapped\",[20937]],[[63866,63866],\"mapped\",[26753]],[[63867,63867],\"mapped\",[31975]],[[63868,63868],\"mapped\",[33391]],[[63869,63869],\"mapped\",[35538]],[[63870,63870],\"mapped\",[37327]],[[63871,63871],\"mapped\",[21237]],[[63872,63872],\"mapped\",[21570]],[[63873,63873],\"mapped\",[22899]],[[63874,63874],\"mapped\",[24300]],[[63875,63875],\"mapped\",[26053]],[[63876,63876],\"mapped\",[28670]],[[63877,63877],\"mapped\",[31018]],[[63878,63878],\"mapped\",[38317]],[[63879,63879],\"mapped\",[39530]],[[63880,63880],\"mapped\",[40599]],[[63881,63881],\"mapped\",[40654]],[[63882,63882],\"mapped\",[21147]],[[63883,63883],\"mapped\",[26310]],[[63884,63884],\"mapped\",[27511]],[[63885,63885],\"mapped\",[36706]],[[63886,63886],\"mapped\",[24180]],[[63887,63887],\"mapped\",[24976]],[[63888,63888],\"mapped\",[25088]],[[63889,63889],\"mapped\",[25754]],[[63890,63890],\"mapped\",[28451]],[[63891,63891],\"mapped\",[29001]],[[63892,63892],\"mapped\",[29833]],[[63893,63893],\"mapped\",[31178]],[[63894,63894],\"mapped\",[32244]],[[63895,63895],\"mapped\",[32879]],[[63896,63896],\"mapped\",[36646]],[[63897,63897],\"mapped\",[34030]],[[63898,63898],\"mapped\",[36899]],[[63899,63899],\"mapped\",[37706]],[[63900,63900],\"mapped\",[21015]],[[63901,63901],\"mapped\",[21155]],[[63902,63902],\"mapped\",[21693]],[[63903,63903],\"mapped\",[28872]],[[63904,63904],\"mapped\",[35010]],[[63905,63905],\"mapped\",[35498]],[[63906,63906],\"mapped\",[24265]],[[63907,63907],\"mapped\",[24565]],[[63908,63908],\"mapped\",[25467]],[[63909,63909],\"mapped\",[27566]],[[63910,63910],\"mapped\",[31806]],[[63911,63911],\"mapped\",[29557]],[[63912,63912],\"mapped\",[20196]],[[63913,63913],\"mapped\",[22265]],[[63914,63914],\"mapped\",[23527]],[[63915,63915],\"mapped\",[23994]],[[63916,63916],\"mapped\",[24604]],[[63917,63917],\"mapped\",[29618]],[[63918,63918],\"mapped\",[29801]],[[63919,63919],\"mapped\",[32666]],[[63920,63920],\"mapped\",[32838]],[[63921,63921],\"mapped\",[37428]],[[63922,63922],\"mapped\",[38646]],[[63923,63923],\"mapped\",[38728]],[[63924,63924],\"mapped\",[38936]],[[63925,63925],\"mapped\",[20363]],[[63926,63926],\"mapped\",[31150]],[[63927,63927],\"mapped\",[37300]],[[63928,63928],\"mapped\",[38584]],[[63929,63929],\"mapped\",[24801]],[[63930,63930],\"mapped\",[20102]],[[63931,63931],\"mapped\",[20698]],[[63932,63932],\"mapped\",[23534]],[[63933,63933],\"mapped\",[23615]],[[63934,63934],\"mapped\",[26009]],[[63935,63935],\"mapped\",[27138]],[[63936,63936],\"mapped\",[29134]],[[63937,63937],\"mapped\",[30274]],[[63938,63938],\"mapped\",[34044]],[[63939,63939],\"mapped\",[36988]],[[63940,63940],\"mapped\",[40845]],[[63941,63941],\"mapped\",[26248]],[[63942,63942],\"mapped\",[38446]],[[63943,63943],\"mapped\",[21129]],[[63944,63944],\"mapped\",[26491]],[[63945,63945],\"mapped\",[26611]],[[63946,63946],\"mapped\",[27969]],[[63947,63947],\"mapped\",[28316]],[[63948,63948],\"mapped\",[29705]],[[63949,63949],\"mapped\",[30041]],[[63950,63950],\"mapped\",[30827]],[[63951,63951],\"mapped\",[32016]],[[63952,63952],\"mapped\",[39006]],[[63953,63953],\"mapped\",[20845]],[[63954,63954],\"mapped\",[25134]],[[63955,63955],\"mapped\",[38520]],[[63956,63956],\"mapped\",[20523]],[[63957,63957],\"mapped\",[23833]],[[63958,63958],\"mapped\",[28138]],[[63959,63959],\"mapped\",[36650]],[[63960,63960],\"mapped\",[24459]],[[63961,63961],\"mapped\",[24900]],[[63962,63962],\"mapped\",[26647]],[[63963,63963],\"mapped\",[29575]],[[63964,63964],\"mapped\",[38534]],[[63965,63965],\"mapped\",[21033]],[[63966,63966],\"mapped\",[21519]],[[63967,63967],\"mapped\",[23653]],[[63968,63968],\"mapped\",[26131]],[[63969,63969],\"mapped\",[26446]],[[63970,63970],\"mapped\",[26792]],[[63971,63971],\"mapped\",[27877]],[[63972,63972],\"mapped\",[29702]],[[63973,63973],\"mapped\",[30178]],[[63974,63974],\"mapped\",[32633]],[[63975,63975],\"mapped\",[35023]],[[63976,63976],\"mapped\",[35041]],[[63977,63977],\"mapped\",[37324]],[[63978,63978],\"mapped\",[38626]],[[63979,63979],\"mapped\",[21311]],[[63980,63980],\"mapped\",[28346]],[[63981,63981],\"mapped\",[21533]],[[63982,63982],\"mapped\",[29136]],[[63983,63983],\"mapped\",[29848]],[[63984,63984],\"mapped\",[34298]],[[63985,63985],\"mapped\",[38563]],[[63986,63986],\"mapped\",[40023]],[[63987,63987],\"mapped\",[40607]],[[63988,63988],\"mapped\",[26519]],[[63989,63989],\"mapped\",[28107]],[[63990,63990],\"mapped\",[33256]],[[63991,63991],\"mapped\",[31435]],[[63992,63992],\"mapped\",[31520]],[[63993,63993],\"mapped\",[31890]],[[63994,63994],\"mapped\",[29376]],[[63995,63995],\"mapped\",[28825]],[[63996,63996],\"mapped\",[35672]],[[63997,63997],\"mapped\",[20160]],[[63998,63998],\"mapped\",[33590]],[[63999,63999],\"mapped\",[21050]],[[64000,64000],\"mapped\",[20999]],[[64001,64001],\"mapped\",[24230]],[[64002,64002],\"mapped\",[25299]],[[64003,64003],\"mapped\",[31958]],[[64004,64004],\"mapped\",[23429]],[[64005,64005],\"mapped\",[27934]],[[64006,64006],\"mapped\",[26292]],[[64007,64007],\"mapped\",[36667]],[[64008,64008],\"mapped\",[34892]],[[64009,64009],\"mapped\",[38477]],[[64010,64010],\"mapped\",[35211]],[[64011,64011],\"mapped\",[24275]],[[64012,64012],\"mapped\",[20800]],[[64013,64013],\"mapped\",[21952]],[[64014,64015],\"valid\"],[[64016,64016],\"mapped\",[22618]],[[64017,64017],\"valid\"],[[64018,64018],\"mapped\",[26228]],[[64019,64020],\"valid\"],[[64021,64021],\"mapped\",[20958]],[[64022,64022],\"mapped\",[29482]],[[64023,64023],\"mapped\",[30410]],[[64024,64024],\"mapped\",[31036]],[[64025,64025],\"mapped\",[31070]],[[64026,64026],\"mapped\",[31077]],[[64027,64027],\"mapped\",[31119]],[[64028,64028],\"mapped\",[38742]],[[64029,64029],\"mapped\",[31934]],[[64030,64030],\"mapped\",[32701]],[[64031,64031],\"valid\"],[[64032,64032],\"mapped\",[34322]],[[64033,64033],\"valid\"],[[64034,64034],\"mapped\",[35576]],[[64035,64036],\"valid\"],[[64037,64037],\"mapped\",[36920]],[[64038,64038],\"mapped\",[37117]],[[64039,64041],\"valid\"],[[64042,64042],\"mapped\",[39151]],[[64043,64043],\"mapped\",[39164]],[[64044,64044],\"mapped\",[39208]],[[64045,64045],\"mapped\",[40372]],[[64046,64046],\"mapped\",[37086]],[[64047,64047],\"mapped\",[38583]],[[64048,64048],\"mapped\",[20398]],[[64049,64049],\"mapped\",[20711]],[[64050,64050],\"mapped\",[20813]],[[64051,64051],\"mapped\",[21193]],[[64052,64052],\"mapped\",[21220]],[[64053,64053],\"mapped\",[21329]],[[64054,64054],\"mapped\",[21917]],[[64055,64055],\"mapped\",[22022]],[[64056,64056],\"mapped\",[22120]],[[64057,64057],\"mapped\",[22592]],[[64058,64058],\"mapped\",[22696]],[[64059,64059],\"mapped\",[23652]],[[64060,64060],\"mapped\",[23662]],[[64061,64061],\"mapped\",[24724]],[[64062,64062],\"mapped\",[24936]],[[64063,64063],\"mapped\",[24974]],[[64064,64064],\"mapped\",[25074]],[[64065,64065],\"mapped\",[25935]],[[64066,64066],\"mapped\",[26082]],[[64067,64067],\"mapped\",[26257]],[[64068,64068],\"mapped\",[26757]],[[64069,64069],\"mapped\",[28023]],[[64070,64070],\"mapped\",[28186]],[[64071,64071],\"mapped\",[28450]],[[64072,64072],\"mapped\",[29038]],[[64073,64073],\"mapped\",[29227]],[[64074,64074],\"mapped\",[29730]],[[64075,64075],\"mapped\",[30865]],[[64076,64076],\"mapped\",[31038]],[[64077,64077],\"mapped\",[31049]],[[64078,64078],\"mapped\",[31048]],[[64079,64079],\"mapped\",[31056]],[[64080,64080],\"mapped\",[31062]],[[64081,64081],\"mapped\",[31069]],[[64082,64082],\"mapped\",[31117]],[[64083,64083],\"mapped\",[31118]],[[64084,64084],\"mapped\",[31296]],[[64085,64085],\"mapped\",[31361]],[[64086,64086],\"mapped\",[31680]],[[64087,64087],\"mapped\",[32244]],[[64088,64088],\"mapped\",[32265]],[[64089,64089],\"mapped\",[32321]],[[64090,64090],\"mapped\",[32626]],[[64091,64091],\"mapped\",[32773]],[[64092,64092],\"mapped\",[33261]],[[64093,64094],\"mapped\",[33401]],[[64095,64095],\"mapped\",[33879]],[[64096,64096],\"mapped\",[35088]],[[64097,64097],\"mapped\",[35222]],[[64098,64098],\"mapped\",[35585]],[[64099,64099],\"mapped\",[35641]],[[64100,64100],\"mapped\",[36051]],[[64101,64101],\"mapped\",[36104]],[[64102,64102],\"mapped\",[36790]],[[64103,64103],\"mapped\",[36920]],[[64104,64104],\"mapped\",[38627]],[[64105,64105],\"mapped\",[38911]],[[64106,64106],\"mapped\",[38971]],[[64107,64107],\"mapped\",[24693]],[[64108,64108],\"mapped\",[148206]],[[64109,64109],\"mapped\",[33304]],[[64110,64111],\"disallowed\"],[[64112,64112],\"mapped\",[20006]],[[64113,64113],\"mapped\",[20917]],[[64114,64114],\"mapped\",[20840]],[[64115,64115],\"mapped\",[20352]],[[64116,64116],\"mapped\",[20805]],[[64117,64117],\"mapped\",[20864]],[[64118,64118],\"mapped\",[21191]],[[64119,64119],\"mapped\",[21242]],[[64120,64120],\"mapped\",[21917]],[[64121,64121],\"mapped\",[21845]],[[64122,64122],\"mapped\",[21913]],[[64123,64123],\"mapped\",[21986]],[[64124,64124],\"mapped\",[22618]],[[64125,64125],\"mapped\",[22707]],[[64126,64126],\"mapped\",[22852]],[[64127,64127],\"mapped\",[22868]],[[64128,64128],\"mapped\",[23138]],[[64129,64129],\"mapped\",[23336]],[[64130,64130],\"mapped\",[24274]],[[64131,64131],\"mapped\",[24281]],[[64132,64132],\"mapped\",[24425]],[[64133,64133],\"mapped\",[24493]],[[64134,64134],\"mapped\",[24792]],[[64135,64135],\"mapped\",[24910]],[[64136,64136],\"mapped\",[24840]],[[64137,64137],\"mapped\",[24974]],[[64138,64138],\"mapped\",[24928]],[[64139,64139],\"mapped\",[25074]],[[64140,64140],\"mapped\",[25140]],[[64141,64141],\"mapped\",[25540]],[[64142,64142],\"mapped\",[25628]],[[64143,64143],\"mapped\",[25682]],[[64144,64144],\"mapped\",[25942]],[[64145,64145],\"mapped\",[26228]],[[64146,64146],\"mapped\",[26391]],[[64147,64147],\"mapped\",[26395]],[[64148,64148],\"mapped\",[26454]],[[64149,64149],\"mapped\",[27513]],[[64150,64150],\"mapped\",[27578]],[[64151,64151],\"mapped\",[27969]],[[64152,64152],\"mapped\",[28379]],[[64153,64153],\"mapped\",[28363]],[[64154,64154],\"mapped\",[28450]],[[64155,64155],\"mapped\",[28702]],[[64156,64156],\"mapped\",[29038]],[[64157,64157],\"mapped\",[30631]],[[64158,64158],\"mapped\",[29237]],[[64159,64159],\"mapped\",[29359]],[[64160,64160],\"mapped\",[29482]],[[64161,64161],\"mapped\",[29809]],[[64162,64162],\"mapped\",[29958]],[[64163,64163],\"mapped\",[30011]],[[64164,64164],\"mapped\",[30237]],[[64165,64165],\"mapped\",[30239]],[[64166,64166],\"mapped\",[30410]],[[64167,64167],\"mapped\",[30427]],[[64168,64168],\"mapped\",[30452]],[[64169,64169],\"mapped\",[30538]],[[64170,64170],\"mapped\",[30528]],[[64171,64171],\"mapped\",[30924]],[[64172,64172],\"mapped\",[31409]],[[64173,64173],\"mapped\",[31680]],[[64174,64174],\"mapped\",[31867]],[[64175,64175],\"mapped\",[32091]],[[64176,64176],\"mapped\",[32244]],[[64177,64177],\"mapped\",[32574]],[[64178,64178],\"mapped\",[32773]],[[64179,64179],\"mapped\",[33618]],[[64180,64180],\"mapped\",[33775]],[[64181,64181],\"mapped\",[34681]],[[64182,64182],\"mapped\",[35137]],[[64183,64183],\"mapped\",[35206]],[[64184,64184],\"mapped\",[35222]],[[64185,64185],\"mapped\",[35519]],[[64186,64186],\"mapped\",[35576]],[[64187,64187],\"mapped\",[35531]],[[64188,64188],\"mapped\",[35585]],[[64189,64189],\"mapped\",[35582]],[[64190,64190],\"mapped\",[35565]],[[64191,64191],\"mapped\",[35641]],[[64192,64192],\"mapped\",[35722]],[[64193,64193],\"mapped\",[36104]],[[64194,64194],\"mapped\",[36664]],[[64195,64195],\"mapped\",[36978]],[[64196,64196],\"mapped\",[37273]],[[64197,64197],\"mapped\",[37494]],[[64198,64198],\"mapped\",[38524]],[[64199,64199],\"mapped\",[38627]],[[64200,64200],\"mapped\",[38742]],[[64201,64201],\"mapped\",[38875]],[[64202,64202],\"mapped\",[38911]],[[64203,64203],\"mapped\",[38923]],[[64204,64204],\"mapped\",[38971]],[[64205,64205],\"mapped\",[39698]],[[64206,64206],\"mapped\",[40860]],[[64207,64207],\"mapped\",[141386]],[[64208,64208],\"mapped\",[141380]],[[64209,64209],\"mapped\",[144341]],[[64210,64210],\"mapped\",[15261]],[[64211,64211],\"mapped\",[16408]],[[64212,64212],\"mapped\",[16441]],[[64213,64213],\"mapped\",[152137]],[[64214,64214],\"mapped\",[154832]],[[64215,64215],\"mapped\",[163539]],[[64216,64216],\"mapped\",[40771]],[[64217,64217],\"mapped\",[40846]],[[64218,64255],\"disallowed\"],[[64256,64256],\"mapped\",[102,102]],[[64257,64257],\"mapped\",[102,105]],[[64258,64258],\"mapped\",[102,108]],[[64259,64259],\"mapped\",[102,102,105]],[[64260,64260],\"mapped\",[102,102,108]],[[64261,64262],\"mapped\",[115,116]],[[64263,64274],\"disallowed\"],[[64275,64275],\"mapped\",[1396,1398]],[[64276,64276],\"mapped\",[1396,1381]],[[64277,64277],\"mapped\",[1396,1387]],[[64278,64278],\"mapped\",[1406,1398]],[[64279,64279],\"mapped\",[1396,1389]],[[64280,64284],\"disallowed\"],[[64285,64285],\"mapped\",[1497,1460]],[[64286,64286],\"valid\"],[[64287,64287],\"mapped\",[1522,1463]],[[64288,64288],\"mapped\",[1506]],[[64289,64289],\"mapped\",[1488]],[[64290,64290],\"mapped\",[1491]],[[64291,64291],\"mapped\",[1492]],[[64292,64292],\"mapped\",[1499]],[[64293,64293],\"mapped\",[1500]],[[64294,64294],\"mapped\",[1501]],[[64295,64295],\"mapped\",[1512]],[[64296,64296],\"mapped\",[1514]],[[64297,64297],\"disallowed_STD3_mapped\",[43]],[[64298,64298],\"mapped\",[1513,1473]],[[64299,64299],\"mapped\",[1513,1474]],[[64300,64300],\"mapped\",[1513,1468,1473]],[[64301,64301],\"mapped\",[1513,1468,1474]],[[64302,64302],\"mapped\",[1488,1463]],[[64303,64303],\"mapped\",[1488,1464]],[[64304,64304],\"mapped\",[1488,1468]],[[64305,64305],\"mapped\",[1489,1468]],[[64306,64306],\"mapped\",[1490,1468]],[[64307,64307],\"mapped\",[1491,1468]],[[64308,64308],\"mapped\",[1492,1468]],[[64309,64309],\"mapped\",[1493,1468]],[[64310,64310],\"mapped\",[1494,1468]],[[64311,64311],\"disallowed\"],[[64312,64312],\"mapped\",[1496,1468]],[[64313,64313],\"mapped\",[1497,1468]],[[64314,64314],\"mapped\",[1498,1468]],[[64315,64315],\"mapped\",[1499,1468]],[[64316,64316],\"mapped\",[1500,1468]],[[64317,64317],\"disallowed\"],[[64318,64318],\"mapped\",[1502,1468]],[[64319,64319],\"disallowed\"],[[64320,64320],\"mapped\",[1504,1468]],[[64321,64321],\"mapped\",[1505,1468]],[[64322,64322],\"disallowed\"],[[64323,64323],\"mapped\",[1507,1468]],[[64324,64324],\"mapped\",[1508,1468]],[[64325,64325],\"disallowed\"],[[64326,64326],\"mapped\",[1510,1468]],[[64327,64327],\"mapped\",[1511,1468]],[[64328,64328],\"mapped\",[1512,1468]],[[64329,64329],\"mapped\",[1513,1468]],[[64330,64330],\"mapped\",[1514,1468]],[[64331,64331],\"mapped\",[1493,1465]],[[64332,64332],\"mapped\",[1489,1471]],[[64333,64333],\"mapped\",[1499,1471]],[[64334,64334],\"mapped\",[1508,1471]],[[64335,64335],\"mapped\",[1488,1500]],[[64336,64337],\"mapped\",[1649]],[[64338,64341],\"mapped\",[1659]],[[64342,64345],\"mapped\",[1662]],[[64346,64349],\"mapped\",[1664]],[[64350,64353],\"mapped\",[1658]],[[64354,64357],\"mapped\",[1663]],[[64358,64361],\"mapped\",[1657]],[[64362,64365],\"mapped\",[1700]],[[64366,64369],\"mapped\",[1702]],[[64370,64373],\"mapped\",[1668]],[[64374,64377],\"mapped\",[1667]],[[64378,64381],\"mapped\",[1670]],[[64382,64385],\"mapped\",[1671]],[[64386,64387],\"mapped\",[1677]],[[64388,64389],\"mapped\",[1676]],[[64390,64391],\"mapped\",[1678]],[[64392,64393],\"mapped\",[1672]],[[64394,64395],\"mapped\",[1688]],[[64396,64397],\"mapped\",[1681]],[[64398,64401],\"mapped\",[1705]],[[64402,64405],\"mapped\",[1711]],[[64406,64409],\"mapped\",[1715]],[[64410,64413],\"mapped\",[1713]],[[64414,64415],\"mapped\",[1722]],[[64416,64419],\"mapped\",[1723]],[[64420,64421],\"mapped\",[1728]],[[64422,64425],\"mapped\",[1729]],[[64426,64429],\"mapped\",[1726]],[[64430,64431],\"mapped\",[1746]],[[64432,64433],\"mapped\",[1747]],[[64434,64449],\"valid\",[],\"NV8\"],[[64450,64466],\"disallowed\"],[[64467,64470],\"mapped\",[1709]],[[64471,64472],\"mapped\",[1735]],[[64473,64474],\"mapped\",[1734]],[[64475,64476],\"mapped\",[1736]],[[64477,64477],\"mapped\",[1735,1652]],[[64478,64479],\"mapped\",[1739]],[[64480,64481],\"mapped\",[1733]],[[64482,64483],\"mapped\",[1737]],[[64484,64487],\"mapped\",[1744]],[[64488,64489],\"mapped\",[1609]],[[64490,64491],\"mapped\",[1574,1575]],[[64492,64493],\"mapped\",[1574,1749]],[[64494,64495],\"mapped\",[1574,1608]],[[64496,64497],\"mapped\",[1574,1735]],[[64498,64499],\"mapped\",[1574,1734]],[[64500,64501],\"mapped\",[1574,1736]],[[64502,64504],\"mapped\",[1574,1744]],[[64505,64507],\"mapped\",[1574,1609]],[[64508,64511],\"mapped\",[1740]],[[64512,64512],\"mapped\",[1574,1580]],[[64513,64513],\"mapped\",[1574,1581]],[[64514,64514],\"mapped\",[1574,1605]],[[64515,64515],\"mapped\",[1574,1609]],[[64516,64516],\"mapped\",[1574,1610]],[[64517,64517],\"mapped\",[1576,1580]],[[64518,64518],\"mapped\",[1576,1581]],[[64519,64519],\"mapped\",[1576,1582]],[[64520,64520],\"mapped\",[1576,1605]],[[64521,64521],\"mapped\",[1576,1609]],[[64522,64522],\"mapped\",[1576,1610]],[[64523,64523],\"mapped\",[1578,1580]],[[64524,64524],\"mapped\",[1578,1581]],[[64525,64525],\"mapped\",[1578,1582]],[[64526,64526],\"mapped\",[1578,1605]],[[64527,64527],\"mapped\",[1578,1609]],[[64528,64528],\"mapped\",[1578,1610]],[[64529,64529],\"mapped\",[1579,1580]],[[64530,64530],\"mapped\",[1579,1605]],[[64531,64531],\"mapped\",[1579,1609]],[[64532,64532],\"mapped\",[1579,1610]],[[64533,64533],\"mapped\",[1580,1581]],[[64534,64534],\"mapped\",[1580,1605]],[[64535,64535],\"mapped\",[1581,1580]],[[64536,64536],\"mapped\",[1581,1605]],[[64537,64537],\"mapped\",[1582,1580]],[[64538,64538],\"mapped\",[1582,1581]],[[64539,64539],\"mapped\",[1582,1605]],[[64540,64540],\"mapped\",[1587,1580]],[[64541,64541],\"mapped\",[1587,1581]],[[64542,64542],\"mapped\",[1587,1582]],[[64543,64543],\"mapped\",[1587,1605]],[[64544,64544],\"mapped\",[1589,1581]],[[64545,64545],\"mapped\",[1589,1605]],[[64546,64546],\"mapped\",[1590,1580]],[[64547,64547],\"mapped\",[1590,1581]],[[64548,64548],\"mapped\",[1590,1582]],[[64549,64549],\"mapped\",[1590,1605]],[[64550,64550],\"mapped\",[1591,1581]],[[64551,64551],\"mapped\",[1591,1605]],[[64552,64552],\"mapped\",[1592,1605]],[[64553,64553],\"mapped\",[1593,1580]],[[64554,64554],\"mapped\",[1593,1605]],[[64555,64555],\"mapped\",[1594,1580]],[[64556,64556],\"mapped\",[1594,1605]],[[64557,64557],\"mapped\",[1601,1580]],[[64558,64558],\"mapped\",[1601,1581]],[[64559,64559],\"mapped\",[1601,1582]],[[64560,64560],\"mapped\",[1601,1605]],[[64561,64561],\"mapped\",[1601,1609]],[[64562,64562],\"mapped\",[1601,1610]],[[64563,64563],\"mapped\",[1602,1581]],[[64564,64564],\"mapped\",[1602,1605]],[[64565,64565],\"mapped\",[1602,1609]],[[64566,64566],\"mapped\",[1602,1610]],[[64567,64567],\"mapped\",[1603,1575]],[[64568,64568],\"mapped\",[1603,1580]],[[64569,64569],\"mapped\",[1603,1581]],[[64570,64570],\"mapped\",[1603,1582]],[[64571,64571],\"mapped\",[1603,1604]],[[64572,64572],\"mapped\",[1603,1605]],[[64573,64573],\"mapped\",[1603,1609]],[[64574,64574],\"mapped\",[1603,1610]],[[64575,64575],\"mapped\",[1604,1580]],[[64576,64576],\"mapped\",[1604,1581]],[[64577,64577],\"mapped\",[1604,1582]],[[64578,64578],\"mapped\",[1604,1605]],[[64579,64579],\"mapped\",[1604,1609]],[[64580,64580],\"mapped\",[1604,1610]],[[64581,64581],\"mapped\",[1605,1580]],[[64582,64582],\"mapped\",[1605,1581]],[[64583,64583],\"mapped\",[1605,1582]],[[64584,64584],\"mapped\",[1605,1605]],[[64585,64585],\"mapped\",[1605,1609]],[[64586,64586],\"mapped\",[1605,1610]],[[64587,64587],\"mapped\",[1606,1580]],[[64588,64588],\"mapped\",[1606,1581]],[[64589,64589],\"mapped\",[1606,1582]],[[64590,64590],\"mapped\",[1606,1605]],[[64591,64591],\"mapped\",[1606,1609]],[[64592,64592],\"mapped\",[1606,1610]],[[64593,64593],\"mapped\",[1607,1580]],[[64594,64594],\"mapped\",[1607,1605]],[[64595,64595],\"mapped\",[1607,1609]],[[64596,64596],\"mapped\",[1607,1610]],[[64597,64597],\"mapped\",[1610,1580]],[[64598,64598],\"mapped\",[1610,1581]],[[64599,64599],\"mapped\",[1610,1582]],[[64600,64600],\"mapped\",[1610,1605]],[[64601,64601],\"mapped\",[1610,1609]],[[64602,64602],\"mapped\",[1610,1610]],[[64603,64603],\"mapped\",[1584,1648]],[[64604,64604],\"mapped\",[1585,1648]],[[64605,64605],\"mapped\",[1609,1648]],[[64606,64606],\"disallowed_STD3_mapped\",[32,1612,1617]],[[64607,64607],\"disallowed_STD3_mapped\",[32,1613,1617]],[[64608,64608],\"disallowed_STD3_mapped\",[32,1614,1617]],[[64609,64609],\"disallowed_STD3_mapped\",[32,1615,1617]],[[64610,64610],\"disallowed_STD3_mapped\",[32,1616,1617]],[[64611,64611],\"disallowed_STD3_mapped\",[32,1617,1648]],[[64612,64612],\"mapped\",[1574,1585]],[[64613,64613],\"mapped\",[1574,1586]],[[64614,64614],\"mapped\",[1574,1605]],[[64615,64615],\"mapped\",[1574,1606]],[[64616,64616],\"mapped\",[1574,1609]],[[64617,64617],\"mapped\",[1574,1610]],[[64618,64618],\"mapped\",[1576,1585]],[[64619,64619],\"mapped\",[1576,1586]],[[64620,64620],\"mapped\",[1576,1605]],[[64621,64621],\"mapped\",[1576,1606]],[[64622,64622],\"mapped\",[1576,1609]],[[64623,64623],\"mapped\",[1576,1610]],[[64624,64624],\"mapped\",[1578,1585]],[[64625,64625],\"mapped\",[1578,1586]],[[64626,64626],\"mapped\",[1578,1605]],[[64627,64627],\"mapped\",[1578,1606]],[[64628,64628],\"mapped\",[1578,1609]],[[64629,64629],\"mapped\",[1578,1610]],[[64630,64630],\"mapped\",[1579,1585]],[[64631,64631],\"mapped\",[1579,1586]],[[64632,64632],\"mapped\",[1579,1605]],[[64633,64633],\"mapped\",[1579,1606]],[[64634,64634],\"mapped\",[1579,1609]],[[64635,64635],\"mapped\",[1579,1610]],[[64636,64636],\"mapped\",[1601,1609]],[[64637,64637],\"mapped\",[1601,1610]],[[64638,64638],\"mapped\",[1602,1609]],[[64639,64639],\"mapped\",[1602,1610]],[[64640,64640],\"mapped\",[1603,1575]],[[64641,64641],\"mapped\",[1603,1604]],[[64642,64642],\"mapped\",[1603,1605]],[[64643,64643],\"mapped\",[1603,1609]],[[64644,64644],\"mapped\",[1603,1610]],[[64645,64645],\"mapped\",[1604,1605]],[[64646,64646],\"mapped\",[1604,1609]],[[64647,64647],\"mapped\",[1604,1610]],[[64648,64648],\"mapped\",[1605,1575]],[[64649,64649],\"mapped\",[1605,1605]],[[64650,64650],\"mapped\",[1606,1585]],[[64651,64651],\"mapped\",[1606,1586]],[[64652,64652],\"mapped\",[1606,1605]],[[64653,64653],\"mapped\",[1606,1606]],[[64654,64654],\"mapped\",[1606,1609]],[[64655,64655],\"mapped\",[1606,1610]],[[64656,64656],\"mapped\",[1609,1648]],[[64657,64657],\"mapped\",[1610,1585]],[[64658,64658],\"mapped\",[1610,1586]],[[64659,64659],\"mapped\",[1610,1605]],[[64660,64660],\"mapped\",[1610,1606]],[[64661,64661],\"mapped\",[1610,1609]],[[64662,64662],\"mapped\",[1610,1610]],[[64663,64663],\"mapped\",[1574,1580]],[[64664,64664],\"mapped\",[1574,1581]],[[64665,64665],\"mapped\",[1574,1582]],[[64666,64666],\"mapped\",[1574,1605]],[[64667,64667],\"mapped\",[1574,1607]],[[64668,64668],\"mapped\",[1576,1580]],[[64669,64669],\"mapped\",[1576,1581]],[[64670,64670],\"mapped\",[1576,1582]],[[64671,64671],\"mapped\",[1576,1605]],[[64672,64672],\"mapped\",[1576,1607]],[[64673,64673],\"mapped\",[1578,1580]],[[64674,64674],\"mapped\",[1578,1581]],[[64675,64675],\"mapped\",[1578,1582]],[[64676,64676],\"mapped\",[1578,1605]],[[64677,64677],\"mapped\",[1578,1607]],[[64678,64678],\"mapped\",[1579,1605]],[[64679,64679],\"mapped\",[1580,1581]],[[64680,64680],\"mapped\",[1580,1605]],[[64681,64681],\"mapped\",[1581,1580]],[[64682,64682],\"mapped\",[1581,1605]],[[64683,64683],\"mapped\",[1582,1580]],[[64684,64684],\"mapped\",[1582,1605]],[[64685,64685],\"mapped\",[1587,1580]],[[64686,64686],\"mapped\",[1587,1581]],[[64687,64687],\"mapped\",[1587,1582]],[[64688,64688],\"mapped\",[1587,1605]],[[64689,64689],\"mapped\",[1589,1581]],[[64690,64690],\"mapped\",[1589,1582]],[[64691,64691],\"mapped\",[1589,1605]],[[64692,64692],\"mapped\",[1590,1580]],[[64693,64693],\"mapped\",[1590,1581]],[[64694,64694],\"mapped\",[1590,1582]],[[64695,64695],\"mapped\",[1590,1605]],[[64696,64696],\"mapped\",[1591,1581]],[[64697,64697],\"mapped\",[1592,1605]],[[64698,64698],\"mapped\",[1593,1580]],[[64699,64699],\"mapped\",[1593,1605]],[[64700,64700],\"mapped\",[1594,1580]],[[64701,64701],\"mapped\",[1594,1605]],[[64702,64702],\"mapped\",[1601,1580]],[[64703,64703],\"mapped\",[1601,1581]],[[64704,64704],\"mapped\",[1601,1582]],[[64705,64705],\"mapped\",[1601,1605]],[[64706,64706],\"mapped\",[1602,1581]],[[64707,64707],\"mapped\",[1602,1605]],[[64708,64708],\"mapped\",[1603,1580]],[[64709,64709],\"mapped\",[1603,1581]],[[64710,64710],\"mapped\",[1603,1582]],[[64711,64711],\"mapped\",[1603,1604]],[[64712,64712],\"mapped\",[1603,1605]],[[64713,64713],\"mapped\",[1604,1580]],[[64714,64714],\"mapped\",[1604,1581]],[[64715,64715],\"mapped\",[1604,1582]],[[64716,64716],\"mapped\",[1604,1605]],[[64717,64717],\"mapped\",[1604,1607]],[[64718,64718],\"mapped\",[1605,1580]],[[64719,64719],\"mapped\",[1605,1581]],[[64720,64720],\"mapped\",[1605,1582]],[[64721,64721],\"mapped\",[1605,1605]],[[64722,64722],\"mapped\",[1606,1580]],[[64723,64723],\"mapped\",[1606,1581]],[[64724,64724],\"mapped\",[1606,1582]],[[64725,64725],\"mapped\",[1606,1605]],[[64726,64726],\"mapped\",[1606,1607]],[[64727,64727],\"mapped\",[1607,1580]],[[64728,64728],\"mapped\",[1607,1605]],[[64729,64729],\"mapped\",[1607,1648]],[[64730,64730],\"mapped\",[1610,1580]],[[64731,64731],\"mapped\",[1610,1581]],[[64732,64732],\"mapped\",[1610,1582]],[[64733,64733],\"mapped\",[1610,1605]],[[64734,64734],\"mapped\",[1610,1607]],[[64735,64735],\"mapped\",[1574,1605]],[[64736,64736],\"mapped\",[1574,1607]],[[64737,64737],\"mapped\",[1576,1605]],[[64738,64738],\"mapped\",[1576,1607]],[[64739,64739],\"mapped\",[1578,1605]],[[64740,64740],\"mapped\",[1578,1607]],[[64741,64741],\"mapped\",[1579,1605]],[[64742,64742],\"mapped\",[1579,1607]],[[64743,64743],\"mapped\",[1587,1605]],[[64744,64744],\"mapped\",[1587,1607]],[[64745,64745],\"mapped\",[1588,1605]],[[64746,64746],\"mapped\",[1588,1607]],[[64747,64747],\"mapped\",[1603,1604]],[[64748,64748],\"mapped\",[1603,1605]],[[64749,64749],\"mapped\",[1604,1605]],[[64750,64750],\"mapped\",[1606,1605]],[[64751,64751],\"mapped\",[1606,1607]],[[64752,64752],\"mapped\",[1610,1605]],[[64753,64753],\"mapped\",[1610,1607]],[[64754,64754],\"mapped\",[1600,1614,1617]],[[64755,64755],\"mapped\",[1600,1615,1617]],[[64756,64756],\"mapped\",[1600,1616,1617]],[[64757,64757],\"mapped\",[1591,1609]],[[64758,64758],\"mapped\",[1591,1610]],[[64759,64759],\"mapped\",[1593,1609]],[[64760,64760],\"mapped\",[1593,1610]],[[64761,64761],\"mapped\",[1594,1609]],[[64762,64762],\"mapped\",[1594,1610]],[[64763,64763],\"mapped\",[1587,1609]],[[64764,64764],\"mapped\",[1587,1610]],[[64765,64765],\"mapped\",[1588,1609]],[[64766,64766],\"mapped\",[1588,1610]],[[64767,64767],\"mapped\",[1581,1609]],[[64768,64768],\"mapped\",[1581,1610]],[[64769,64769],\"mapped\",[1580,1609]],[[64770,64770],\"mapped\",[1580,1610]],[[64771,64771],\"mapped\",[1582,1609]],[[64772,64772],\"mapped\",[1582,1610]],[[64773,64773],\"mapped\",[1589,1609]],[[64774,64774],\"mapped\",[1589,1610]],[[64775,64775],\"mapped\",[1590,1609]],[[64776,64776],\"mapped\",[1590,1610]],[[64777,64777],\"mapped\",[1588,1580]],[[64778,64778],\"mapped\",[1588,1581]],[[64779,64779],\"mapped\",[1588,1582]],[[64780,64780],\"mapped\",[1588,1605]],[[64781,64781],\"mapped\",[1588,1585]],[[64782,64782],\"mapped\",[1587,1585]],[[64783,64783],\"mapped\",[1589,1585]],[[64784,64784],\"mapped\",[1590,1585]],[[64785,64785],\"mapped\",[1591,1609]],[[64786,64786],\"mapped\",[1591,1610]],[[64787,64787],\"mapped\",[1593,1609]],[[64788,64788],\"mapped\",[1593,1610]],[[64789,64789],\"mapped\",[1594,1609]],[[64790,64790],\"mapped\",[1594,1610]],[[64791,64791],\"mapped\",[1587,1609]],[[64792,64792],\"mapped\",[1587,1610]],[[64793,64793],\"mapped\",[1588,1609]],[[64794,64794],\"mapped\",[1588,1610]],[[64795,64795],\"mapped\",[1581,1609]],[[64796,64796],\"mapped\",[1581,1610]],[[64797,64797],\"mapped\",[1580,1609]],[[64798,64798],\"mapped\",[1580,1610]],[[64799,64799],\"mapped\",[1582,1609]],[[64800,64800],\"mapped\",[1582,1610]],[[64801,64801],\"mapped\",[1589,1609]],[[64802,64802],\"mapped\",[1589,1610]],[[64803,64803],\"mapped\",[1590,1609]],[[64804,64804],\"mapped\",[1590,1610]],[[64805,64805],\"mapped\",[1588,1580]],[[64806,64806],\"mapped\",[1588,1581]],[[64807,64807],\"mapped\",[1588,1582]],[[64808,64808],\"mapped\",[1588,1605]],[[64809,64809],\"mapped\",[1588,1585]],[[64810,64810],\"mapped\",[1587,1585]],[[64811,64811],\"mapped\",[1589,1585]],[[64812,64812],\"mapped\",[1590,1585]],[[64813,64813],\"mapped\",[1588,1580]],[[64814,64814],\"mapped\",[1588,1581]],[[64815,64815],\"mapped\",[1588,1582]],[[64816,64816],\"mapped\",[1588,1605]],[[64817,64817],\"mapped\",[1587,1607]],[[64818,64818],\"mapped\",[1588,1607]],[[64819,64819],\"mapped\",[1591,1605]],[[64820,64820],\"mapped\",[1587,1580]],[[64821,64821],\"mapped\",[1587,1581]],[[64822,64822],\"mapped\",[1587,1582]],[[64823,64823],\"mapped\",[1588,1580]],[[64824,64824],\"mapped\",[1588,1581]],[[64825,64825],\"mapped\",[1588,1582]],[[64826,64826],\"mapped\",[1591,1605]],[[64827,64827],\"mapped\",[1592,1605]],[[64828,64829],\"mapped\",[1575,1611]],[[64830,64831],\"valid\",[],\"NV8\"],[[64832,64847],\"disallowed\"],[[64848,64848],\"mapped\",[1578,1580,1605]],[[64849,64850],\"mapped\",[1578,1581,1580]],[[64851,64851],\"mapped\",[1578,1581,1605]],[[64852,64852],\"mapped\",[1578,1582,1605]],[[64853,64853],\"mapped\",[1578,1605,1580]],[[64854,64854],\"mapped\",[1578,1605,1581]],[[64855,64855],\"mapped\",[1578,1605,1582]],[[64856,64857],\"mapped\",[1580,1605,1581]],[[64858,64858],\"mapped\",[1581,1605,1610]],[[64859,64859],\"mapped\",[1581,1605,1609]],[[64860,64860],\"mapped\",[1587,1581,1580]],[[64861,64861],\"mapped\",[1587,1580,1581]],[[64862,64862],\"mapped\",[1587,1580,1609]],[[64863,64864],\"mapped\",[1587,1605,1581]],[[64865,64865],\"mapped\",[1587,1605,1580]],[[64866,64867],\"mapped\",[1587,1605,1605]],[[64868,64869],\"mapped\",[1589,1581,1581]],[[64870,64870],\"mapped\",[1589,1605,1605]],[[64871,64872],\"mapped\",[1588,1581,1605]],[[64873,64873],\"mapped\",[1588,1580,1610]],[[64874,64875],\"mapped\",[1588,1605,1582]],[[64876,64877],\"mapped\",[1588,1605,1605]],[[64878,64878],\"mapped\",[1590,1581,1609]],[[64879,64880],\"mapped\",[1590,1582,1605]],[[64881,64882],\"mapped\",[1591,1605,1581]],[[64883,64883],\"mapped\",[1591,1605,1605]],[[64884,64884],\"mapped\",[1591,1605,1610]],[[64885,64885],\"mapped\",[1593,1580,1605]],[[64886,64887],\"mapped\",[1593,1605,1605]],[[64888,64888],\"mapped\",[1593,1605,1609]],[[64889,64889],\"mapped\",[1594,1605,1605]],[[64890,64890],\"mapped\",[1594,1605,1610]],[[64891,64891],\"mapped\",[1594,1605,1609]],[[64892,64893],\"mapped\",[1601,1582,1605]],[[64894,64894],\"mapped\",[1602,1605,1581]],[[64895,64895],\"mapped\",[1602,1605,1605]],[[64896,64896],\"mapped\",[1604,1581,1605]],[[64897,64897],\"mapped\",[1604,1581,1610]],[[64898,64898],\"mapped\",[1604,1581,1609]],[[64899,64900],\"mapped\",[1604,1580,1580]],[[64901,64902],\"mapped\",[1604,1582,1605]],[[64903,64904],\"mapped\",[1604,1605,1581]],[[64905,64905],\"mapped\",[1605,1581,1580]],[[64906,64906],\"mapped\",[1605,1581,1605]],[[64907,64907],\"mapped\",[1605,1581,1610]],[[64908,64908],\"mapped\",[1605,1580,1581]],[[64909,64909],\"mapped\",[1605,1580,1605]],[[64910,64910],\"mapped\",[1605,1582,1580]],[[64911,64911],\"mapped\",[1605,1582,1605]],[[64912,64913],\"disallowed\"],[[64914,64914],\"mapped\",[1605,1580,1582]],[[64915,64915],\"mapped\",[1607,1605,1580]],[[64916,64916],\"mapped\",[1607,1605,1605]],[[64917,64917],\"mapped\",[1606,1581,1605]],[[64918,64918],\"mapped\",[1606,1581,1609]],[[64919,64920],\"mapped\",[1606,1580,1605]],[[64921,64921],\"mapped\",[1606,1580,1609]],[[64922,64922],\"mapped\",[1606,1605,1610]],[[64923,64923],\"mapped\",[1606,1605,1609]],[[64924,64925],\"mapped\",[1610,1605,1605]],[[64926,64926],\"mapped\",[1576,1582,1610]],[[64927,64927],\"mapped\",[1578,1580,1610]],[[64928,64928],\"mapped\",[1578,1580,1609]],[[64929,64929],\"mapped\",[1578,1582,1610]],[[64930,64930],\"mapped\",[1578,1582,1609]],[[64931,64931],\"mapped\",[1578,1605,1610]],[[64932,64932],\"mapped\",[1578,1605,1609]],[[64933,64933],\"mapped\",[1580,1605,1610]],[[64934,64934],\"mapped\",[1580,1581,1609]],[[64935,64935],\"mapped\",[1580,1605,1609]],[[64936,64936],\"mapped\",[1587,1582,1609]],[[64937,64937],\"mapped\",[1589,1581,1610]],[[64938,64938],\"mapped\",[1588,1581,1610]],[[64939,64939],\"mapped\",[1590,1581,1610]],[[64940,64940],\"mapped\",[1604,1580,1610]],[[64941,64941],\"mapped\",[1604,1605,1610]],[[64942,64942],\"mapped\",[1610,1581,1610]],[[64943,64943],\"mapped\",[1610,1580,1610]],[[64944,64944],\"mapped\",[1610,1605,1610]],[[64945,64945],\"mapped\",[1605,1605,1610]],[[64946,64946],\"mapped\",[1602,1605,1610]],[[64947,64947],\"mapped\",[1606,1581,1610]],[[64948,64948],\"mapped\",[1602,1605,1581]],[[64949,64949],\"mapped\",[1604,1581,1605]],[[64950,64950],\"mapped\",[1593,1605,1610]],[[64951,64951],\"mapped\",[1603,1605,1610]],[[64952,64952],\"mapped\",[1606,1580,1581]],[[64953,64953],\"mapped\",[1605,1582,1610]],[[64954,64954],\"mapped\",[1604,1580,1605]],[[64955,64955],\"mapped\",[1603,1605,1605]],[[64956,64956],\"mapped\",[1604,1580,1605]],[[64957,64957],\"mapped\",[1606,1580,1581]],[[64958,64958],\"mapped\",[1580,1581,1610]],[[64959,64959],\"mapped\",[1581,1580,1610]],[[64960,64960],\"mapped\",[1605,1580,1610]],[[64961,64961],\"mapped\",[1601,1605,1610]],[[64962,64962],\"mapped\",[1576,1581,1610]],[[64963,64963],\"mapped\",[1603,1605,1605]],[[64964,64964],\"mapped\",[1593,1580,1605]],[[64965,64965],\"mapped\",[1589,1605,1605]],[[64966,64966],\"mapped\",[1587,1582,1610]],[[64967,64967],\"mapped\",[1606,1580,1610]],[[64968,64975],\"disallowed\"],[[64976,65007],\"disallowed\"],[[65008,65008],\"mapped\",[1589,1604,1746]],[[65009,65009],\"mapped\",[1602,1604,1746]],[[65010,65010],\"mapped\",[1575,1604,1604,1607]],[[65011,65011],\"mapped\",[1575,1603,1576,1585]],[[65012,65012],\"mapped\",[1605,1581,1605,1583]],[[65013,65013],\"mapped\",[1589,1604,1593,1605]],[[65014,65014],\"mapped\",[1585,1587,1608,1604]],[[65015,65015],\"mapped\",[1593,1604,1610,1607]],[[65016,65016],\"mapped\",[1608,1587,1604,1605]],[[65017,65017],\"mapped\",[1589,1604,1609]],[[65018,65018],\"disallowed_STD3_mapped\",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],\"disallowed_STD3_mapped\",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],\"mapped\",[1585,1740,1575,1604]],[[65021,65021],\"valid\",[],\"NV8\"],[[65022,65023],\"disallowed\"],[[65024,65039],\"ignored\"],[[65040,65040],\"disallowed_STD3_mapped\",[44]],[[65041,65041],\"mapped\",[12289]],[[65042,65042],\"disallowed\"],[[65043,65043],\"disallowed_STD3_mapped\",[58]],[[65044,65044],\"disallowed_STD3_mapped\",[59]],[[65045,65045],\"disallowed_STD3_mapped\",[33]],[[65046,65046],\"disallowed_STD3_mapped\",[63]],[[65047,65047],\"mapped\",[12310]],[[65048,65048],\"mapped\",[12311]],[[65049,65049],\"disallowed\"],[[65050,65055],\"disallowed\"],[[65056,65059],\"valid\"],[[65060,65062],\"valid\"],[[65063,65069],\"valid\"],[[65070,65071],\"valid\"],[[65072,65072],\"disallowed\"],[[65073,65073],\"mapped\",[8212]],[[65074,65074],\"mapped\",[8211]],[[65075,65076],\"disallowed_STD3_mapped\",[95]],[[65077,65077],\"disallowed_STD3_mapped\",[40]],[[65078,65078],\"disallowed_STD3_mapped\",[41]],[[65079,65079],\"disallowed_STD3_mapped\",[123]],[[65080,65080],\"disallowed_STD3_mapped\",[125]],[[65081,65081],\"mapped\",[12308]],[[65082,65082],\"mapped\",[12309]],[[65083,65083],\"mapped\",[12304]],[[65084,65084],\"mapped\",[12305]],[[65085,65085],\"mapped\",[12298]],[[65086,65086],\"mapped\",[12299]],[[65087,65087],\"mapped\",[12296]],[[65088,65088],\"mapped\",[12297]],[[65089,65089],\"mapped\",[12300]],[[65090,65090],\"mapped\",[12301]],[[65091,65091],\"mapped\",[12302]],[[65092,65092],\"mapped\",[12303]],[[65093,65094],\"valid\",[],\"NV8\"],[[65095,65095],\"disallowed_STD3_mapped\",[91]],[[65096,65096],\"disallowed_STD3_mapped\",[93]],[[65097,65100],\"disallowed_STD3_mapped\",[32,773]],[[65101,65103],\"disallowed_STD3_mapped\",[95]],[[65104,65104],\"disallowed_STD3_mapped\",[44]],[[65105,65105],\"mapped\",[12289]],[[65106,65106],\"disallowed\"],[[65107,65107],\"disallowed\"],[[65108,65108],\"disallowed_STD3_mapped\",[59]],[[65109,65109],\"disallowed_STD3_mapped\",[58]],[[65110,65110],\"disallowed_STD3_mapped\",[63]],[[65111,65111],\"disallowed_STD3_mapped\",[33]],[[65112,65112],\"mapped\",[8212]],[[65113,65113],\"disallowed_STD3_mapped\",[40]],[[65114,65114],\"disallowed_STD3_mapped\",[41]],[[65115,65115],\"disallowed_STD3_mapped\",[123]],[[65116,65116],\"disallowed_STD3_mapped\",[125]],[[65117,65117],\"mapped\",[12308]],[[65118,65118],\"mapped\",[12309]],[[65119,65119],\"disallowed_STD3_mapped\",[35]],[[65120,65120],\"disallowed_STD3_mapped\",[38]],[[65121,65121],\"disallowed_STD3_mapped\",[42]],[[65122,65122],\"disallowed_STD3_mapped\",[43]],[[65123,65123],\"mapped\",[45]],[[65124,65124],\"disallowed_STD3_mapped\",[60]],[[65125,65125],\"disallowed_STD3_mapped\",[62]],[[65126,65126],\"disallowed_STD3_mapped\",[61]],[[65127,65127],\"disallowed\"],[[65128,65128],\"disallowed_STD3_mapped\",[92]],[[65129,65129],\"disallowed_STD3_mapped\",[36]],[[65130,65130],\"disallowed_STD3_mapped\",[37]],[[65131,65131],\"disallowed_STD3_mapped\",[64]],[[65132,65135],\"disallowed\"],[[65136,65136],\"disallowed_STD3_mapped\",[32,1611]],[[65137,65137],\"mapped\",[1600,1611]],[[65138,65138],\"disallowed_STD3_mapped\",[32,1612]],[[65139,65139],\"valid\"],[[65140,65140],\"disallowed_STD3_mapped\",[32,1613]],[[65141,65141],\"disallowed\"],[[65142,65142],\"disallowed_STD3_mapped\",[32,1614]],[[65143,65143],\"mapped\",[1600,1614]],[[65144,65144],\"disallowed_STD3_mapped\",[32,1615]],[[65145,65145],\"mapped\",[1600,1615]],[[65146,65146],\"disallowed_STD3_mapped\",[32,1616]],[[65147,65147],\"mapped\",[1600,1616]],[[65148,65148],\"disallowed_STD3_mapped\",[32,1617]],[[65149,65149],\"mapped\",[1600,1617]],[[65150,65150],\"disallowed_STD3_mapped\",[32,1618]],[[65151,65151],\"mapped\",[1600,1618]],[[65152,65152],\"mapped\",[1569]],[[65153,65154],\"mapped\",[1570]],[[65155,65156],\"mapped\",[1571]],[[65157,65158],\"mapped\",[1572]],[[65159,65160],\"mapped\",[1573]],[[65161,65164],\"mapped\",[1574]],[[65165,65166],\"mapped\",[1575]],[[65167,65170],\"mapped\",[1576]],[[65171,65172],\"mapped\",[1577]],[[65173,65176],\"mapped\",[1578]],[[65177,65180],\"mapped\",[1579]],[[65181,65184],\"mapped\",[1580]],[[65185,65188],\"mapped\",[1581]],[[65189,65192],\"mapped\",[1582]],[[65193,65194],\"mapped\",[1583]],[[65195,65196],\"mapped\",[1584]],[[65197,65198],\"mapped\",[1585]],[[65199,65200],\"mapped\",[1586]],[[65201,65204],\"mapped\",[1587]],[[65205,65208],\"mapped\",[1588]],[[65209,65212],\"mapped\",[1589]],[[65213,65216],\"mapped\",[1590]],[[65217,65220],\"mapped\",[1591]],[[65221,65224],\"mapped\",[1592]],[[65225,65228],\"mapped\",[1593]],[[65229,65232],\"mapped\",[1594]],[[65233,65236],\"mapped\",[1601]],[[65237,65240],\"mapped\",[1602]],[[65241,65244],\"mapped\",[1603]],[[65245,65248],\"mapped\",[1604]],[[65249,65252],\"mapped\",[1605]],[[65253,65256],\"mapped\",[1606]],[[65257,65260],\"mapped\",[1607]],[[65261,65262],\"mapped\",[1608]],[[65263,65264],\"mapped\",[1609]],[[65265,65268],\"mapped\",[1610]],[[65269,65270],\"mapped\",[1604,1570]],[[65271,65272],\"mapped\",[1604,1571]],[[65273,65274],\"mapped\",[1604,1573]],[[65275,65276],\"mapped\",[1604,1575]],[[65277,65278],\"disallowed\"],[[65279,65279],\"ignored\"],[[65280,65280],\"disallowed\"],[[65281,65281],\"disallowed_STD3_mapped\",[33]],[[65282,65282],\"disallowed_STD3_mapped\",[34]],[[65283,65283],\"disallowed_STD3_mapped\",[35]],[[65284,65284],\"disallowed_STD3_mapped\",[36]],[[65285,65285],\"disallowed_STD3_mapped\",[37]],[[65286,65286],\"disallowed_STD3_mapped\",[38]],[[65287,65287],\"disallowed_STD3_mapped\",[39]],[[65288,65288],\"disallowed_STD3_mapped\",[40]],[[65289,65289],\"disallowed_STD3_mapped\",[41]],[[65290,65290],\"disallowed_STD3_mapped\",[42]],[[65291,65291],\"disallowed_STD3_mapped\",[43]],[[65292,65292],\"disallowed_STD3_mapped\",[44]],[[65293,65293],\"mapped\",[45]],[[65294,65294],\"mapped\",[46]],[[65295,65295],\"disallowed_STD3_mapped\",[47]],[[65296,65296],\"mapped\",[48]],[[65297,65297],\"mapped\",[49]],[[65298,65298],\"mapped\",[50]],[[65299,65299],\"mapped\",[51]],[[65300,65300],\"mapped\",[52]],[[65301,65301],\"mapped\",[53]],[[65302,65302],\"mapped\",[54]],[[65303,65303],\"mapped\",[55]],[[65304,65304],\"mapped\",[56]],[[65305,65305],\"mapped\",[57]],[[65306,65306],\"disallowed_STD3_mapped\",[58]],[[65307,65307],\"disallowed_STD3_mapped\",[59]],[[65308,65308],\"disallowed_STD3_mapped\",[60]],[[65309,65309],\"disallowed_STD3_mapped\",[61]],[[65310,65310],\"disallowed_STD3_mapped\",[62]],[[65311,65311],\"disallowed_STD3_mapped\",[63]],[[65312,65312],\"disallowed_STD3_mapped\",[64]],[[65313,65313],\"mapped\",[97]],[[65314,65314],\"mapped\",[98]],[[65315,65315],\"mapped\",[99]],[[65316,65316],\"mapped\",[100]],[[65317,65317],\"mapped\",[101]],[[65318,65318],\"mapped\",[102]],[[65319,65319],\"mapped\",[103]],[[65320,65320],\"mapped\",[104]],[[65321,65321],\"mapped\",[105]],[[65322,65322],\"mapped\",[106]],[[65323,65323],\"mapped\",[107]],[[65324,65324],\"mapped\",[108]],[[65325,65325],\"mapped\",[109]],[[65326,65326],\"mapped\",[110]],[[65327,65327],\"mapped\",[111]],[[65328,65328],\"mapped\",[112]],[[65329,65329],\"mapped\",[113]],[[65330,65330],\"mapped\",[114]],[[65331,65331],\"mapped\",[115]],[[65332,65332],\"mapped\",[116]],[[65333,65333],\"mapped\",[117]],[[65334,65334],\"mapped\",[118]],[[65335,65335],\"mapped\",[119]],[[65336,65336],\"mapped\",[120]],[[65337,65337],\"mapped\",[121]],[[65338,65338],\"mapped\",[122]],[[65339,65339],\"disallowed_STD3_mapped\",[91]],[[65340,65340],\"disallowed_STD3_mapped\",[92]],[[65341,65341],\"disallowed_STD3_mapped\",[93]],[[65342,65342],\"disallowed_STD3_mapped\",[94]],[[65343,65343],\"disallowed_STD3_mapped\",[95]],[[65344,65344],\"disallowed_STD3_mapped\",[96]],[[65345,65345],\"mapped\",[97]],[[65346,65346],\"mapped\",[98]],[[65347,65347],\"mapped\",[99]],[[65348,65348],\"mapped\",[100]],[[65349,65349],\"mapped\",[101]],[[65350,65350],\"mapped\",[102]],[[65351,65351],\"mapped\",[103]],[[65352,65352],\"mapped\",[104]],[[65353,65353],\"mapped\",[105]],[[65354,65354],\"mapped\",[106]],[[65355,65355],\"mapped\",[107]],[[65356,65356],\"mapped\",[108]],[[65357,65357],\"mapped\",[109]],[[65358,65358],\"mapped\",[110]],[[65359,65359],\"mapped\",[111]],[[65360,65360],\"mapped\",[112]],[[65361,65361],\"mapped\",[113]],[[65362,65362],\"mapped\",[114]],[[65363,65363],\"mapped\",[115]],[[65364,65364],\"mapped\",[116]],[[65365,65365],\"mapped\",[117]],[[65366,65366],\"mapped\",[118]],[[65367,65367],\"mapped\",[119]],[[65368,65368],\"mapped\",[120]],[[65369,65369],\"mapped\",[121]],[[65370,65370],\"mapped\",[122]],[[65371,65371],\"disallowed_STD3_mapped\",[123]],[[65372,65372],\"disallowed_STD3_mapped\",[124]],[[65373,65373],\"disallowed_STD3_mapped\",[125]],[[65374,65374],\"disallowed_STD3_mapped\",[126]],[[65375,65375],\"mapped\",[10629]],[[65376,65376],\"mapped\",[10630]],[[65377,65377],\"mapped\",[46]],[[65378,65378],\"mapped\",[12300]],[[65379,65379],\"mapped\",[12301]],[[65380,65380],\"mapped\",[12289]],[[65381,65381],\"mapped\",[12539]],[[65382,65382],\"mapped\",[12530]],[[65383,65383],\"mapped\",[12449]],[[65384,65384],\"mapped\",[12451]],[[65385,65385],\"mapped\",[12453]],[[65386,65386],\"mapped\",[12455]],[[65387,65387],\"mapped\",[12457]],[[65388,65388],\"mapped\",[12515]],[[65389,65389],\"mapped\",[12517]],[[65390,65390],\"mapped\",[12519]],[[65391,65391],\"mapped\",[12483]],[[65392,65392],\"mapped\",[12540]],[[65393,65393],\"mapped\",[12450]],[[65394,65394],\"mapped\",[12452]],[[65395,65395],\"mapped\",[12454]],[[65396,65396],\"mapped\",[12456]],[[65397,65397],\"mapped\",[12458]],[[65398,65398],\"mapped\",[12459]],[[65399,65399],\"mapped\",[12461]],[[65400,65400],\"mapped\",[12463]],[[65401,65401],\"mapped\",[12465]],[[65402,65402],\"mapped\",[12467]],[[65403,65403],\"mapped\",[12469]],[[65404,65404],\"mapped\",[12471]],[[65405,65405],\"mapped\",[12473]],[[65406,65406],\"mapped\",[12475]],[[65407,65407],\"mapped\",[12477]],[[65408,65408],\"mapped\",[12479]],[[65409,65409],\"mapped\",[12481]],[[65410,65410],\"mapped\",[12484]],[[65411,65411],\"mapped\",[12486]],[[65412,65412],\"mapped\",[12488]],[[65413,65413],\"mapped\",[12490]],[[65414,65414],\"mapped\",[12491]],[[65415,65415],\"mapped\",[12492]],[[65416,65416],\"mapped\",[12493]],[[65417,65417],\"mapped\",[12494]],[[65418,65418],\"mapped\",[12495]],[[65419,65419],\"mapped\",[12498]],[[65420,65420],\"mapped\",[12501]],[[65421,65421],\"mapped\",[12504]],[[65422,65422],\"mapped\",[12507]],[[65423,65423],\"mapped\",[12510]],[[65424,65424],\"mapped\",[12511]],[[65425,65425],\"mapped\",[12512]],[[65426,65426],\"mapped\",[12513]],[[65427,65427],\"mapped\",[12514]],[[65428,65428],\"mapped\",[12516]],[[65429,65429],\"mapped\",[12518]],[[65430,65430],\"mapped\",[12520]],[[65431,65431],\"mapped\",[12521]],[[65432,65432],\"mapped\",[12522]],[[65433,65433],\"mapped\",[12523]],[[65434,65434],\"mapped\",[12524]],[[65435,65435],\"mapped\",[12525]],[[65436,65436],\"mapped\",[12527]],[[65437,65437],\"mapped\",[12531]],[[65438,65438],\"mapped\",[12441]],[[65439,65439],\"mapped\",[12442]],[[65440,65440],\"disallowed\"],[[65441,65441],\"mapped\",[4352]],[[65442,65442],\"mapped\",[4353]],[[65443,65443],\"mapped\",[4522]],[[65444,65444],\"mapped\",[4354]],[[65445,65445],\"mapped\",[4524]],[[65446,65446],\"mapped\",[4525]],[[65447,65447],\"mapped\",[4355]],[[65448,65448],\"mapped\",[4356]],[[65449,65449],\"mapped\",[4357]],[[65450,65450],\"mapped\",[4528]],[[65451,65451],\"mapped\",[4529]],[[65452,65452],\"mapped\",[4530]],[[65453,65453],\"mapped\",[4531]],[[65454,65454],\"mapped\",[4532]],[[65455,65455],\"mapped\",[4533]],[[65456,65456],\"mapped\",[4378]],[[65457,65457],\"mapped\",[4358]],[[65458,65458],\"mapped\",[4359]],[[65459,65459],\"mapped\",[4360]],[[65460,65460],\"mapped\",[4385]],[[65461,65461],\"mapped\",[4361]],[[65462,65462],\"mapped\",[4362]],[[65463,65463],\"mapped\",[4363]],[[65464,65464],\"mapped\",[4364]],[[65465,65465],\"mapped\",[4365]],[[65466,65466],\"mapped\",[4366]],[[65467,65467],\"mapped\",[4367]],[[65468,65468],\"mapped\",[4368]],[[65469,65469],\"mapped\",[4369]],[[65470,65470],\"mapped\",[4370]],[[65471,65473],\"disallowed\"],[[65474,65474],\"mapped\",[4449]],[[65475,65475],\"mapped\",[4450]],[[65476,65476],\"mapped\",[4451]],[[65477,65477],\"mapped\",[4452]],[[65478,65478],\"mapped\",[4453]],[[65479,65479],\"mapped\",[4454]],[[65480,65481],\"disallowed\"],[[65482,65482],\"mapped\",[4455]],[[65483,65483],\"mapped\",[4456]],[[65484,65484],\"mapped\",[4457]],[[65485,65485],\"mapped\",[4458]],[[65486,65486],\"mapped\",[4459]],[[65487,65487],\"mapped\",[4460]],[[65488,65489],\"disallowed\"],[[65490,65490],\"mapped\",[4461]],[[65491,65491],\"mapped\",[4462]],[[65492,65492],\"mapped\",[4463]],[[65493,65493],\"mapped\",[4464]],[[65494,65494],\"mapped\",[4465]],[[65495,65495],\"mapped\",[4466]],[[65496,65497],\"disallowed\"],[[65498,65498],\"mapped\",[4467]],[[65499,65499],\"mapped\",[4468]],[[65500,65500],\"mapped\",[4469]],[[65501,65503],\"disallowed\"],[[65504,65504],\"mapped\",[162]],[[65505,65505],\"mapped\",[163]],[[65506,65506],\"mapped\",[172]],[[65507,65507],\"disallowed_STD3_mapped\",[32,772]],[[65508,65508],\"mapped\",[166]],[[65509,65509],\"mapped\",[165]],[[65510,65510],\"mapped\",[8361]],[[65511,65511],\"disallowed\"],[[65512,65512],\"mapped\",[9474]],[[65513,65513],\"mapped\",[8592]],[[65514,65514],\"mapped\",[8593]],[[65515,65515],\"mapped\",[8594]],[[65516,65516],\"mapped\",[8595]],[[65517,65517],\"mapped\",[9632]],[[65518,65518],\"mapped\",[9675]],[[65519,65528],\"disallowed\"],[[65529,65531],\"disallowed\"],[[65532,65532],\"disallowed\"],[[65533,65533],\"disallowed\"],[[65534,65535],\"disallowed\"],[[65536,65547],\"valid\"],[[65548,65548],\"disallowed\"],[[65549,65574],\"valid\"],[[65575,65575],\"disallowed\"],[[65576,65594],\"valid\"],[[65595,65595],\"disallowed\"],[[65596,65597],\"valid\"],[[65598,65598],\"disallowed\"],[[65599,65613],\"valid\"],[[65614,65615],\"disallowed\"],[[65616,65629],\"valid\"],[[65630,65663],\"disallowed\"],[[65664,65786],\"valid\"],[[65787,65791],\"disallowed\"],[[65792,65794],\"valid\",[],\"NV8\"],[[65795,65798],\"disallowed\"],[[65799,65843],\"valid\",[],\"NV8\"],[[65844,65846],\"disallowed\"],[[65847,65855],\"valid\",[],\"NV8\"],[[65856,65930],\"valid\",[],\"NV8\"],[[65931,65932],\"valid\",[],\"NV8\"],[[65933,65935],\"disallowed\"],[[65936,65947],\"valid\",[],\"NV8\"],[[65948,65951],\"disallowed\"],[[65952,65952],\"valid\",[],\"NV8\"],[[65953,65999],\"disallowed\"],[[66000,66044],\"valid\",[],\"NV8\"],[[66045,66045],\"valid\"],[[66046,66175],\"disallowed\"],[[66176,66204],\"valid\"],[[66205,66207],\"disallowed\"],[[66208,66256],\"valid\"],[[66257,66271],\"disallowed\"],[[66272,66272],\"valid\"],[[66273,66299],\"valid\",[],\"NV8\"],[[66300,66303],\"disallowed\"],[[66304,66334],\"valid\"],[[66335,66335],\"valid\"],[[66336,66339],\"valid\",[],\"NV8\"],[[66340,66351],\"disallowed\"],[[66352,66368],\"valid\"],[[66369,66369],\"valid\",[],\"NV8\"],[[66370,66377],\"valid\"],[[66378,66378],\"valid\",[],\"NV8\"],[[66379,66383],\"disallowed\"],[[66384,66426],\"valid\"],[[66427,66431],\"disallowed\"],[[66432,66461],\"valid\"],[[66462,66462],\"disallowed\"],[[66463,66463],\"valid\",[],\"NV8\"],[[66464,66499],\"valid\"],[[66500,66503],\"disallowed\"],[[66504,66511],\"valid\"],[[66512,66517],\"valid\",[],\"NV8\"],[[66518,66559],\"disallowed\"],[[66560,66560],\"mapped\",[66600]],[[66561,66561],\"mapped\",[66601]],[[66562,66562],\"mapped\",[66602]],[[66563,66563],\"mapped\",[66603]],[[66564,66564],\"mapped\",[66604]],[[66565,66565],\"mapped\",[66605]],[[66566,66566],\"mapped\",[66606]],[[66567,66567],\"mapped\",[66607]],[[66568,66568],\"mapped\",[66608]],[[66569,66569],\"mapped\",[66609]],[[66570,66570],\"mapped\",[66610]],[[66571,66571],\"mapped\",[66611]],[[66572,66572],\"mapped\",[66612]],[[66573,66573],\"mapped\",[66613]],[[66574,66574],\"mapped\",[66614]],[[66575,66575],\"mapped\",[66615]],[[66576,66576],\"mapped\",[66616]],[[66577,66577],\"mapped\",[66617]],[[66578,66578],\"mapped\",[66618]],[[66579,66579],\"mapped\",[66619]],[[66580,66580],\"mapped\",[66620]],[[66581,66581],\"mapped\",[66621]],[[66582,66582],\"mapped\",[66622]],[[66583,66583],\"mapped\",[66623]],[[66584,66584],\"mapped\",[66624]],[[66585,66585],\"mapped\",[66625]],[[66586,66586],\"mapped\",[66626]],[[66587,66587],\"mapped\",[66627]],[[66588,66588],\"mapped\",[66628]],[[66589,66589],\"mapped\",[66629]],[[66590,66590],\"mapped\",[66630]],[[66591,66591],\"mapped\",[66631]],[[66592,66592],\"mapped\",[66632]],[[66593,66593],\"mapped\",[66633]],[[66594,66594],\"mapped\",[66634]],[[66595,66595],\"mapped\",[66635]],[[66596,66596],\"mapped\",[66636]],[[66597,66597],\"mapped\",[66637]],[[66598,66598],\"mapped\",[66638]],[[66599,66599],\"mapped\",[66639]],[[66600,66637],\"valid\"],[[66638,66717],\"valid\"],[[66718,66719],\"disallowed\"],[[66720,66729],\"valid\"],[[66730,66815],\"disallowed\"],[[66816,66855],\"valid\"],[[66856,66863],\"disallowed\"],[[66864,66915],\"valid\"],[[66916,66926],\"disallowed\"],[[66927,66927],\"valid\",[],\"NV8\"],[[66928,67071],\"disallowed\"],[[67072,67382],\"valid\"],[[67383,67391],\"disallowed\"],[[67392,67413],\"valid\"],[[67414,67423],\"disallowed\"],[[67424,67431],\"valid\"],[[67432,67583],\"disallowed\"],[[67584,67589],\"valid\"],[[67590,67591],\"disallowed\"],[[67592,67592],\"valid\"],[[67593,67593],\"disallowed\"],[[67594,67637],\"valid\"],[[67638,67638],\"disallowed\"],[[67639,67640],\"valid\"],[[67641,67643],\"disallowed\"],[[67644,67644],\"valid\"],[[67645,67646],\"disallowed\"],[[67647,67647],\"valid\"],[[67648,67669],\"valid\"],[[67670,67670],\"disallowed\"],[[67671,67679],\"valid\",[],\"NV8\"],[[67680,67702],\"valid\"],[[67703,67711],\"valid\",[],\"NV8\"],[[67712,67742],\"valid\"],[[67743,67750],\"disallowed\"],[[67751,67759],\"valid\",[],\"NV8\"],[[67760,67807],\"disallowed\"],[[67808,67826],\"valid\"],[[67827,67827],\"disallowed\"],[[67828,67829],\"valid\"],[[67830,67834],\"disallowed\"],[[67835,67839],\"valid\",[],\"NV8\"],[[67840,67861],\"valid\"],[[67862,67865],\"valid\",[],\"NV8\"],[[67866,67867],\"valid\",[],\"NV8\"],[[67868,67870],\"disallowed\"],[[67871,67871],\"valid\",[],\"NV8\"],[[67872,67897],\"valid\"],[[67898,67902],\"disallowed\"],[[67903,67903],\"valid\",[],\"NV8\"],[[67904,67967],\"disallowed\"],[[67968,68023],\"valid\"],[[68024,68027],\"disallowed\"],[[68028,68029],\"valid\",[],\"NV8\"],[[68030,68031],\"valid\"],[[68032,68047],\"valid\",[],\"NV8\"],[[68048,68049],\"disallowed\"],[[68050,68095],\"valid\",[],\"NV8\"],[[68096,68099],\"valid\"],[[68100,68100],\"disallowed\"],[[68101,68102],\"valid\"],[[68103,68107],\"disallowed\"],[[68108,68115],\"valid\"],[[68116,68116],\"disallowed\"],[[68117,68119],\"valid\"],[[68120,68120],\"disallowed\"],[[68121,68147],\"valid\"],[[68148,68151],\"disallowed\"],[[68152,68154],\"valid\"],[[68155,68158],\"disallowed\"],[[68159,68159],\"valid\"],[[68160,68167],\"valid\",[],\"NV8\"],[[68168,68175],\"disallowed\"],[[68176,68184],\"valid\",[],\"NV8\"],[[68185,68191],\"disallowed\"],[[68192,68220],\"valid\"],[[68221,68223],\"valid\",[],\"NV8\"],[[68224,68252],\"valid\"],[[68253,68255],\"valid\",[],\"NV8\"],[[68256,68287],\"disallowed\"],[[68288,68295],\"valid\"],[[68296,68296],\"valid\",[],\"NV8\"],[[68297,68326],\"valid\"],[[68327,68330],\"disallowed\"],[[68331,68342],\"valid\",[],\"NV8\"],[[68343,68351],\"disallowed\"],[[68352,68405],\"valid\"],[[68406,68408],\"disallowed\"],[[68409,68415],\"valid\",[],\"NV8\"],[[68416,68437],\"valid\"],[[68438,68439],\"disallowed\"],[[68440,68447],\"valid\",[],\"NV8\"],[[68448,68466],\"valid\"],[[68467,68471],\"disallowed\"],[[68472,68479],\"valid\",[],\"NV8\"],[[68480,68497],\"valid\"],[[68498,68504],\"disallowed\"],[[68505,68508],\"valid\",[],\"NV8\"],[[68509,68520],\"disallowed\"],[[68521,68527],\"valid\",[],\"NV8\"],[[68528,68607],\"disallowed\"],[[68608,68680],\"valid\"],[[68681,68735],\"disallowed\"],[[68736,68736],\"mapped\",[68800]],[[68737,68737],\"mapped\",[68801]],[[68738,68738],\"mapped\",[68802]],[[68739,68739],\"mapped\",[68803]],[[68740,68740],\"mapped\",[68804]],[[68741,68741],\"mapped\",[68805]],[[68742,68742],\"mapped\",[68806]],[[68743,68743],\"mapped\",[68807]],[[68744,68744],\"mapped\",[68808]],[[68745,68745],\"mapped\",[68809]],[[68746,68746],\"mapped\",[68810]],[[68747,68747],\"mapped\",[68811]],[[68748,68748],\"mapped\",[68812]],[[68749,68749],\"mapped\",[68813]],[[68750,68750],\"mapped\",[68814]],[[68751,68751],\"mapped\",[68815]],[[68752,68752],\"mapped\",[68816]],[[68753,68753],\"mapped\",[68817]],[[68754,68754],\"mapped\",[68818]],[[68755,68755],\"mapped\",[68819]],[[68756,68756],\"mapped\",[68820]],[[68757,68757],\"mapped\",[68821]],[[68758,68758],\"mapped\",[68822]],[[68759,68759],\"mapped\",[68823]],[[68760,68760],\"mapped\",[68824]],[[68761,68761],\"mapped\",[68825]],[[68762,68762],\"mapped\",[68826]],[[68763,68763],\"mapped\",[68827]],[[68764,68764],\"mapped\",[68828]],[[68765,68765],\"mapped\",[68829]],[[68766,68766],\"mapped\",[68830]],[[68767,68767],\"mapped\",[68831]],[[68768,68768],\"mapped\",[68832]],[[68769,68769],\"mapped\",[68833]],[[68770,68770],\"mapped\",[68834]],[[68771,68771],\"mapped\",[68835]],[[68772,68772],\"mapped\",[68836]],[[68773,68773],\"mapped\",[68837]],[[68774,68774],\"mapped\",[68838]],[[68775,68775],\"mapped\",[68839]],[[68776,68776],\"mapped\",[68840]],[[68777,68777],\"mapped\",[68841]],[[68778,68778],\"mapped\",[68842]],[[68779,68779],\"mapped\",[68843]],[[68780,68780],\"mapped\",[68844]],[[68781,68781],\"mapped\",[68845]],[[68782,68782],\"mapped\",[68846]],[[68783,68783],\"mapped\",[68847]],[[68784,68784],\"mapped\",[68848]],[[68785,68785],\"mapped\",[68849]],[[68786,68786],\"mapped\",[68850]],[[68787,68799],\"disallowed\"],[[68800,68850],\"valid\"],[[68851,68857],\"disallowed\"],[[68858,68863],\"valid\",[],\"NV8\"],[[68864,69215],\"disallowed\"],[[69216,69246],\"valid\",[],\"NV8\"],[[69247,69631],\"disallowed\"],[[69632,69702],\"valid\"],[[69703,69709],\"valid\",[],\"NV8\"],[[69710,69713],\"disallowed\"],[[69714,69733],\"valid\",[],\"NV8\"],[[69734,69743],\"valid\"],[[69744,69758],\"disallowed\"],[[69759,69759],\"valid\"],[[69760,69818],\"valid\"],[[69819,69820],\"valid\",[],\"NV8\"],[[69821,69821],\"disallowed\"],[[69822,69825],\"valid\",[],\"NV8\"],[[69826,69839],\"disallowed\"],[[69840,69864],\"valid\"],[[69865,69871],\"disallowed\"],[[69872,69881],\"valid\"],[[69882,69887],\"disallowed\"],[[69888,69940],\"valid\"],[[69941,69941],\"disallowed\"],[[69942,69951],\"valid\"],[[69952,69955],\"valid\",[],\"NV8\"],[[69956,69967],\"disallowed\"],[[69968,70003],\"valid\"],[[70004,70005],\"valid\",[],\"NV8\"],[[70006,70006],\"valid\"],[[70007,70015],\"disallowed\"],[[70016,70084],\"valid\"],[[70085,70088],\"valid\",[],\"NV8\"],[[70089,70089],\"valid\",[],\"NV8\"],[[70090,70092],\"valid\"],[[70093,70093],\"valid\",[],\"NV8\"],[[70094,70095],\"disallowed\"],[[70096,70105],\"valid\"],[[70106,70106],\"valid\"],[[70107,70107],\"valid\",[],\"NV8\"],[[70108,70108],\"valid\"],[[70109,70111],\"valid\",[],\"NV8\"],[[70112,70112],\"disallowed\"],[[70113,70132],\"valid\",[],\"NV8\"],[[70133,70143],\"disallowed\"],[[70144,70161],\"valid\"],[[70162,70162],\"disallowed\"],[[70163,70199],\"valid\"],[[70200,70205],\"valid\",[],\"NV8\"],[[70206,70271],\"disallowed\"],[[70272,70278],\"valid\"],[[70279,70279],\"disallowed\"],[[70280,70280],\"valid\"],[[70281,70281],\"disallowed\"],[[70282,70285],\"valid\"],[[70286,70286],\"disallowed\"],[[70287,70301],\"valid\"],[[70302,70302],\"disallowed\"],[[70303,70312],\"valid\"],[[70313,70313],\"valid\",[],\"NV8\"],[[70314,70319],\"disallowed\"],[[70320,70378],\"valid\"],[[70379,70383],\"disallowed\"],[[70384,70393],\"valid\"],[[70394,70399],\"disallowed\"],[[70400,70400],\"valid\"],[[70401,70403],\"valid\"],[[70404,70404],\"disallowed\"],[[70405,70412],\"valid\"],[[70413,70414],\"disallowed\"],[[70415,70416],\"valid\"],[[70417,70418],\"disallowed\"],[[70419,70440],\"valid\"],[[70441,70441],\"disallowed\"],[[70442,70448],\"valid\"],[[70449,70449],\"disallowed\"],[[70450,70451],\"valid\"],[[70452,70452],\"disallowed\"],[[70453,70457],\"valid\"],[[70458,70459],\"disallowed\"],[[70460,70468],\"valid\"],[[70469,70470],\"disallowed\"],[[70471,70472],\"valid\"],[[70473,70474],\"disallowed\"],[[70475,70477],\"valid\"],[[70478,70479],\"disallowed\"],[[70480,70480],\"valid\"],[[70481,70486],\"disallowed\"],[[70487,70487],\"valid\"],[[70488,70492],\"disallowed\"],[[70493,70499],\"valid\"],[[70500,70501],\"disallowed\"],[[70502,70508],\"valid\"],[[70509,70511],\"disallowed\"],[[70512,70516],\"valid\"],[[70517,70783],\"disallowed\"],[[70784,70853],\"valid\"],[[70854,70854],\"valid\",[],\"NV8\"],[[70855,70855],\"valid\"],[[70856,70863],\"disallowed\"],[[70864,70873],\"valid\"],[[70874,71039],\"disallowed\"],[[71040,71093],\"valid\"],[[71094,71095],\"disallowed\"],[[71096,71104],\"valid\"],[[71105,71113],\"valid\",[],\"NV8\"],[[71114,71127],\"valid\",[],\"NV8\"],[[71128,71133],\"valid\"],[[71134,71167],\"disallowed\"],[[71168,71232],\"valid\"],[[71233,71235],\"valid\",[],\"NV8\"],[[71236,71236],\"valid\"],[[71237,71247],\"disallowed\"],[[71248,71257],\"valid\"],[[71258,71295],\"disallowed\"],[[71296,71351],\"valid\"],[[71352,71359],\"disallowed\"],[[71360,71369],\"valid\"],[[71370,71423],\"disallowed\"],[[71424,71449],\"valid\"],[[71450,71452],\"disallowed\"],[[71453,71467],\"valid\"],[[71468,71471],\"disallowed\"],[[71472,71481],\"valid\"],[[71482,71487],\"valid\",[],\"NV8\"],[[71488,71839],\"disallowed\"],[[71840,71840],\"mapped\",[71872]],[[71841,71841],\"mapped\",[71873]],[[71842,71842],\"mapped\",[71874]],[[71843,71843],\"mapped\",[71875]],[[71844,71844],\"mapped\",[71876]],[[71845,71845],\"mapped\",[71877]],[[71846,71846],\"mapped\",[71878]],[[71847,71847],\"mapped\",[71879]],[[71848,71848],\"mapped\",[71880]],[[71849,71849],\"mapped\",[71881]],[[71850,71850],\"mapped\",[71882]],[[71851,71851],\"mapped\",[71883]],[[71852,71852],\"mapped\",[71884]],[[71853,71853],\"mapped\",[71885]],[[71854,71854],\"mapped\",[71886]],[[71855,71855],\"mapped\",[71887]],[[71856,71856],\"mapped\",[71888]],[[71857,71857],\"mapped\",[71889]],[[71858,71858],\"mapped\",[71890]],[[71859,71859],\"mapped\",[71891]],[[71860,71860],\"mapped\",[71892]],[[71861,71861],\"mapped\",[71893]],[[71862,71862],\"mapped\",[71894]],[[71863,71863],\"mapped\",[71895]],[[71864,71864],\"mapped\",[71896]],[[71865,71865],\"mapped\",[71897]],[[71866,71866],\"mapped\",[71898]],[[71867,71867],\"mapped\",[71899]],[[71868,71868],\"mapped\",[71900]],[[71869,71869],\"mapped\",[71901]],[[71870,71870],\"mapped\",[71902]],[[71871,71871],\"mapped\",[71903]],[[71872,71913],\"valid\"],[[71914,71922],\"valid\",[],\"NV8\"],[[71923,71934],\"disallowed\"],[[71935,71935],\"valid\"],[[71936,72383],\"disallowed\"],[[72384,72440],\"valid\"],[[72441,73727],\"disallowed\"],[[73728,74606],\"valid\"],[[74607,74648],\"valid\"],[[74649,74649],\"valid\"],[[74650,74751],\"disallowed\"],[[74752,74850],\"valid\",[],\"NV8\"],[[74851,74862],\"valid\",[],\"NV8\"],[[74863,74863],\"disallowed\"],[[74864,74867],\"valid\",[],\"NV8\"],[[74868,74868],\"valid\",[],\"NV8\"],[[74869,74879],\"disallowed\"],[[74880,75075],\"valid\"],[[75076,77823],\"disallowed\"],[[77824,78894],\"valid\"],[[78895,82943],\"disallowed\"],[[82944,83526],\"valid\"],[[83527,92159],\"disallowed\"],[[92160,92728],\"valid\"],[[92729,92735],\"disallowed\"],[[92736,92766],\"valid\"],[[92767,92767],\"disallowed\"],[[92768,92777],\"valid\"],[[92778,92781],\"disallowed\"],[[92782,92783],\"valid\",[],\"NV8\"],[[92784,92879],\"disallowed\"],[[92880,92909],\"valid\"],[[92910,92911],\"disallowed\"],[[92912,92916],\"valid\"],[[92917,92917],\"valid\",[],\"NV8\"],[[92918,92927],\"disallowed\"],[[92928,92982],\"valid\"],[[92983,92991],\"valid\",[],\"NV8\"],[[92992,92995],\"valid\"],[[92996,92997],\"valid\",[],\"NV8\"],[[92998,93007],\"disallowed\"],[[93008,93017],\"valid\"],[[93018,93018],\"disallowed\"],[[93019,93025],\"valid\",[],\"NV8\"],[[93026,93026],\"disallowed\"],[[93027,93047],\"valid\"],[[93048,93052],\"disallowed\"],[[93053,93071],\"valid\"],[[93072,93951],\"disallowed\"],[[93952,94020],\"valid\"],[[94021,94031],\"disallowed\"],[[94032,94078],\"valid\"],[[94079,94094],\"disallowed\"],[[94095,94111],\"valid\"],[[94112,110591],\"disallowed\"],[[110592,110593],\"valid\"],[[110594,113663],\"disallowed\"],[[113664,113770],\"valid\"],[[113771,113775],\"disallowed\"],[[113776,113788],\"valid\"],[[113789,113791],\"disallowed\"],[[113792,113800],\"valid\"],[[113801,113807],\"disallowed\"],[[113808,113817],\"valid\"],[[113818,113819],\"disallowed\"],[[113820,113820],\"valid\",[],\"NV8\"],[[113821,113822],\"valid\"],[[113823,113823],\"valid\",[],\"NV8\"],[[113824,113827],\"ignored\"],[[113828,118783],\"disallowed\"],[[118784,119029],\"valid\",[],\"NV8\"],[[119030,119039],\"disallowed\"],[[119040,119078],\"valid\",[],\"NV8\"],[[119079,119080],\"disallowed\"],[[119081,119081],\"valid\",[],\"NV8\"],[[119082,119133],\"valid\",[],\"NV8\"],[[119134,119134],\"mapped\",[119127,119141]],[[119135,119135],\"mapped\",[119128,119141]],[[119136,119136],\"mapped\",[119128,119141,119150]],[[119137,119137],\"mapped\",[119128,119141,119151]],[[119138,119138],\"mapped\",[119128,119141,119152]],[[119139,119139],\"mapped\",[119128,119141,119153]],[[119140,119140],\"mapped\",[119128,119141,119154]],[[119141,119154],\"valid\",[],\"NV8\"],[[119155,119162],\"disallowed\"],[[119163,119226],\"valid\",[],\"NV8\"],[[119227,119227],\"mapped\",[119225,119141]],[[119228,119228],\"mapped\",[119226,119141]],[[119229,119229],\"mapped\",[119225,119141,119150]],[[119230,119230],\"mapped\",[119226,119141,119150]],[[119231,119231],\"mapped\",[119225,119141,119151]],[[119232,119232],\"mapped\",[119226,119141,119151]],[[119233,119261],\"valid\",[],\"NV8\"],[[119262,119272],\"valid\",[],\"NV8\"],[[119273,119295],\"disallowed\"],[[119296,119365],\"valid\",[],\"NV8\"],[[119366,119551],\"disallowed\"],[[119552,119638],\"valid\",[],\"NV8\"],[[119639,119647],\"disallowed\"],[[119648,119665],\"valid\",[],\"NV8\"],[[119666,119807],\"disallowed\"],[[119808,119808],\"mapped\",[97]],[[119809,119809],\"mapped\",[98]],[[119810,119810],\"mapped\",[99]],[[119811,119811],\"mapped\",[100]],[[119812,119812],\"mapped\",[101]],[[119813,119813],\"mapped\",[102]],[[119814,119814],\"mapped\",[103]],[[119815,119815],\"mapped\",[104]],[[119816,119816],\"mapped\",[105]],[[119817,119817],\"mapped\",[106]],[[119818,119818],\"mapped\",[107]],[[119819,119819],\"mapped\",[108]],[[119820,119820],\"mapped\",[109]],[[119821,119821],\"mapped\",[110]],[[119822,119822],\"mapped\",[111]],[[119823,119823],\"mapped\",[112]],[[119824,119824],\"mapped\",[113]],[[119825,119825],\"mapped\",[114]],[[119826,119826],\"mapped\",[115]],[[119827,119827],\"mapped\",[116]],[[119828,119828],\"mapped\",[117]],[[119829,119829],\"mapped\",[118]],[[119830,119830],\"mapped\",[119]],[[119831,119831],\"mapped\",[120]],[[119832,119832],\"mapped\",[121]],[[119833,119833],\"mapped\",[122]],[[119834,119834],\"mapped\",[97]],[[119835,119835],\"mapped\",[98]],[[119836,119836],\"mapped\",[99]],[[119837,119837],\"mapped\",[100]],[[119838,119838],\"mapped\",[101]],[[119839,119839],\"mapped\",[102]],[[119840,119840],\"mapped\",[103]],[[119841,119841],\"mapped\",[104]],[[119842,119842],\"mapped\",[105]],[[119843,119843],\"mapped\",[106]],[[119844,119844],\"mapped\",[107]],[[119845,119845],\"mapped\",[108]],[[119846,119846],\"mapped\",[109]],[[119847,119847],\"mapped\",[110]],[[119848,119848],\"mapped\",[111]],[[119849,119849],\"mapped\",[112]],[[119850,119850],\"mapped\",[113]],[[119851,119851],\"mapped\",[114]],[[119852,119852],\"mapped\",[115]],[[119853,119853],\"mapped\",[116]],[[119854,119854],\"mapped\",[117]],[[119855,119855],\"mapped\",[118]],[[119856,119856],\"mapped\",[119]],[[119857,119857],\"mapped\",[120]],[[119858,119858],\"mapped\",[121]],[[119859,119859],\"mapped\",[122]],[[119860,119860],\"mapped\",[97]],[[119861,119861],\"mapped\",[98]],[[119862,119862],\"mapped\",[99]],[[119863,119863],\"mapped\",[100]],[[119864,119864],\"mapped\",[101]],[[119865,119865],\"mapped\",[102]],[[119866,119866],\"mapped\",[103]],[[119867,119867],\"mapped\",[104]],[[119868,119868],\"mapped\",[105]],[[119869,119869],\"mapped\",[106]],[[119870,119870],\"mapped\",[107]],[[119871,119871],\"mapped\",[108]],[[119872,119872],\"mapped\",[109]],[[119873,119873],\"mapped\",[110]],[[119874,119874],\"mapped\",[111]],[[119875,119875],\"mapped\",[112]],[[119876,119876],\"mapped\",[113]],[[119877,119877],\"mapped\",[114]],[[119878,119878],\"mapped\",[115]],[[119879,119879],\"mapped\",[116]],[[119880,119880],\"mapped\",[117]],[[119881,119881],\"mapped\",[118]],[[119882,119882],\"mapped\",[119]],[[119883,119883],\"mapped\",[120]],[[119884,119884],\"mapped\",[121]],[[119885,119885],\"mapped\",[122]],[[119886,119886],\"mapped\",[97]],[[119887,119887],\"mapped\",[98]],[[119888,119888],\"mapped\",[99]],[[119889,119889],\"mapped\",[100]],[[119890,119890],\"mapped\",[101]],[[119891,119891],\"mapped\",[102]],[[119892,119892],\"mapped\",[103]],[[119893,119893],\"disallowed\"],[[119894,119894],\"mapped\",[105]],[[119895,119895],\"mapped\",[106]],[[119896,119896],\"mapped\",[107]],[[119897,119897],\"mapped\",[108]],[[119898,119898],\"mapped\",[109]],[[119899,119899],\"mapped\",[110]],[[119900,119900],\"mapped\",[111]],[[119901,119901],\"mapped\",[112]],[[119902,119902],\"mapped\",[113]],[[119903,119903],\"mapped\",[114]],[[119904,119904],\"mapped\",[115]],[[119905,119905],\"mapped\",[116]],[[119906,119906],\"mapped\",[117]],[[119907,119907],\"mapped\",[118]],[[119908,119908],\"mapped\",[119]],[[119909,119909],\"mapped\",[120]],[[119910,119910],\"mapped\",[121]],[[119911,119911],\"mapped\",[122]],[[119912,119912],\"mapped\",[97]],[[119913,119913],\"mapped\",[98]],[[119914,119914],\"mapped\",[99]],[[119915,119915],\"mapped\",[100]],[[119916,119916],\"mapped\",[101]],[[119917,119917],\"mapped\",[102]],[[119918,119918],\"mapped\",[103]],[[119919,119919],\"mapped\",[104]],[[119920,119920],\"mapped\",[105]],[[119921,119921],\"mapped\",[106]],[[119922,119922],\"mapped\",[107]],[[119923,119923],\"mapped\",[108]],[[119924,119924],\"mapped\",[109]],[[119925,119925],\"mapped\",[110]],[[119926,119926],\"mapped\",[111]],[[119927,119927],\"mapped\",[112]],[[119928,119928],\"mapped\",[113]],[[119929,119929],\"mapped\",[114]],[[119930,119930],\"mapped\",[115]],[[119931,119931],\"mapped\",[116]],[[119932,119932],\"mapped\",[117]],[[119933,119933],\"mapped\",[118]],[[119934,119934],\"mapped\",[119]],[[119935,119935],\"mapped\",[120]],[[119936,119936],\"mapped\",[121]],[[119937,119937],\"mapped\",[122]],[[119938,119938],\"mapped\",[97]],[[119939,119939],\"mapped\",[98]],[[119940,119940],\"mapped\",[99]],[[119941,119941],\"mapped\",[100]],[[119942,119942],\"mapped\",[101]],[[119943,119943],\"mapped\",[102]],[[119944,119944],\"mapped\",[103]],[[119945,119945],\"mapped\",[104]],[[119946,119946],\"mapped\",[105]],[[119947,119947],\"mapped\",[106]],[[119948,119948],\"mapped\",[107]],[[119949,119949],\"mapped\",[108]],[[119950,119950],\"mapped\",[109]],[[119951,119951],\"mapped\",[110]],[[119952,119952],\"mapped\",[111]],[[119953,119953],\"mapped\",[112]],[[119954,119954],\"mapped\",[113]],[[119955,119955],\"mapped\",[114]],[[119956,119956],\"mapped\",[115]],[[119957,119957],\"mapped\",[116]],[[119958,119958],\"mapped\",[117]],[[119959,119959],\"mapped\",[118]],[[119960,119960],\"mapped\",[119]],[[119961,119961],\"mapped\",[120]],[[119962,119962],\"mapped\",[121]],[[119963,119963],\"mapped\",[122]],[[119964,119964],\"mapped\",[97]],[[119965,119965],\"disallowed\"],[[119966,119966],\"mapped\",[99]],[[119967,119967],\"mapped\",[100]],[[119968,119969],\"disallowed\"],[[119970,119970],\"mapped\",[103]],[[119971,119972],\"disallowed\"],[[119973,119973],\"mapped\",[106]],[[119974,119974],\"mapped\",[107]],[[119975,119976],\"disallowed\"],[[119977,119977],\"mapped\",[110]],[[119978,119978],\"mapped\",[111]],[[119979,119979],\"mapped\",[112]],[[119980,119980],\"mapped\",[113]],[[119981,119981],\"disallowed\"],[[119982,119982],\"mapped\",[115]],[[119983,119983],\"mapped\",[116]],[[119984,119984],\"mapped\",[117]],[[119985,119985],\"mapped\",[118]],[[119986,119986],\"mapped\",[119]],[[119987,119987],\"mapped\",[120]],[[119988,119988],\"mapped\",[121]],[[119989,119989],\"mapped\",[122]],[[119990,119990],\"mapped\",[97]],[[119991,119991],\"mapped\",[98]],[[119992,119992],\"mapped\",[99]],[[119993,119993],\"mapped\",[100]],[[119994,119994],\"disallowed\"],[[119995,119995],\"mapped\",[102]],[[119996,119996],\"disallowed\"],[[119997,119997],\"mapped\",[104]],[[119998,119998],\"mapped\",[105]],[[119999,119999],\"mapped\",[106]],[[120000,120000],\"mapped\",[107]],[[120001,120001],\"mapped\",[108]],[[120002,120002],\"mapped\",[109]],[[120003,120003],\"mapped\",[110]],[[120004,120004],\"disallowed\"],[[120005,120005],\"mapped\",[112]],[[120006,120006],\"mapped\",[113]],[[120007,120007],\"mapped\",[114]],[[120008,120008],\"mapped\",[115]],[[120009,120009],\"mapped\",[116]],[[120010,120010],\"mapped\",[117]],[[120011,120011],\"mapped\",[118]],[[120012,120012],\"mapped\",[119]],[[120013,120013],\"mapped\",[120]],[[120014,120014],\"mapped\",[121]],[[120015,120015],\"mapped\",[122]],[[120016,120016],\"mapped\",[97]],[[120017,120017],\"mapped\",[98]],[[120018,120018],\"mapped\",[99]],[[120019,120019],\"mapped\",[100]],[[120020,120020],\"mapped\",[101]],[[120021,120021],\"mapped\",[102]],[[120022,120022],\"mapped\",[103]],[[120023,120023],\"mapped\",[104]],[[120024,120024],\"mapped\",[105]],[[120025,120025],\"mapped\",[106]],[[120026,120026],\"mapped\",[107]],[[120027,120027],\"mapped\",[108]],[[120028,120028],\"mapped\",[109]],[[120029,120029],\"mapped\",[110]],[[120030,120030],\"mapped\",[111]],[[120031,120031],\"mapped\",[112]],[[120032,120032],\"mapped\",[113]],[[120033,120033],\"mapped\",[114]],[[120034,120034],\"mapped\",[115]],[[120035,120035],\"mapped\",[116]],[[120036,120036],\"mapped\",[117]],[[120037,120037],\"mapped\",[118]],[[120038,120038],\"mapped\",[119]],[[120039,120039],\"mapped\",[120]],[[120040,120040],\"mapped\",[121]],[[120041,120041],\"mapped\",[122]],[[120042,120042],\"mapped\",[97]],[[120043,120043],\"mapped\",[98]],[[120044,120044],\"mapped\",[99]],[[120045,120045],\"mapped\",[100]],[[120046,120046],\"mapped\",[101]],[[120047,120047],\"mapped\",[102]],[[120048,120048],\"mapped\",[103]],[[120049,120049],\"mapped\",[104]],[[120050,120050],\"mapped\",[105]],[[120051,120051],\"mapped\",[106]],[[120052,120052],\"mapped\",[107]],[[120053,120053],\"mapped\",[108]],[[120054,120054],\"mapped\",[109]],[[120055,120055],\"mapped\",[110]],[[120056,120056],\"mapped\",[111]],[[120057,120057],\"mapped\",[112]],[[120058,120058],\"mapped\",[113]],[[120059,120059],\"mapped\",[114]],[[120060,120060],\"mapped\",[115]],[[120061,120061],\"mapped\",[116]],[[120062,120062],\"mapped\",[117]],[[120063,120063],\"mapped\",[118]],[[120064,120064],\"mapped\",[119]],[[120065,120065],\"mapped\",[120]],[[120066,120066],\"mapped\",[121]],[[120067,120067],\"mapped\",[122]],[[120068,120068],\"mapped\",[97]],[[120069,120069],\"mapped\",[98]],[[120070,120070],\"disallowed\"],[[120071,120071],\"mapped\",[100]],[[120072,120072],\"mapped\",[101]],[[120073,120073],\"mapped\",[102]],[[120074,120074],\"mapped\",[103]],[[120075,120076],\"disallowed\"],[[120077,120077],\"mapped\",[106]],[[120078,120078],\"mapped\",[107]],[[120079,120079],\"mapped\",[108]],[[120080,120080],\"mapped\",[109]],[[120081,120081],\"mapped\",[110]],[[120082,120082],\"mapped\",[111]],[[120083,120083],\"mapped\",[112]],[[120084,120084],\"mapped\",[113]],[[120085,120085],\"disallowed\"],[[120086,120086],\"mapped\",[115]],[[120087,120087],\"mapped\",[116]],[[120088,120088],\"mapped\",[117]],[[120089,120089],\"mapped\",[118]],[[120090,120090],\"mapped\",[119]],[[120091,120091],\"mapped\",[120]],[[120092,120092],\"mapped\",[121]],[[120093,120093],\"disallowed\"],[[120094,120094],\"mapped\",[97]],[[120095,120095],\"mapped\",[98]],[[120096,120096],\"mapped\",[99]],[[120097,120097],\"mapped\",[100]],[[120098,120098],\"mapped\",[101]],[[120099,120099],\"mapped\",[102]],[[120100,120100],\"mapped\",[103]],[[120101,120101],\"mapped\",[104]],[[120102,120102],\"mapped\",[105]],[[120103,120103],\"mapped\",[106]],[[120104,120104],\"mapped\",[107]],[[120105,120105],\"mapped\",[108]],[[120106,120106],\"mapped\",[109]],[[120107,120107],\"mapped\",[110]],[[120108,120108],\"mapped\",[111]],[[120109,120109],\"mapped\",[112]],[[120110,120110],\"mapped\",[113]],[[120111,120111],\"mapped\",[114]],[[120112,120112],\"mapped\",[115]],[[120113,120113],\"mapped\",[116]],[[120114,120114],\"mapped\",[117]],[[120115,120115],\"mapped\",[118]],[[120116,120116],\"mapped\",[119]],[[120117,120117],\"mapped\",[120]],[[120118,120118],\"mapped\",[121]],[[120119,120119],\"mapped\",[122]],[[120120,120120],\"mapped\",[97]],[[120121,120121],\"mapped\",[98]],[[120122,120122],\"disallowed\"],[[120123,120123],\"mapped\",[100]],[[120124,120124],\"mapped\",[101]],[[120125,120125],\"mapped\",[102]],[[120126,120126],\"mapped\",[103]],[[120127,120127],\"disallowed\"],[[120128,120128],\"mapped\",[105]],[[120129,120129],\"mapped\",[106]],[[120130,120130],\"mapped\",[107]],[[120131,120131],\"mapped\",[108]],[[120132,120132],\"mapped\",[109]],[[120133,120133],\"disallowed\"],[[120134,120134],\"mapped\",[111]],[[120135,120137],\"disallowed\"],[[120138,120138],\"mapped\",[115]],[[120139,120139],\"mapped\",[116]],[[120140,120140],\"mapped\",[117]],[[120141,120141],\"mapped\",[118]],[[120142,120142],\"mapped\",[119]],[[120143,120143],\"mapped\",[120]],[[120144,120144],\"mapped\",[121]],[[120145,120145],\"disallowed\"],[[120146,120146],\"mapped\",[97]],[[120147,120147],\"mapped\",[98]],[[120148,120148],\"mapped\",[99]],[[120149,120149],\"mapped\",[100]],[[120150,120150],\"mapped\",[101]],[[120151,120151],\"mapped\",[102]],[[120152,120152],\"mapped\",[103]],[[120153,120153],\"mapped\",[104]],[[120154,120154],\"mapped\",[105]],[[120155,120155],\"mapped\",[106]],[[120156,120156],\"mapped\",[107]],[[120157,120157],\"mapped\",[108]],[[120158,120158],\"mapped\",[109]],[[120159,120159],\"mapped\",[110]],[[120160,120160],\"mapped\",[111]],[[120161,120161],\"mapped\",[112]],[[120162,120162],\"mapped\",[113]],[[120163,120163],\"mapped\",[114]],[[120164,120164],\"mapped\",[115]],[[120165,120165],\"mapped\",[116]],[[120166,120166],\"mapped\",[117]],[[120167,120167],\"mapped\",[118]],[[120168,120168],\"mapped\",[119]],[[120169,120169],\"mapped\",[120]],[[120170,120170],\"mapped\",[121]],[[120171,120171],\"mapped\",[122]],[[120172,120172],\"mapped\",[97]],[[120173,120173],\"mapped\",[98]],[[120174,120174],\"mapped\",[99]],[[120175,120175],\"mapped\",[100]],[[120176,120176],\"mapped\",[101]],[[120177,120177],\"mapped\",[102]],[[120178,120178],\"mapped\",[103]],[[120179,120179],\"mapped\",[104]],[[120180,120180],\"mapped\",[105]],[[120181,120181],\"mapped\",[106]],[[120182,120182],\"mapped\",[107]],[[120183,120183],\"mapped\",[108]],[[120184,120184],\"mapped\",[109]],[[120185,120185],\"mapped\",[110]],[[120186,120186],\"mapped\",[111]],[[120187,120187],\"mapped\",[112]],[[120188,120188],\"mapped\",[113]],[[120189,120189],\"mapped\",[114]],[[120190,120190],\"mapped\",[115]],[[120191,120191],\"mapped\",[116]],[[120192,120192],\"mapped\",[117]],[[120193,120193],\"mapped\",[118]],[[120194,120194],\"mapped\",[119]],[[120195,120195],\"mapped\",[120]],[[120196,120196],\"mapped\",[121]],[[120197,120197],\"mapped\",[122]],[[120198,120198],\"mapped\",[97]],[[120199,120199],\"mapped\",[98]],[[120200,120200],\"mapped\",[99]],[[120201,120201],\"mapped\",[100]],[[120202,120202],\"mapped\",[101]],[[120203,120203],\"mapped\",[102]],[[120204,120204],\"mapped\",[103]],[[120205,120205],\"mapped\",[104]],[[120206,120206],\"mapped\",[105]],[[120207,120207],\"mapped\",[106]],[[120208,120208],\"mapped\",[107]],[[120209,120209],\"mapped\",[108]],[[120210,120210],\"mapped\",[109]],[[120211,120211],\"mapped\",[110]],[[120212,120212],\"mapped\",[111]],[[120213,120213],\"mapped\",[112]],[[120214,120214],\"mapped\",[113]],[[120215,120215],\"mapped\",[114]],[[120216,120216],\"mapped\",[115]],[[120217,120217],\"mapped\",[116]],[[120218,120218],\"mapped\",[117]],[[120219,120219],\"mapped\",[118]],[[120220,120220],\"mapped\",[119]],[[120221,120221],\"mapped\",[120]],[[120222,120222],\"mapped\",[121]],[[120223,120223],\"mapped\",[122]],[[120224,120224],\"mapped\",[97]],[[120225,120225],\"mapped\",[98]],[[120226,120226],\"mapped\",[99]],[[120227,120227],\"mapped\",[100]],[[120228,120228],\"mapped\",[101]],[[120229,120229],\"mapped\",[102]],[[120230,120230],\"mapped\",[103]],[[120231,120231],\"mapped\",[104]],[[120232,120232],\"mapped\",[105]],[[120233,120233],\"mapped\",[106]],[[120234,120234],\"mapped\",[107]],[[120235,120235],\"mapped\",[108]],[[120236,120236],\"mapped\",[109]],[[120237,120237],\"mapped\",[110]],[[120238,120238],\"mapped\",[111]],[[120239,120239],\"mapped\",[112]],[[120240,120240],\"mapped\",[113]],[[120241,120241],\"mapped\",[114]],[[120242,120242],\"mapped\",[115]],[[120243,120243],\"mapped\",[116]],[[120244,120244],\"mapped\",[117]],[[120245,120245],\"mapped\",[118]],[[120246,120246],\"mapped\",[119]],[[120247,120247],\"mapped\",[120]],[[120248,120248],\"mapped\",[121]],[[120249,120249],\"mapped\",[122]],[[120250,120250],\"mapped\",[97]],[[120251,120251],\"mapped\",[98]],[[120252,120252],\"mapped\",[99]],[[120253,120253],\"mapped\",[100]],[[120254,120254],\"mapped\",[101]],[[120255,120255],\"mapped\",[102]],[[120256,120256],\"mapped\",[103]],[[120257,120257],\"mapped\",[104]],[[120258,120258],\"mapped\",[105]],[[120259,120259],\"mapped\",[106]],[[120260,120260],\"mapped\",[107]],[[120261,120261],\"mapped\",[108]],[[120262,120262],\"mapped\",[109]],[[120263,120263],\"mapped\",[110]],[[120264,120264],\"mapped\",[111]],[[120265,120265],\"mapped\",[112]],[[120266,120266],\"mapped\",[113]],[[120267,120267],\"mapped\",[114]],[[120268,120268],\"mapped\",[115]],[[120269,120269],\"mapped\",[116]],[[120270,120270],\"mapped\",[117]],[[120271,120271],\"mapped\",[118]],[[120272,120272],\"mapped\",[119]],[[120273,120273],\"mapped\",[120]],[[120274,120274],\"mapped\",[121]],[[120275,120275],\"mapped\",[122]],[[120276,120276],\"mapped\",[97]],[[120277,120277],\"mapped\",[98]],[[120278,120278],\"mapped\",[99]],[[120279,120279],\"mapped\",[100]],[[120280,120280],\"mapped\",[101]],[[120281,120281],\"mapped\",[102]],[[120282,120282],\"mapped\",[103]],[[120283,120283],\"mapped\",[104]],[[120284,120284],\"mapped\",[105]],[[120285,120285],\"mapped\",[106]],[[120286,120286],\"mapped\",[107]],[[120287,120287],\"mapped\",[108]],[[120288,120288],\"mapped\",[109]],[[120289,120289],\"mapped\",[110]],[[120290,120290],\"mapped\",[111]],[[120291,120291],\"mapped\",[112]],[[120292,120292],\"mapped\",[113]],[[120293,120293],\"mapped\",[114]],[[120294,120294],\"mapped\",[115]],[[120295,120295],\"mapped\",[116]],[[120296,120296],\"mapped\",[117]],[[120297,120297],\"mapped\",[118]],[[120298,120298],\"mapped\",[119]],[[120299,120299],\"mapped\",[120]],[[120300,120300],\"mapped\",[121]],[[120301,120301],\"mapped\",[122]],[[120302,120302],\"mapped\",[97]],[[120303,120303],\"mapped\",[98]],[[120304,120304],\"mapped\",[99]],[[120305,120305],\"mapped\",[100]],[[120306,120306],\"mapped\",[101]],[[120307,120307],\"mapped\",[102]],[[120308,120308],\"mapped\",[103]],[[120309,120309],\"mapped\",[104]],[[120310,120310],\"mapped\",[105]],[[120311,120311],\"mapped\",[106]],[[120312,120312],\"mapped\",[107]],[[120313,120313],\"mapped\",[108]],[[120314,120314],\"mapped\",[109]],[[120315,120315],\"mapped\",[110]],[[120316,120316],\"mapped\",[111]],[[120317,120317],\"mapped\",[112]],[[120318,120318],\"mapped\",[113]],[[120319,120319],\"mapped\",[114]],[[120320,120320],\"mapped\",[115]],[[120321,120321],\"mapped\",[116]],[[120322,120322],\"mapped\",[117]],[[120323,120323],\"mapped\",[118]],[[120324,120324],\"mapped\",[119]],[[120325,120325],\"mapped\",[120]],[[120326,120326],\"mapped\",[121]],[[120327,120327],\"mapped\",[122]],[[120328,120328],\"mapped\",[97]],[[120329,120329],\"mapped\",[98]],[[120330,120330],\"mapped\",[99]],[[120331,120331],\"mapped\",[100]],[[120332,120332],\"mapped\",[101]],[[120333,120333],\"mapped\",[102]],[[120334,120334],\"mapped\",[103]],[[120335,120335],\"mapped\",[104]],[[120336,120336],\"mapped\",[105]],[[120337,120337],\"mapped\",[106]],[[120338,120338],\"mapped\",[107]],[[120339,120339],\"mapped\",[108]],[[120340,120340],\"mapped\",[109]],[[120341,120341],\"mapped\",[110]],[[120342,120342],\"mapped\",[111]],[[120343,120343],\"mapped\",[112]],[[120344,120344],\"mapped\",[113]],[[120345,120345],\"mapped\",[114]],[[120346,120346],\"mapped\",[115]],[[120347,120347],\"mapped\",[116]],[[120348,120348],\"mapped\",[117]],[[120349,120349],\"mapped\",[118]],[[120350,120350],\"mapped\",[119]],[[120351,120351],\"mapped\",[120]],[[120352,120352],\"mapped\",[121]],[[120353,120353],\"mapped\",[122]],[[120354,120354],\"mapped\",[97]],[[120355,120355],\"mapped\",[98]],[[120356,120356],\"mapped\",[99]],[[120357,120357],\"mapped\",[100]],[[120358,120358],\"mapped\",[101]],[[120359,120359],\"mapped\",[102]],[[120360,120360],\"mapped\",[103]],[[120361,120361],\"mapped\",[104]],[[120362,120362],\"mapped\",[105]],[[120363,120363],\"mapped\",[106]],[[120364,120364],\"mapped\",[107]],[[120365,120365],\"mapped\",[108]],[[120366,120366],\"mapped\",[109]],[[120367,120367],\"mapped\",[110]],[[120368,120368],\"mapped\",[111]],[[120369,120369],\"mapped\",[112]],[[120370,120370],\"mapped\",[113]],[[120371,120371],\"mapped\",[114]],[[120372,120372],\"mapped\",[115]],[[120373,120373],\"mapped\",[116]],[[120374,120374],\"mapped\",[117]],[[120375,120375],\"mapped\",[118]],[[120376,120376],\"mapped\",[119]],[[120377,120377],\"mapped\",[120]],[[120378,120378],\"mapped\",[121]],[[120379,120379],\"mapped\",[122]],[[120380,120380],\"mapped\",[97]],[[120381,120381],\"mapped\",[98]],[[120382,120382],\"mapped\",[99]],[[120383,120383],\"mapped\",[100]],[[120384,120384],\"mapped\",[101]],[[120385,120385],\"mapped\",[102]],[[120386,120386],\"mapped\",[103]],[[120387,120387],\"mapped\",[104]],[[120388,120388],\"mapped\",[105]],[[120389,120389],\"mapped\",[106]],[[120390,120390],\"mapped\",[107]],[[120391,120391],\"mapped\",[108]],[[120392,120392],\"mapped\",[109]],[[120393,120393],\"mapped\",[110]],[[120394,120394],\"mapped\",[111]],[[120395,120395],\"mapped\",[112]],[[120396,120396],\"mapped\",[113]],[[120397,120397],\"mapped\",[114]],[[120398,120398],\"mapped\",[115]],[[120399,120399],\"mapped\",[116]],[[120400,120400],\"mapped\",[117]],[[120401,120401],\"mapped\",[118]],[[120402,120402],\"mapped\",[119]],[[120403,120403],\"mapped\",[120]],[[120404,120404],\"mapped\",[121]],[[120405,120405],\"mapped\",[122]],[[120406,120406],\"mapped\",[97]],[[120407,120407],\"mapped\",[98]],[[120408,120408],\"mapped\",[99]],[[120409,120409],\"mapped\",[100]],[[120410,120410],\"mapped\",[101]],[[120411,120411],\"mapped\",[102]],[[120412,120412],\"mapped\",[103]],[[120413,120413],\"mapped\",[104]],[[120414,120414],\"mapped\",[105]],[[120415,120415],\"mapped\",[106]],[[120416,120416],\"mapped\",[107]],[[120417,120417],\"mapped\",[108]],[[120418,120418],\"mapped\",[109]],[[120419,120419],\"mapped\",[110]],[[120420,120420],\"mapped\",[111]],[[120421,120421],\"mapped\",[112]],[[120422,120422],\"mapped\",[113]],[[120423,120423],\"mapped\",[114]],[[120424,120424],\"mapped\",[115]],[[120425,120425],\"mapped\",[116]],[[120426,120426],\"mapped\",[117]],[[120427,120427],\"mapped\",[118]],[[120428,120428],\"mapped\",[119]],[[120429,120429],\"mapped\",[120]],[[120430,120430],\"mapped\",[121]],[[120431,120431],\"mapped\",[122]],[[120432,120432],\"mapped\",[97]],[[120433,120433],\"mapped\",[98]],[[120434,120434],\"mapped\",[99]],[[120435,120435],\"mapped\",[100]],[[120436,120436],\"mapped\",[101]],[[120437,120437],\"mapped\",[102]],[[120438,120438],\"mapped\",[103]],[[120439,120439],\"mapped\",[104]],[[120440,120440],\"mapped\",[105]],[[120441,120441],\"mapped\",[106]],[[120442,120442],\"mapped\",[107]],[[120443,120443],\"mapped\",[108]],[[120444,120444],\"mapped\",[109]],[[120445,120445],\"mapped\",[110]],[[120446,120446],\"mapped\",[111]],[[120447,120447],\"mapped\",[112]],[[120448,120448],\"mapped\",[113]],[[120449,120449],\"mapped\",[114]],[[120450,120450],\"mapped\",[115]],[[120451,120451],\"mapped\",[116]],[[120452,120452],\"mapped\",[117]],[[120453,120453],\"mapped\",[118]],[[120454,120454],\"mapped\",[119]],[[120455,120455],\"mapped\",[120]],[[120456,120456],\"mapped\",[121]],[[120457,120457],\"mapped\",[122]],[[120458,120458],\"mapped\",[97]],[[120459,120459],\"mapped\",[98]],[[120460,120460],\"mapped\",[99]],[[120461,120461],\"mapped\",[100]],[[120462,120462],\"mapped\",[101]],[[120463,120463],\"mapped\",[102]],[[120464,120464],\"mapped\",[103]],[[120465,120465],\"mapped\",[104]],[[120466,120466],\"mapped\",[105]],[[120467,120467],\"mapped\",[106]],[[120468,120468],\"mapped\",[107]],[[120469,120469],\"mapped\",[108]],[[120470,120470],\"mapped\",[109]],[[120471,120471],\"mapped\",[110]],[[120472,120472],\"mapped\",[111]],[[120473,120473],\"mapped\",[112]],[[120474,120474],\"mapped\",[113]],[[120475,120475],\"mapped\",[114]],[[120476,120476],\"mapped\",[115]],[[120477,120477],\"mapped\",[116]],[[120478,120478],\"mapped\",[117]],[[120479,120479],\"mapped\",[118]],[[120480,120480],\"mapped\",[119]],[[120481,120481],\"mapped\",[120]],[[120482,120482],\"mapped\",[121]],[[120483,120483],\"mapped\",[122]],[[120484,120484],\"mapped\",[305]],[[120485,120485],\"mapped\",[567]],[[120486,120487],\"disallowed\"],[[120488,120488],\"mapped\",[945]],[[120489,120489],\"mapped\",[946]],[[120490,120490],\"mapped\",[947]],[[120491,120491],\"mapped\",[948]],[[120492,120492],\"mapped\",[949]],[[120493,120493],\"mapped\",[950]],[[120494,120494],\"mapped\",[951]],[[120495,120495],\"mapped\",[952]],[[120496,120496],\"mapped\",[953]],[[120497,120497],\"mapped\",[954]],[[120498,120498],\"mapped\",[955]],[[120499,120499],\"mapped\",[956]],[[120500,120500],\"mapped\",[957]],[[120501,120501],\"mapped\",[958]],[[120502,120502],\"mapped\",[959]],[[120503,120503],\"mapped\",[960]],[[120504,120504],\"mapped\",[961]],[[120505,120505],\"mapped\",[952]],[[120506,120506],\"mapped\",[963]],[[120507,120507],\"mapped\",[964]],[[120508,120508],\"mapped\",[965]],[[120509,120509],\"mapped\",[966]],[[120510,120510],\"mapped\",[967]],[[120511,120511],\"mapped\",[968]],[[120512,120512],\"mapped\",[969]],[[120513,120513],\"mapped\",[8711]],[[120514,120514],\"mapped\",[945]],[[120515,120515],\"mapped\",[946]],[[120516,120516],\"mapped\",[947]],[[120517,120517],\"mapped\",[948]],[[120518,120518],\"mapped\",[949]],[[120519,120519],\"mapped\",[950]],[[120520,120520],\"mapped\",[951]],[[120521,120521],\"mapped\",[952]],[[120522,120522],\"mapped\",[953]],[[120523,120523],\"mapped\",[954]],[[120524,120524],\"mapped\",[955]],[[120525,120525],\"mapped\",[956]],[[120526,120526],\"mapped\",[957]],[[120527,120527],\"mapped\",[958]],[[120528,120528],\"mapped\",[959]],[[120529,120529],\"mapped\",[960]],[[120530,120530],\"mapped\",[961]],[[120531,120532],\"mapped\",[963]],[[120533,120533],\"mapped\",[964]],[[120534,120534],\"mapped\",[965]],[[120535,120535],\"mapped\",[966]],[[120536,120536],\"mapped\",[967]],[[120537,120537],\"mapped\",[968]],[[120538,120538],\"mapped\",[969]],[[120539,120539],\"mapped\",[8706]],[[120540,120540],\"mapped\",[949]],[[120541,120541],\"mapped\",[952]],[[120542,120542],\"mapped\",[954]],[[120543,120543],\"mapped\",[966]],[[120544,120544],\"mapped\",[961]],[[120545,120545],\"mapped\",[960]],[[120546,120546],\"mapped\",[945]],[[120547,120547],\"mapped\",[946]],[[120548,120548],\"mapped\",[947]],[[120549,120549],\"mapped\",[948]],[[120550,120550],\"mapped\",[949]],[[120551,120551],\"mapped\",[950]],[[120552,120552],\"mapped\",[951]],[[120553,120553],\"mapped\",[952]],[[120554,120554],\"mapped\",[953]],[[120555,120555],\"mapped\",[954]],[[120556,120556],\"mapped\",[955]],[[120557,120557],\"mapped\",[956]],[[120558,120558],\"mapped\",[957]],[[120559,120559],\"mapped\",[958]],[[120560,120560],\"mapped\",[959]],[[120561,120561],\"mapped\",[960]],[[120562,120562],\"mapped\",[961]],[[120563,120563],\"mapped\",[952]],[[120564,120564],\"mapped\",[963]],[[120565,120565],\"mapped\",[964]],[[120566,120566],\"mapped\",[965]],[[120567,120567],\"mapped\",[966]],[[120568,120568],\"mapped\",[967]],[[120569,120569],\"mapped\",[968]],[[120570,120570],\"mapped\",[969]],[[120571,120571],\"mapped\",[8711]],[[120572,120572],\"mapped\",[945]],[[120573,120573],\"mapped\",[946]],[[120574,120574],\"mapped\",[947]],[[120575,120575],\"mapped\",[948]],[[120576,120576],\"mapped\",[949]],[[120577,120577],\"mapped\",[950]],[[120578,120578],\"mapped\",[951]],[[120579,120579],\"mapped\",[952]],[[120580,120580],\"mapped\",[953]],[[120581,120581],\"mapped\",[954]],[[120582,120582],\"mapped\",[955]],[[120583,120583],\"mapped\",[956]],[[120584,120584],\"mapped\",[957]],[[120585,120585],\"mapped\",[958]],[[120586,120586],\"mapped\",[959]],[[120587,120587],\"mapped\",[960]],[[120588,120588],\"mapped\",[961]],[[120589,120590],\"mapped\",[963]],[[120591,120591],\"mapped\",[964]],[[120592,120592],\"mapped\",[965]],[[120593,120593],\"mapped\",[966]],[[120594,120594],\"mapped\",[967]],[[120595,120595],\"mapped\",[968]],[[120596,120596],\"mapped\",[969]],[[120597,120597],\"mapped\",[8706]],[[120598,120598],\"mapped\",[949]],[[120599,120599],\"mapped\",[952]],[[120600,120600],\"mapped\",[954]],[[120601,120601],\"mapped\",[966]],[[120602,120602],\"mapped\",[961]],[[120603,120603],\"mapped\",[960]],[[120604,120604],\"mapped\",[945]],[[120605,120605],\"mapped\",[946]],[[120606,120606],\"mapped\",[947]],[[120607,120607],\"mapped\",[948]],[[120608,120608],\"mapped\",[949]],[[120609,120609],\"mapped\",[950]],[[120610,120610],\"mapped\",[951]],[[120611,120611],\"mapped\",[952]],[[120612,120612],\"mapped\",[953]],[[120613,120613],\"mapped\",[954]],[[120614,120614],\"mapped\",[955]],[[120615,120615],\"mapped\",[956]],[[120616,120616],\"mapped\",[957]],[[120617,120617],\"mapped\",[958]],[[120618,120618],\"mapped\",[959]],[[120619,120619],\"mapped\",[960]],[[120620,120620],\"mapped\",[961]],[[120621,120621],\"mapped\",[952]],[[120622,120622],\"mapped\",[963]],[[120623,120623],\"mapped\",[964]],[[120624,120624],\"mapped\",[965]],[[120625,120625],\"mapped\",[966]],[[120626,120626],\"mapped\",[967]],[[120627,120627],\"mapped\",[968]],[[120628,120628],\"mapped\",[969]],[[120629,120629],\"mapped\",[8711]],[[120630,120630],\"mapped\",[945]],[[120631,120631],\"mapped\",[946]],[[120632,120632],\"mapped\",[947]],[[120633,120633],\"mapped\",[948]],[[120634,120634],\"mapped\",[949]],[[120635,120635],\"mapped\",[950]],[[120636,120636],\"mapped\",[951]],[[120637,120637],\"mapped\",[952]],[[120638,120638],\"mapped\",[953]],[[120639,120639],\"mapped\",[954]],[[120640,120640],\"mapped\",[955]],[[120641,120641],\"mapped\",[956]],[[120642,120642],\"mapped\",[957]],[[120643,120643],\"mapped\",[958]],[[120644,120644],\"mapped\",[959]],[[120645,120645],\"mapped\",[960]],[[120646,120646],\"mapped\",[961]],[[120647,120648],\"mapped\",[963]],[[120649,120649],\"mapped\",[964]],[[120650,120650],\"mapped\",[965]],[[120651,120651],\"mapped\",[966]],[[120652,120652],\"mapped\",[967]],[[120653,120653],\"mapped\",[968]],[[120654,120654],\"mapped\",[969]],[[120655,120655],\"mapped\",[8706]],[[120656,120656],\"mapped\",[949]],[[120657,120657],\"mapped\",[952]],[[120658,120658],\"mapped\",[954]],[[120659,120659],\"mapped\",[966]],[[120660,120660],\"mapped\",[961]],[[120661,120661],\"mapped\",[960]],[[120662,120662],\"mapped\",[945]],[[120663,120663],\"mapped\",[946]],[[120664,120664],\"mapped\",[947]],[[120665,120665],\"mapped\",[948]],[[120666,120666],\"mapped\",[949]],[[120667,120667],\"mapped\",[950]],[[120668,120668],\"mapped\",[951]],[[120669,120669],\"mapped\",[952]],[[120670,120670],\"mapped\",[953]],[[120671,120671],\"mapped\",[954]],[[120672,120672],\"mapped\",[955]],[[120673,120673],\"mapped\",[956]],[[120674,120674],\"mapped\",[957]],[[120675,120675],\"mapped\",[958]],[[120676,120676],\"mapped\",[959]],[[120677,120677],\"mapped\",[960]],[[120678,120678],\"mapped\",[961]],[[120679,120679],\"mapped\",[952]],[[120680,120680],\"mapped\",[963]],[[120681,120681],\"mapped\",[964]],[[120682,120682],\"mapped\",[965]],[[120683,120683],\"mapped\",[966]],[[120684,120684],\"mapped\",[967]],[[120685,120685],\"mapped\",[968]],[[120686,120686],\"mapped\",[969]],[[120687,120687],\"mapped\",[8711]],[[120688,120688],\"mapped\",[945]],[[120689,120689],\"mapped\",[946]],[[120690,120690],\"mapped\",[947]],[[120691,120691],\"mapped\",[948]],[[120692,120692],\"mapped\",[949]],[[120693,120693],\"mapped\",[950]],[[120694,120694],\"mapped\",[951]],[[120695,120695],\"mapped\",[952]],[[120696,120696],\"mapped\",[953]],[[120697,120697],\"mapped\",[954]],[[120698,120698],\"mapped\",[955]],[[120699,120699],\"mapped\",[956]],[[120700,120700],\"mapped\",[957]],[[120701,120701],\"mapped\",[958]],[[120702,120702],\"mapped\",[959]],[[120703,120703],\"mapped\",[960]],[[120704,120704],\"mapped\",[961]],[[120705,120706],\"mapped\",[963]],[[120707,120707],\"mapped\",[964]],[[120708,120708],\"mapped\",[965]],[[120709,120709],\"mapped\",[966]],[[120710,120710],\"mapped\",[967]],[[120711,120711],\"mapped\",[968]],[[120712,120712],\"mapped\",[969]],[[120713,120713],\"mapped\",[8706]],[[120714,120714],\"mapped\",[949]],[[120715,120715],\"mapped\",[952]],[[120716,120716],\"mapped\",[954]],[[120717,120717],\"mapped\",[966]],[[120718,120718],\"mapped\",[961]],[[120719,120719],\"mapped\",[960]],[[120720,120720],\"mapped\",[945]],[[120721,120721],\"mapped\",[946]],[[120722,120722],\"mapped\",[947]],[[120723,120723],\"mapped\",[948]],[[120724,120724],\"mapped\",[949]],[[120725,120725],\"mapped\",[950]],[[120726,120726],\"mapped\",[951]],[[120727,120727],\"mapped\",[952]],[[120728,120728],\"mapped\",[953]],[[120729,120729],\"mapped\",[954]],[[120730,120730],\"mapped\",[955]],[[120731,120731],\"mapped\",[956]],[[120732,120732],\"mapped\",[957]],[[120733,120733],\"mapped\",[958]],[[120734,120734],\"mapped\",[959]],[[120735,120735],\"mapped\",[960]],[[120736,120736],\"mapped\",[961]],[[120737,120737],\"mapped\",[952]],[[120738,120738],\"mapped\",[963]],[[120739,120739],\"mapped\",[964]],[[120740,120740],\"mapped\",[965]],[[120741,120741],\"mapped\",[966]],[[120742,120742],\"mapped\",[967]],[[120743,120743],\"mapped\",[968]],[[120744,120744],\"mapped\",[969]],[[120745,120745],\"mapped\",[8711]],[[120746,120746],\"mapped\",[945]],[[120747,120747],\"mapped\",[946]],[[120748,120748],\"mapped\",[947]],[[120749,120749],\"mapped\",[948]],[[120750,120750],\"mapped\",[949]],[[120751,120751],\"mapped\",[950]],[[120752,120752],\"mapped\",[951]],[[120753,120753],\"mapped\",[952]],[[120754,120754],\"mapped\",[953]],[[120755,120755],\"mapped\",[954]],[[120756,120756],\"mapped\",[955]],[[120757,120757],\"mapped\",[956]],[[120758,120758],\"mapped\",[957]],[[120759,120759],\"mapped\",[958]],[[120760,120760],\"mapped\",[959]],[[120761,120761],\"mapped\",[960]],[[120762,120762],\"mapped\",[961]],[[120763,120764],\"mapped\",[963]],[[120765,120765],\"mapped\",[964]],[[120766,120766],\"mapped\",[965]],[[120767,120767],\"mapped\",[966]],[[120768,120768],\"mapped\",[967]],[[120769,120769],\"mapped\",[968]],[[120770,120770],\"mapped\",[969]],[[120771,120771],\"mapped\",[8706]],[[120772,120772],\"mapped\",[949]],[[120773,120773],\"mapped\",[952]],[[120774,120774],\"mapped\",[954]],[[120775,120775],\"mapped\",[966]],[[120776,120776],\"mapped\",[961]],[[120777,120777],\"mapped\",[960]],[[120778,120779],\"mapped\",[989]],[[120780,120781],\"disallowed\"],[[120782,120782],\"mapped\",[48]],[[120783,120783],\"mapped\",[49]],[[120784,120784],\"mapped\",[50]],[[120785,120785],\"mapped\",[51]],[[120786,120786],\"mapped\",[52]],[[120787,120787],\"mapped\",[53]],[[120788,120788],\"mapped\",[54]],[[120789,120789],\"mapped\",[55]],[[120790,120790],\"mapped\",[56]],[[120791,120791],\"mapped\",[57]],[[120792,120792],\"mapped\",[48]],[[120793,120793],\"mapped\",[49]],[[120794,120794],\"mapped\",[50]],[[120795,120795],\"mapped\",[51]],[[120796,120796],\"mapped\",[52]],[[120797,120797],\"mapped\",[53]],[[120798,120798],\"mapped\",[54]],[[120799,120799],\"mapped\",[55]],[[120800,120800],\"mapped\",[56]],[[120801,120801],\"mapped\",[57]],[[120802,120802],\"mapped\",[48]],[[120803,120803],\"mapped\",[49]],[[120804,120804],\"mapped\",[50]],[[120805,120805],\"mapped\",[51]],[[120806,120806],\"mapped\",[52]],[[120807,120807],\"mapped\",[53]],[[120808,120808],\"mapped\",[54]],[[120809,120809],\"mapped\",[55]],[[120810,120810],\"mapped\",[56]],[[120811,120811],\"mapped\",[57]],[[120812,120812],\"mapped\",[48]],[[120813,120813],\"mapped\",[49]],[[120814,120814],\"mapped\",[50]],[[120815,120815],\"mapped\",[51]],[[120816,120816],\"mapped\",[52]],[[120817,120817],\"mapped\",[53]],[[120818,120818],\"mapped\",[54]],[[120819,120819],\"mapped\",[55]],[[120820,120820],\"mapped\",[56]],[[120821,120821],\"mapped\",[57]],[[120822,120822],\"mapped\",[48]],[[120823,120823],\"mapped\",[49]],[[120824,120824],\"mapped\",[50]],[[120825,120825],\"mapped\",[51]],[[120826,120826],\"mapped\",[52]],[[120827,120827],\"mapped\",[53]],[[120828,120828],\"mapped\",[54]],[[120829,120829],\"mapped\",[55]],[[120830,120830],\"mapped\",[56]],[[120831,120831],\"mapped\",[57]],[[120832,121343],\"valid\",[],\"NV8\"],[[121344,121398],\"valid\"],[[121399,121402],\"valid\",[],\"NV8\"],[[121403,121452],\"valid\"],[[121453,121460],\"valid\",[],\"NV8\"],[[121461,121461],\"valid\"],[[121462,121475],\"valid\",[],\"NV8\"],[[121476,121476],\"valid\"],[[121477,121483],\"valid\",[],\"NV8\"],[[121484,121498],\"disallowed\"],[[121499,121503],\"valid\"],[[121504,121504],\"disallowed\"],[[121505,121519],\"valid\"],[[121520,124927],\"disallowed\"],[[124928,125124],\"valid\"],[[125125,125126],\"disallowed\"],[[125127,125135],\"valid\",[],\"NV8\"],[[125136,125142],\"valid\"],[[125143,126463],\"disallowed\"],[[126464,126464],\"mapped\",[1575]],[[126465,126465],\"mapped\",[1576]],[[126466,126466],\"mapped\",[1580]],[[126467,126467],\"mapped\",[1583]],[[126468,126468],\"disallowed\"],[[126469,126469],\"mapped\",[1608]],[[126470,126470],\"mapped\",[1586]],[[126471,126471],\"mapped\",[1581]],[[126472,126472],\"mapped\",[1591]],[[126473,126473],\"mapped\",[1610]],[[126474,126474],\"mapped\",[1603]],[[126475,126475],\"mapped\",[1604]],[[126476,126476],\"mapped\",[1605]],[[126477,126477],\"mapped\",[1606]],[[126478,126478],\"mapped\",[1587]],[[126479,126479],\"mapped\",[1593]],[[126480,126480],\"mapped\",[1601]],[[126481,126481],\"mapped\",[1589]],[[126482,126482],\"mapped\",[1602]],[[126483,126483],\"mapped\",[1585]],[[126484,126484],\"mapped\",[1588]],[[126485,126485],\"mapped\",[1578]],[[126486,126486],\"mapped\",[1579]],[[126487,126487],\"mapped\",[1582]],[[126488,126488],\"mapped\",[1584]],[[126489,126489],\"mapped\",[1590]],[[126490,126490],\"mapped\",[1592]],[[126491,126491],\"mapped\",[1594]],[[126492,126492],\"mapped\",[1646]],[[126493,126493],\"mapped\",[1722]],[[126494,126494],\"mapped\",[1697]],[[126495,126495],\"mapped\",[1647]],[[126496,126496],\"disallowed\"],[[126497,126497],\"mapped\",[1576]],[[126498,126498],\"mapped\",[1580]],[[126499,126499],\"disallowed\"],[[126500,126500],\"mapped\",[1607]],[[126501,126502],\"disallowed\"],[[126503,126503],\"mapped\",[1581]],[[126504,126504],\"disallowed\"],[[126505,126505],\"mapped\",[1610]],[[126506,126506],\"mapped\",[1603]],[[126507,126507],\"mapped\",[1604]],[[126508,126508],\"mapped\",[1605]],[[126509,126509],\"mapped\",[1606]],[[126510,126510],\"mapped\",[1587]],[[126511,126511],\"mapped\",[1593]],[[126512,126512],\"mapped\",[1601]],[[126513,126513],\"mapped\",[1589]],[[126514,126514],\"mapped\",[1602]],[[126515,126515],\"disallowed\"],[[126516,126516],\"mapped\",[1588]],[[126517,126517],\"mapped\",[1578]],[[126518,126518],\"mapped\",[1579]],[[126519,126519],\"mapped\",[1582]],[[126520,126520],\"disallowed\"],[[126521,126521],\"mapped\",[1590]],[[126522,126522],\"disallowed\"],[[126523,126523],\"mapped\",[1594]],[[126524,126529],\"disallowed\"],[[126530,126530],\"mapped\",[1580]],[[126531,126534],\"disallowed\"],[[126535,126535],\"mapped\",[1581]],[[126536,126536],\"disallowed\"],[[126537,126537],\"mapped\",[1610]],[[126538,126538],\"disallowed\"],[[126539,126539],\"mapped\",[1604]],[[126540,126540],\"disallowed\"],[[126541,126541],\"mapped\",[1606]],[[126542,126542],\"mapped\",[1587]],[[126543,126543],\"mapped\",[1593]],[[126544,126544],\"disallowed\"],[[126545,126545],\"mapped\",[1589]],[[126546,126546],\"mapped\",[1602]],[[126547,126547],\"disallowed\"],[[126548,126548],\"mapped\",[1588]],[[126549,126550],\"disallowed\"],[[126551,126551],\"mapped\",[1582]],[[126552,126552],\"disallowed\"],[[126553,126553],\"mapped\",[1590]],[[126554,126554],\"disallowed\"],[[126555,126555],\"mapped\",[1594]],[[126556,126556],\"disallowed\"],[[126557,126557],\"mapped\",[1722]],[[126558,126558],\"disallowed\"],[[126559,126559],\"mapped\",[1647]],[[126560,126560],\"disallowed\"],[[126561,126561],\"mapped\",[1576]],[[126562,126562],\"mapped\",[1580]],[[126563,126563],\"disallowed\"],[[126564,126564],\"mapped\",[1607]],[[126565,126566],\"disallowed\"],[[126567,126567],\"mapped\",[1581]],[[126568,126568],\"mapped\",[1591]],[[126569,126569],\"mapped\",[1610]],[[126570,126570],\"mapped\",[1603]],[[126571,126571],\"disallowed\"],[[126572,126572],\"mapped\",[1605]],[[126573,126573],\"mapped\",[1606]],[[126574,126574],\"mapped\",[1587]],[[126575,126575],\"mapped\",[1593]],[[126576,126576],\"mapped\",[1601]],[[126577,126577],\"mapped\",[1589]],[[126578,126578],\"mapped\",[1602]],[[126579,126579],\"disallowed\"],[[126580,126580],\"mapped\",[1588]],[[126581,126581],\"mapped\",[1578]],[[126582,126582],\"mapped\",[1579]],[[126583,126583],\"mapped\",[1582]],[[126584,126584],\"disallowed\"],[[126585,126585],\"mapped\",[1590]],[[126586,126586],\"mapped\",[1592]],[[126587,126587],\"mapped\",[1594]],[[126588,126588],\"mapped\",[1646]],[[126589,126589],\"disallowed\"],[[126590,126590],\"mapped\",[1697]],[[126591,126591],\"disallowed\"],[[126592,126592],\"mapped\",[1575]],[[126593,126593],\"mapped\",[1576]],[[126594,126594],\"mapped\",[1580]],[[126595,126595],\"mapped\",[1583]],[[126596,126596],\"mapped\",[1607]],[[126597,126597],\"mapped\",[1608]],[[126598,126598],\"mapped\",[1586]],[[126599,126599],\"mapped\",[1581]],[[126600,126600],\"mapped\",[1591]],[[126601,126601],\"mapped\",[1610]],[[126602,126602],\"disallowed\"],[[126603,126603],\"mapped\",[1604]],[[126604,126604],\"mapped\",[1605]],[[126605,126605],\"mapped\",[1606]],[[126606,126606],\"mapped\",[1587]],[[126607,126607],\"mapped\",[1593]],[[126608,126608],\"mapped\",[1601]],[[126609,126609],\"mapped\",[1589]],[[126610,126610],\"mapped\",[1602]],[[126611,126611],\"mapped\",[1585]],[[126612,126612],\"mapped\",[1588]],[[126613,126613],\"mapped\",[1578]],[[126614,126614],\"mapped\",[1579]],[[126615,126615],\"mapped\",[1582]],[[126616,126616],\"mapped\",[1584]],[[126617,126617],\"mapped\",[1590]],[[126618,126618],\"mapped\",[1592]],[[126619,126619],\"mapped\",[1594]],[[126620,126624],\"disallowed\"],[[126625,126625],\"mapped\",[1576]],[[126626,126626],\"mapped\",[1580]],[[126627,126627],\"mapped\",[1583]],[[126628,126628],\"disallowed\"],[[126629,126629],\"mapped\",[1608]],[[126630,126630],\"mapped\",[1586]],[[126631,126631],\"mapped\",[1581]],[[126632,126632],\"mapped\",[1591]],[[126633,126633],\"mapped\",[1610]],[[126634,126634],\"disallowed\"],[[126635,126635],\"mapped\",[1604]],[[126636,126636],\"mapped\",[1605]],[[126637,126637],\"mapped\",[1606]],[[126638,126638],\"mapped\",[1587]],[[126639,126639],\"mapped\",[1593]],[[126640,126640],\"mapped\",[1601]],[[126641,126641],\"mapped\",[1589]],[[126642,126642],\"mapped\",[1602]],[[126643,126643],\"mapped\",[1585]],[[126644,126644],\"mapped\",[1588]],[[126645,126645],\"mapped\",[1578]],[[126646,126646],\"mapped\",[1579]],[[126647,126647],\"mapped\",[1582]],[[126648,126648],\"mapped\",[1584]],[[126649,126649],\"mapped\",[1590]],[[126650,126650],\"mapped\",[1592]],[[126651,126651],\"mapped\",[1594]],[[126652,126703],\"disallowed\"],[[126704,126705],\"valid\",[],\"NV8\"],[[126706,126975],\"disallowed\"],[[126976,127019],\"valid\",[],\"NV8\"],[[127020,127023],\"disallowed\"],[[127024,127123],\"valid\",[],\"NV8\"],[[127124,127135],\"disallowed\"],[[127136,127150],\"valid\",[],\"NV8\"],[[127151,127152],\"disallowed\"],[[127153,127166],\"valid\",[],\"NV8\"],[[127167,127167],\"valid\",[],\"NV8\"],[[127168,127168],\"disallowed\"],[[127169,127183],\"valid\",[],\"NV8\"],[[127184,127184],\"disallowed\"],[[127185,127199],\"valid\",[],\"NV8\"],[[127200,127221],\"valid\",[],\"NV8\"],[[127222,127231],\"disallowed\"],[[127232,127232],\"disallowed\"],[[127233,127233],\"disallowed_STD3_mapped\",[48,44]],[[127234,127234],\"disallowed_STD3_mapped\",[49,44]],[[127235,127235],\"disallowed_STD3_mapped\",[50,44]],[[127236,127236],\"disallowed_STD3_mapped\",[51,44]],[[127237,127237],\"disallowed_STD3_mapped\",[52,44]],[[127238,127238],\"disallowed_STD3_mapped\",[53,44]],[[127239,127239],\"disallowed_STD3_mapped\",[54,44]],[[127240,127240],\"disallowed_STD3_mapped\",[55,44]],[[127241,127241],\"disallowed_STD3_mapped\",[56,44]],[[127242,127242],\"disallowed_STD3_mapped\",[57,44]],[[127243,127244],\"valid\",[],\"NV8\"],[[127245,127247],\"disallowed\"],[[127248,127248],\"disallowed_STD3_mapped\",[40,97,41]],[[127249,127249],\"disallowed_STD3_mapped\",[40,98,41]],[[127250,127250],\"disallowed_STD3_mapped\",[40,99,41]],[[127251,127251],\"disallowed_STD3_mapped\",[40,100,41]],[[127252,127252],\"disallowed_STD3_mapped\",[40,101,41]],[[127253,127253],\"disallowed_STD3_mapped\",[40,102,41]],[[127254,127254],\"disallowed_STD3_mapped\",[40,103,41]],[[127255,127255],\"disallowed_STD3_mapped\",[40,104,41]],[[127256,127256],\"disallowed_STD3_mapped\",[40,105,41]],[[127257,127257],\"disallowed_STD3_mapped\",[40,106,41]],[[127258,127258],\"disallowed_STD3_mapped\",[40,107,41]],[[127259,127259],\"disallowed_STD3_mapped\",[40,108,41]],[[127260,127260],\"disallowed_STD3_mapped\",[40,109,41]],[[127261,127261],\"disallowed_STD3_mapped\",[40,110,41]],[[127262,127262],\"disallowed_STD3_mapped\",[40,111,41]],[[127263,127263],\"disallowed_STD3_mapped\",[40,112,41]],[[127264,127264],\"disallowed_STD3_mapped\",[40,113,41]],[[127265,127265],\"disallowed_STD3_mapped\",[40,114,41]],[[127266,127266],\"disallowed_STD3_mapped\",[40,115,41]],[[127267,127267],\"disallowed_STD3_mapped\",[40,116,41]],[[127268,127268],\"disallowed_STD3_mapped\",[40,117,41]],[[127269,127269],\"disallowed_STD3_mapped\",[40,118,41]],[[127270,127270],\"disallowed_STD3_mapped\",[40,119,41]],[[127271,127271],\"disallowed_STD3_mapped\",[40,120,41]],[[127272,127272],\"disallowed_STD3_mapped\",[40,121,41]],[[127273,127273],\"disallowed_STD3_mapped\",[40,122,41]],[[127274,127274],\"mapped\",[12308,115,12309]],[[127275,127275],\"mapped\",[99]],[[127276,127276],\"mapped\",[114]],[[127277,127277],\"mapped\",[99,100]],[[127278,127278],\"mapped\",[119,122]],[[127279,127279],\"disallowed\"],[[127280,127280],\"mapped\",[97]],[[127281,127281],\"mapped\",[98]],[[127282,127282],\"mapped\",[99]],[[127283,127283],\"mapped\",[100]],[[127284,127284],\"mapped\",[101]],[[127285,127285],\"mapped\",[102]],[[127286,127286],\"mapped\",[103]],[[127287,127287],\"mapped\",[104]],[[127288,127288],\"mapped\",[105]],[[127289,127289],\"mapped\",[106]],[[127290,127290],\"mapped\",[107]],[[127291,127291],\"mapped\",[108]],[[127292,127292],\"mapped\",[109]],[[127293,127293],\"mapped\",[110]],[[127294,127294],\"mapped\",[111]],[[127295,127295],\"mapped\",[112]],[[127296,127296],\"mapped\",[113]],[[127297,127297],\"mapped\",[114]],[[127298,127298],\"mapped\",[115]],[[127299,127299],\"mapped\",[116]],[[127300,127300],\"mapped\",[117]],[[127301,127301],\"mapped\",[118]],[[127302,127302],\"mapped\",[119]],[[127303,127303],\"mapped\",[120]],[[127304,127304],\"mapped\",[121]],[[127305,127305],\"mapped\",[122]],[[127306,127306],\"mapped\",[104,118]],[[127307,127307],\"mapped\",[109,118]],[[127308,127308],\"mapped\",[115,100]],[[127309,127309],\"mapped\",[115,115]],[[127310,127310],\"mapped\",[112,112,118]],[[127311,127311],\"mapped\",[119,99]],[[127312,127318],\"valid\",[],\"NV8\"],[[127319,127319],\"valid\",[],\"NV8\"],[[127320,127326],\"valid\",[],\"NV8\"],[[127327,127327],\"valid\",[],\"NV8\"],[[127328,127337],\"valid\",[],\"NV8\"],[[127338,127338],\"mapped\",[109,99]],[[127339,127339],\"mapped\",[109,100]],[[127340,127343],\"disallowed\"],[[127344,127352],\"valid\",[],\"NV8\"],[[127353,127353],\"valid\",[],\"NV8\"],[[127354,127354],\"valid\",[],\"NV8\"],[[127355,127356],\"valid\",[],\"NV8\"],[[127357,127358],\"valid\",[],\"NV8\"],[[127359,127359],\"valid\",[],\"NV8\"],[[127360,127369],\"valid\",[],\"NV8\"],[[127370,127373],\"valid\",[],\"NV8\"],[[127374,127375],\"valid\",[],\"NV8\"],[[127376,127376],\"mapped\",[100,106]],[[127377,127386],\"valid\",[],\"NV8\"],[[127387,127461],\"disallowed\"],[[127462,127487],\"valid\",[],\"NV8\"],[[127488,127488],\"mapped\",[12411,12363]],[[127489,127489],\"mapped\",[12467,12467]],[[127490,127490],\"mapped\",[12469]],[[127491,127503],\"disallowed\"],[[127504,127504],\"mapped\",[25163]],[[127505,127505],\"mapped\",[23383]],[[127506,127506],\"mapped\",[21452]],[[127507,127507],\"mapped\",[12487]],[[127508,127508],\"mapped\",[20108]],[[127509,127509],\"mapped\",[22810]],[[127510,127510],\"mapped\",[35299]],[[127511,127511],\"mapped\",[22825]],[[127512,127512],\"mapped\",[20132]],[[127513,127513],\"mapped\",[26144]],[[127514,127514],\"mapped\",[28961]],[[127515,127515],\"mapped\",[26009]],[[127516,127516],\"mapped\",[21069]],[[127517,127517],\"mapped\",[24460]],[[127518,127518],\"mapped\",[20877]],[[127519,127519],\"mapped\",[26032]],[[127520,127520],\"mapped\",[21021]],[[127521,127521],\"mapped\",[32066]],[[127522,127522],\"mapped\",[29983]],[[127523,127523],\"mapped\",[36009]],[[127524,127524],\"mapped\",[22768]],[[127525,127525],\"mapped\",[21561]],[[127526,127526],\"mapped\",[28436]],[[127527,127527],\"mapped\",[25237]],[[127528,127528],\"mapped\",[25429]],[[127529,127529],\"mapped\",[19968]],[[127530,127530],\"mapped\",[19977]],[[127531,127531],\"mapped\",[36938]],[[127532,127532],\"mapped\",[24038]],[[127533,127533],\"mapped\",[20013]],[[127534,127534],\"mapped\",[21491]],[[127535,127535],\"mapped\",[25351]],[[127536,127536],\"mapped\",[36208]],[[127537,127537],\"mapped\",[25171]],[[127538,127538],\"mapped\",[31105]],[[127539,127539],\"mapped\",[31354]],[[127540,127540],\"mapped\",[21512]],[[127541,127541],\"mapped\",[28288]],[[127542,127542],\"mapped\",[26377]],[[127543,127543],\"mapped\",[26376]],[[127544,127544],\"mapped\",[30003]],[[127545,127545],\"mapped\",[21106]],[[127546,127546],\"mapped\",[21942]],[[127547,127551],\"disallowed\"],[[127552,127552],\"mapped\",[12308,26412,12309]],[[127553,127553],\"mapped\",[12308,19977,12309]],[[127554,127554],\"mapped\",[12308,20108,12309]],[[127555,127555],\"mapped\",[12308,23433,12309]],[[127556,127556],\"mapped\",[12308,28857,12309]],[[127557,127557],\"mapped\",[12308,25171,12309]],[[127558,127558],\"mapped\",[12308,30423,12309]],[[127559,127559],\"mapped\",[12308,21213,12309]],[[127560,127560],\"mapped\",[12308,25943,12309]],[[127561,127567],\"disallowed\"],[[127568,127568],\"mapped\",[24471]],[[127569,127569],\"mapped\",[21487]],[[127570,127743],\"disallowed\"],[[127744,127776],\"valid\",[],\"NV8\"],[[127777,127788],\"valid\",[],\"NV8\"],[[127789,127791],\"valid\",[],\"NV8\"],[[127792,127797],\"valid\",[],\"NV8\"],[[127798,127798],\"valid\",[],\"NV8\"],[[127799,127868],\"valid\",[],\"NV8\"],[[127869,127869],\"valid\",[],\"NV8\"],[[127870,127871],\"valid\",[],\"NV8\"],[[127872,127891],\"valid\",[],\"NV8\"],[[127892,127903],\"valid\",[],\"NV8\"],[[127904,127940],\"valid\",[],\"NV8\"],[[127941,127941],\"valid\",[],\"NV8\"],[[127942,127946],\"valid\",[],\"NV8\"],[[127947,127950],\"valid\",[],\"NV8\"],[[127951,127955],\"valid\",[],\"NV8\"],[[127956,127967],\"valid\",[],\"NV8\"],[[127968,127984],\"valid\",[],\"NV8\"],[[127985,127991],\"valid\",[],\"NV8\"],[[127992,127999],\"valid\",[],\"NV8\"],[[128000,128062],\"valid\",[],\"NV8\"],[[128063,128063],\"valid\",[],\"NV8\"],[[128064,128064],\"valid\",[],\"NV8\"],[[128065,128065],\"valid\",[],\"NV8\"],[[128066,128247],\"valid\",[],\"NV8\"],[[128248,128248],\"valid\",[],\"NV8\"],[[128249,128252],\"valid\",[],\"NV8\"],[[128253,128254],\"valid\",[],\"NV8\"],[[128255,128255],\"valid\",[],\"NV8\"],[[128256,128317],\"valid\",[],\"NV8\"],[[128318,128319],\"valid\",[],\"NV8\"],[[128320,128323],\"valid\",[],\"NV8\"],[[128324,128330],\"valid\",[],\"NV8\"],[[128331,128335],\"valid\",[],\"NV8\"],[[128336,128359],\"valid\",[],\"NV8\"],[[128360,128377],\"valid\",[],\"NV8\"],[[128378,128378],\"disallowed\"],[[128379,128419],\"valid\",[],\"NV8\"],[[128420,128420],\"disallowed\"],[[128421,128506],\"valid\",[],\"NV8\"],[[128507,128511],\"valid\",[],\"NV8\"],[[128512,128512],\"valid\",[],\"NV8\"],[[128513,128528],\"valid\",[],\"NV8\"],[[128529,128529],\"valid\",[],\"NV8\"],[[128530,128532],\"valid\",[],\"NV8\"],[[128533,128533],\"valid\",[],\"NV8\"],[[128534,128534],\"valid\",[],\"NV8\"],[[128535,128535],\"valid\",[],\"NV8\"],[[128536,128536],\"valid\",[],\"NV8\"],[[128537,128537],\"valid\",[],\"NV8\"],[[128538,128538],\"valid\",[],\"NV8\"],[[128539,128539],\"valid\",[],\"NV8\"],[[128540,128542],\"valid\",[],\"NV8\"],[[128543,128543],\"valid\",[],\"NV8\"],[[128544,128549],\"valid\",[],\"NV8\"],[[128550,128551],\"valid\",[],\"NV8\"],[[128552,128555],\"valid\",[],\"NV8\"],[[128556,128556],\"valid\",[],\"NV8\"],[[128557,128557],\"valid\",[],\"NV8\"],[[128558,128559],\"valid\",[],\"NV8\"],[[128560,128563],\"valid\",[],\"NV8\"],[[128564,128564],\"valid\",[],\"NV8\"],[[128565,128576],\"valid\",[],\"NV8\"],[[128577,128578],\"valid\",[],\"NV8\"],[[128579,128580],\"valid\",[],\"NV8\"],[[128581,128591],\"valid\",[],\"NV8\"],[[128592,128639],\"valid\",[],\"NV8\"],[[128640,128709],\"valid\",[],\"NV8\"],[[128710,128719],\"valid\",[],\"NV8\"],[[128720,128720],\"valid\",[],\"NV8\"],[[128721,128735],\"disallowed\"],[[128736,128748],\"valid\",[],\"NV8\"],[[128749,128751],\"disallowed\"],[[128752,128755],\"valid\",[],\"NV8\"],[[128756,128767],\"disallowed\"],[[128768,128883],\"valid\",[],\"NV8\"],[[128884,128895],\"disallowed\"],[[128896,128980],\"valid\",[],\"NV8\"],[[128981,129023],\"disallowed\"],[[129024,129035],\"valid\",[],\"NV8\"],[[129036,129039],\"disallowed\"],[[129040,129095],\"valid\",[],\"NV8\"],[[129096,129103],\"disallowed\"],[[129104,129113],\"valid\",[],\"NV8\"],[[129114,129119],\"disallowed\"],[[129120,129159],\"valid\",[],\"NV8\"],[[129160,129167],\"disallowed\"],[[129168,129197],\"valid\",[],\"NV8\"],[[129198,129295],\"disallowed\"],[[129296,129304],\"valid\",[],\"NV8\"],[[129305,129407],\"disallowed\"],[[129408,129412],\"valid\",[],\"NV8\"],[[129413,129471],\"disallowed\"],[[129472,129472],\"valid\",[],\"NV8\"],[[129473,131069],\"disallowed\"],[[131070,131071],\"disallowed\"],[[131072,173782],\"valid\"],[[173783,173823],\"disallowed\"],[[173824,177972],\"valid\"],[[177973,177983],\"disallowed\"],[[177984,178205],\"valid\"],[[178206,178207],\"disallowed\"],[[178208,183969],\"valid\"],[[183970,194559],\"disallowed\"],[[194560,194560],\"mapped\",[20029]],[[194561,194561],\"mapped\",[20024]],[[194562,194562],\"mapped\",[20033]],[[194563,194563],\"mapped\",[131362]],[[194564,194564],\"mapped\",[20320]],[[194565,194565],\"mapped\",[20398]],[[194566,194566],\"mapped\",[20411]],[[194567,194567],\"mapped\",[20482]],[[194568,194568],\"mapped\",[20602]],[[194569,194569],\"mapped\",[20633]],[[194570,194570],\"mapped\",[20711]],[[194571,194571],\"mapped\",[20687]],[[194572,194572],\"mapped\",[13470]],[[194573,194573],\"mapped\",[132666]],[[194574,194574],\"mapped\",[20813]],[[194575,194575],\"mapped\",[20820]],[[194576,194576],\"mapped\",[20836]],[[194577,194577],\"mapped\",[20855]],[[194578,194578],\"mapped\",[132380]],[[194579,194579],\"mapped\",[13497]],[[194580,194580],\"mapped\",[20839]],[[194581,194581],\"mapped\",[20877]],[[194582,194582],\"mapped\",[132427]],[[194583,194583],\"mapped\",[20887]],[[194584,194584],\"mapped\",[20900]],[[194585,194585],\"mapped\",[20172]],[[194586,194586],\"mapped\",[20908]],[[194587,194587],\"mapped\",[20917]],[[194588,194588],\"mapped\",[168415]],[[194589,194589],\"mapped\",[20981]],[[194590,194590],\"mapped\",[20995]],[[194591,194591],\"mapped\",[13535]],[[194592,194592],\"mapped\",[21051]],[[194593,194593],\"mapped\",[21062]],[[194594,194594],\"mapped\",[21106]],[[194595,194595],\"mapped\",[21111]],[[194596,194596],\"mapped\",[13589]],[[194597,194597],\"mapped\",[21191]],[[194598,194598],\"mapped\",[21193]],[[194599,194599],\"mapped\",[21220]],[[194600,194600],\"mapped\",[21242]],[[194601,194601],\"mapped\",[21253]],[[194602,194602],\"mapped\",[21254]],[[194603,194603],\"mapped\",[21271]],[[194604,194604],\"mapped\",[21321]],[[194605,194605],\"mapped\",[21329]],[[194606,194606],\"mapped\",[21338]],[[194607,194607],\"mapped\",[21363]],[[194608,194608],\"mapped\",[21373]],[[194609,194611],\"mapped\",[21375]],[[194612,194612],\"mapped\",[133676]],[[194613,194613],\"mapped\",[28784]],[[194614,194614],\"mapped\",[21450]],[[194615,194615],\"mapped\",[21471]],[[194616,194616],\"mapped\",[133987]],[[194617,194617],\"mapped\",[21483]],[[194618,194618],\"mapped\",[21489]],[[194619,194619],\"mapped\",[21510]],[[194620,194620],\"mapped\",[21662]],[[194621,194621],\"mapped\",[21560]],[[194622,194622],\"mapped\",[21576]],[[194623,194623],\"mapped\",[21608]],[[194624,194624],\"mapped\",[21666]],[[194625,194625],\"mapped\",[21750]],[[194626,194626],\"mapped\",[21776]],[[194627,194627],\"mapped\",[21843]],[[194628,194628],\"mapped\",[21859]],[[194629,194630],\"mapped\",[21892]],[[194631,194631],\"mapped\",[21913]],[[194632,194632],\"mapped\",[21931]],[[194633,194633],\"mapped\",[21939]],[[194634,194634],\"mapped\",[21954]],[[194635,194635],\"mapped\",[22294]],[[194636,194636],\"mapped\",[22022]],[[194637,194637],\"mapped\",[22295]],[[194638,194638],\"mapped\",[22097]],[[194639,194639],\"mapped\",[22132]],[[194640,194640],\"mapped\",[20999]],[[194641,194641],\"mapped\",[22766]],[[194642,194642],\"mapped\",[22478]],[[194643,194643],\"mapped\",[22516]],[[194644,194644],\"mapped\",[22541]],[[194645,194645],\"mapped\",[22411]],[[194646,194646],\"mapped\",[22578]],[[194647,194647],\"mapped\",[22577]],[[194648,194648],\"mapped\",[22700]],[[194649,194649],\"mapped\",[136420]],[[194650,194650],\"mapped\",[22770]],[[194651,194651],\"mapped\",[22775]],[[194652,194652],\"mapped\",[22790]],[[194653,194653],\"mapped\",[22810]],[[194654,194654],\"mapped\",[22818]],[[194655,194655],\"mapped\",[22882]],[[194656,194656],\"mapped\",[136872]],[[194657,194657],\"mapped\",[136938]],[[194658,194658],\"mapped\",[23020]],[[194659,194659],\"mapped\",[23067]],[[194660,194660],\"mapped\",[23079]],[[194661,194661],\"mapped\",[23000]],[[194662,194662],\"mapped\",[23142]],[[194663,194663],\"mapped\",[14062]],[[194664,194664],\"disallowed\"],[[194665,194665],\"mapped\",[23304]],[[194666,194667],\"mapped\",[23358]],[[194668,194668],\"mapped\",[137672]],[[194669,194669],\"mapped\",[23491]],[[194670,194670],\"mapped\",[23512]],[[194671,194671],\"mapped\",[23527]],[[194672,194672],\"mapped\",[23539]],[[194673,194673],\"mapped\",[138008]],[[194674,194674],\"mapped\",[23551]],[[194675,194675],\"mapped\",[23558]],[[194676,194676],\"disallowed\"],[[194677,194677],\"mapped\",[23586]],[[194678,194678],\"mapped\",[14209]],[[194679,194679],\"mapped\",[23648]],[[194680,194680],\"mapped\",[23662]],[[194681,194681],\"mapped\",[23744]],[[194682,194682],\"mapped\",[23693]],[[194683,194683],\"mapped\",[138724]],[[194684,194684],\"mapped\",[23875]],[[194685,194685],\"mapped\",[138726]],[[194686,194686],\"mapped\",[23918]],[[194687,194687],\"mapped\",[23915]],[[194688,194688],\"mapped\",[23932]],[[194689,194689],\"mapped\",[24033]],[[194690,194690],\"mapped\",[24034]],[[194691,194691],\"mapped\",[14383]],[[194692,194692],\"mapped\",[24061]],[[194693,194693],\"mapped\",[24104]],[[194694,194694],\"mapped\",[24125]],[[194695,194695],\"mapped\",[24169]],[[194696,194696],\"mapped\",[14434]],[[194697,194697],\"mapped\",[139651]],[[194698,194698],\"mapped\",[14460]],[[194699,194699],\"mapped\",[24240]],[[194700,194700],\"mapped\",[24243]],[[194701,194701],\"mapped\",[24246]],[[194702,194702],\"mapped\",[24266]],[[194703,194703],\"mapped\",[172946]],[[194704,194704],\"mapped\",[24318]],[[194705,194706],\"mapped\",[140081]],[[194707,194707],\"mapped\",[33281]],[[194708,194709],\"mapped\",[24354]],[[194710,194710],\"mapped\",[14535]],[[194711,194711],\"mapped\",[144056]],[[194712,194712],\"mapped\",[156122]],[[194713,194713],\"mapped\",[24418]],[[194714,194714],\"mapped\",[24427]],[[194715,194715],\"mapped\",[14563]],[[194716,194716],\"mapped\",[24474]],[[194717,194717],\"mapped\",[24525]],[[194718,194718],\"mapped\",[24535]],[[194719,194719],\"mapped\",[24569]],[[194720,194720],\"mapped\",[24705]],[[194721,194721],\"mapped\",[14650]],[[194722,194722],\"mapped\",[14620]],[[194723,194723],\"mapped\",[24724]],[[194724,194724],\"mapped\",[141012]],[[194725,194725],\"mapped\",[24775]],[[194726,194726],\"mapped\",[24904]],[[194727,194727],\"mapped\",[24908]],[[194728,194728],\"mapped\",[24910]],[[194729,194729],\"mapped\",[24908]],[[194730,194730],\"mapped\",[24954]],[[194731,194731],\"mapped\",[24974]],[[194732,194732],\"mapped\",[25010]],[[194733,194733],\"mapped\",[24996]],[[194734,194734],\"mapped\",[25007]],[[194735,194735],\"mapped\",[25054]],[[194736,194736],\"mapped\",[25074]],[[194737,194737],\"mapped\",[25078]],[[194738,194738],\"mapped\",[25104]],[[194739,194739],\"mapped\",[25115]],[[194740,194740],\"mapped\",[25181]],[[194741,194741],\"mapped\",[25265]],[[194742,194742],\"mapped\",[25300]],[[194743,194743],\"mapped\",[25424]],[[194744,194744],\"mapped\",[142092]],[[194745,194745],\"mapped\",[25405]],[[194746,194746],\"mapped\",[25340]],[[194747,194747],\"mapped\",[25448]],[[194748,194748],\"mapped\",[25475]],[[194749,194749],\"mapped\",[25572]],[[194750,194750],\"mapped\",[142321]],[[194751,194751],\"mapped\",[25634]],[[194752,194752],\"mapped\",[25541]],[[194753,194753],\"mapped\",[25513]],[[194754,194754],\"mapped\",[14894]],[[194755,194755],\"mapped\",[25705]],[[194756,194756],\"mapped\",[25726]],[[194757,194757],\"mapped\",[25757]],[[194758,194758],\"mapped\",[25719]],[[194759,194759],\"mapped\",[14956]],[[194760,194760],\"mapped\",[25935]],[[194761,194761],\"mapped\",[25964]],[[194762,194762],\"mapped\",[143370]],[[194763,194763],\"mapped\",[26083]],[[194764,194764],\"mapped\",[26360]],[[194765,194765],\"mapped\",[26185]],[[194766,194766],\"mapped\",[15129]],[[194767,194767],\"mapped\",[26257]],[[194768,194768],\"mapped\",[15112]],[[194769,194769],\"mapped\",[15076]],[[194770,194770],\"mapped\",[20882]],[[194771,194771],\"mapped\",[20885]],[[194772,194772],\"mapped\",[26368]],[[194773,194773],\"mapped\",[26268]],[[194774,194774],\"mapped\",[32941]],[[194775,194775],\"mapped\",[17369]],[[194776,194776],\"mapped\",[26391]],[[194777,194777],\"mapped\",[26395]],[[194778,194778],\"mapped\",[26401]],[[194779,194779],\"mapped\",[26462]],[[194780,194780],\"mapped\",[26451]],[[194781,194781],\"mapped\",[144323]],[[194782,194782],\"mapped\",[15177]],[[194783,194783],\"mapped\",[26618]],[[194784,194784],\"mapped\",[26501]],[[194785,194785],\"mapped\",[26706]],[[194786,194786],\"mapped\",[26757]],[[194787,194787],\"mapped\",[144493]],[[194788,194788],\"mapped\",[26766]],[[194789,194789],\"mapped\",[26655]],[[194790,194790],\"mapped\",[26900]],[[194791,194791],\"mapped\",[15261]],[[194792,194792],\"mapped\",[26946]],[[194793,194793],\"mapped\",[27043]],[[194794,194794],\"mapped\",[27114]],[[194795,194795],\"mapped\",[27304]],[[194796,194796],\"mapped\",[145059]],[[194797,194797],\"mapped\",[27355]],[[194798,194798],\"mapped\",[15384]],[[194799,194799],\"mapped\",[27425]],[[194800,194800],\"mapped\",[145575]],[[194801,194801],\"mapped\",[27476]],[[194802,194802],\"mapped\",[15438]],[[194803,194803],\"mapped\",[27506]],[[194804,194804],\"mapped\",[27551]],[[194805,194805],\"mapped\",[27578]],[[194806,194806],\"mapped\",[27579]],[[194807,194807],\"mapped\",[146061]],[[194808,194808],\"mapped\",[138507]],[[194809,194809],\"mapped\",[146170]],[[194810,194810],\"mapped\",[27726]],[[194811,194811],\"mapped\",[146620]],[[194812,194812],\"mapped\",[27839]],[[194813,194813],\"mapped\",[27853]],[[194814,194814],\"mapped\",[27751]],[[194815,194815],\"mapped\",[27926]],[[194816,194816],\"mapped\",[27966]],[[194817,194817],\"mapped\",[28023]],[[194818,194818],\"mapped\",[27969]],[[194819,194819],\"mapped\",[28009]],[[194820,194820],\"mapped\",[28024]],[[194821,194821],\"mapped\",[28037]],[[194822,194822],\"mapped\",[146718]],[[194823,194823],\"mapped\",[27956]],[[194824,194824],\"mapped\",[28207]],[[194825,194825],\"mapped\",[28270]],[[194826,194826],\"mapped\",[15667]],[[194827,194827],\"mapped\",[28363]],[[194828,194828],\"mapped\",[28359]],[[194829,194829],\"mapped\",[147153]],[[194830,194830],\"mapped\",[28153]],[[194831,194831],\"mapped\",[28526]],[[194832,194832],\"mapped\",[147294]],[[194833,194833],\"mapped\",[147342]],[[194834,194834],\"mapped\",[28614]],[[194835,194835],\"mapped\",[28729]],[[194836,194836],\"mapped\",[28702]],[[194837,194837],\"mapped\",[28699]],[[194838,194838],\"mapped\",[15766]],[[194839,194839],\"mapped\",[28746]],[[194840,194840],\"mapped\",[28797]],[[194841,194841],\"mapped\",[28791]],[[194842,194842],\"mapped\",[28845]],[[194843,194843],\"mapped\",[132389]],[[194844,194844],\"mapped\",[28997]],[[194845,194845],\"mapped\",[148067]],[[194846,194846],\"mapped\",[29084]],[[194847,194847],\"disallowed\"],[[194848,194848],\"mapped\",[29224]],[[194849,194849],\"mapped\",[29237]],[[194850,194850],\"mapped\",[29264]],[[194851,194851],\"mapped\",[149000]],[[194852,194852],\"mapped\",[29312]],[[194853,194853],\"mapped\",[29333]],[[194854,194854],\"mapped\",[149301]],[[194855,194855],\"mapped\",[149524]],[[194856,194856],\"mapped\",[29562]],[[194857,194857],\"mapped\",[29579]],[[194858,194858],\"mapped\",[16044]],[[194859,194859],\"mapped\",[29605]],[[194860,194861],\"mapped\",[16056]],[[194862,194862],\"mapped\",[29767]],[[194863,194863],\"mapped\",[29788]],[[194864,194864],\"mapped\",[29809]],[[194865,194865],\"mapped\",[29829]],[[194866,194866],\"mapped\",[29898]],[[194867,194867],\"mapped\",[16155]],[[194868,194868],\"mapped\",[29988]],[[194869,194869],\"mapped\",[150582]],[[194870,194870],\"mapped\",[30014]],[[194871,194871],\"mapped\",[150674]],[[194872,194872],\"mapped\",[30064]],[[194873,194873],\"mapped\",[139679]],[[194874,194874],\"mapped\",[30224]],[[194875,194875],\"mapped\",[151457]],[[194876,194876],\"mapped\",[151480]],[[194877,194877],\"mapped\",[151620]],[[194878,194878],\"mapped\",[16380]],[[194879,194879],\"mapped\",[16392]],[[194880,194880],\"mapped\",[30452]],[[194881,194881],\"mapped\",[151795]],[[194882,194882],\"mapped\",[151794]],[[194883,194883],\"mapped\",[151833]],[[194884,194884],\"mapped\",[151859]],[[194885,194885],\"mapped\",[30494]],[[194886,194887],\"mapped\",[30495]],[[194888,194888],\"mapped\",[30538]],[[194889,194889],\"mapped\",[16441]],[[194890,194890],\"mapped\",[30603]],[[194891,194891],\"mapped\",[16454]],[[194892,194892],\"mapped\",[16534]],[[194893,194893],\"mapped\",[152605]],[[194894,194894],\"mapped\",[30798]],[[194895,194895],\"mapped\",[30860]],[[194896,194896],\"mapped\",[30924]],[[194897,194897],\"mapped\",[16611]],[[194898,194898],\"mapped\",[153126]],[[194899,194899],\"mapped\",[31062]],[[194900,194900],\"mapped\",[153242]],[[194901,194901],\"mapped\",[153285]],[[194902,194902],\"mapped\",[31119]],[[194903,194903],\"mapped\",[31211]],[[194904,194904],\"mapped\",[16687]],[[194905,194905],\"mapped\",[31296]],[[194906,194906],\"mapped\",[31306]],[[194907,194907],\"mapped\",[31311]],[[194908,194908],\"mapped\",[153980]],[[194909,194910],\"mapped\",[154279]],[[194911,194911],\"disallowed\"],[[194912,194912],\"mapped\",[16898]],[[194913,194913],\"mapped\",[154539]],[[194914,194914],\"mapped\",[31686]],[[194915,194915],\"mapped\",[31689]],[[194916,194916],\"mapped\",[16935]],[[194917,194917],\"mapped\",[154752]],[[194918,194918],\"mapped\",[31954]],[[194919,194919],\"mapped\",[17056]],[[194920,194920],\"mapped\",[31976]],[[194921,194921],\"mapped\",[31971]],[[194922,194922],\"mapped\",[32000]],[[194923,194923],\"mapped\",[155526]],[[194924,194924],\"mapped\",[32099]],[[194925,194925],\"mapped\",[17153]],[[194926,194926],\"mapped\",[32199]],[[194927,194927],\"mapped\",[32258]],[[194928,194928],\"mapped\",[32325]],[[194929,194929],\"mapped\",[17204]],[[194930,194930],\"mapped\",[156200]],[[194931,194931],\"mapped\",[156231]],[[194932,194932],\"mapped\",[17241]],[[194933,194933],\"mapped\",[156377]],[[194934,194934],\"mapped\",[32634]],[[194935,194935],\"mapped\",[156478]],[[194936,194936],\"mapped\",[32661]],[[194937,194937],\"mapped\",[32762]],[[194938,194938],\"mapped\",[32773]],[[194939,194939],\"mapped\",[156890]],[[194940,194940],\"mapped\",[156963]],[[194941,194941],\"mapped\",[32864]],[[194942,194942],\"mapped\",[157096]],[[194943,194943],\"mapped\",[32880]],[[194944,194944],\"mapped\",[144223]],[[194945,194945],\"mapped\",[17365]],[[194946,194946],\"mapped\",[32946]],[[194947,194947],\"mapped\",[33027]],[[194948,194948],\"mapped\",[17419]],[[194949,194949],\"mapped\",[33086]],[[194950,194950],\"mapped\",[23221]],[[194951,194951],\"mapped\",[157607]],[[194952,194952],\"mapped\",[157621]],[[194953,194953],\"mapped\",[144275]],[[194954,194954],\"mapped\",[144284]],[[194955,194955],\"mapped\",[33281]],[[194956,194956],\"mapped\",[33284]],[[194957,194957],\"mapped\",[36766]],[[194958,194958],\"mapped\",[17515]],[[194959,194959],\"mapped\",[33425]],[[194960,194960],\"mapped\",[33419]],[[194961,194961],\"mapped\",[33437]],[[194962,194962],\"mapped\",[21171]],[[194963,194963],\"mapped\",[33457]],[[194964,194964],\"mapped\",[33459]],[[194965,194965],\"mapped\",[33469]],[[194966,194966],\"mapped\",[33510]],[[194967,194967],\"mapped\",[158524]],[[194968,194968],\"mapped\",[33509]],[[194969,194969],\"mapped\",[33565]],[[194970,194970],\"mapped\",[33635]],[[194971,194971],\"mapped\",[33709]],[[194972,194972],\"mapped\",[33571]],[[194973,194973],\"mapped\",[33725]],[[194974,194974],\"mapped\",[33767]],[[194975,194975],\"mapped\",[33879]],[[194976,194976],\"mapped\",[33619]],[[194977,194977],\"mapped\",[33738]],[[194978,194978],\"mapped\",[33740]],[[194979,194979],\"mapped\",[33756]],[[194980,194980],\"mapped\",[158774]],[[194981,194981],\"mapped\",[159083]],[[194982,194982],\"mapped\",[158933]],[[194983,194983],\"mapped\",[17707]],[[194984,194984],\"mapped\",[34033]],[[194985,194985],\"mapped\",[34035]],[[194986,194986],\"mapped\",[34070]],[[194987,194987],\"mapped\",[160714]],[[194988,194988],\"mapped\",[34148]],[[194989,194989],\"mapped\",[159532]],[[194990,194990],\"mapped\",[17757]],[[194991,194991],\"mapped\",[17761]],[[194992,194992],\"mapped\",[159665]],[[194993,194993],\"mapped\",[159954]],[[194994,194994],\"mapped\",[17771]],[[194995,194995],\"mapped\",[34384]],[[194996,194996],\"mapped\",[34396]],[[194997,194997],\"mapped\",[34407]],[[194998,194998],\"mapped\",[34409]],[[194999,194999],\"mapped\",[34473]],[[195000,195000],\"mapped\",[34440]],[[195001,195001],\"mapped\",[34574]],[[195002,195002],\"mapped\",[34530]],[[195003,195003],\"mapped\",[34681]],[[195004,195004],\"mapped\",[34600]],[[195005,195005],\"mapped\",[34667]],[[195006,195006],\"mapped\",[34694]],[[195007,195007],\"disallowed\"],[[195008,195008],\"mapped\",[34785]],[[195009,195009],\"mapped\",[34817]],[[195010,195010],\"mapped\",[17913]],[[195011,195011],\"mapped\",[34912]],[[195012,195012],\"mapped\",[34915]],[[195013,195013],\"mapped\",[161383]],[[195014,195014],\"mapped\",[35031]],[[195015,195015],\"mapped\",[35038]],[[195016,195016],\"mapped\",[17973]],[[195017,195017],\"mapped\",[35066]],[[195018,195018],\"mapped\",[13499]],[[195019,195019],\"mapped\",[161966]],[[195020,195020],\"mapped\",[162150]],[[195021,195021],\"mapped\",[18110]],[[195022,195022],\"mapped\",[18119]],[[195023,195023],\"mapped\",[35488]],[[195024,195024],\"mapped\",[35565]],[[195025,195025],\"mapped\",[35722]],[[195026,195026],\"mapped\",[35925]],[[195027,195027],\"mapped\",[162984]],[[195028,195028],\"mapped\",[36011]],[[195029,195029],\"mapped\",[36033]],[[195030,195030],\"mapped\",[36123]],[[195031,195031],\"mapped\",[36215]],[[195032,195032],\"mapped\",[163631]],[[195033,195033],\"mapped\",[133124]],[[195034,195034],\"mapped\",[36299]],[[195035,195035],\"mapped\",[36284]],[[195036,195036],\"mapped\",[36336]],[[195037,195037],\"mapped\",[133342]],[[195038,195038],\"mapped\",[36564]],[[195039,195039],\"mapped\",[36664]],[[195040,195040],\"mapped\",[165330]],[[195041,195041],\"mapped\",[165357]],[[195042,195042],\"mapped\",[37012]],[[195043,195043],\"mapped\",[37105]],[[195044,195044],\"mapped\",[37137]],[[195045,195045],\"mapped\",[165678]],[[195046,195046],\"mapped\",[37147]],[[195047,195047],\"mapped\",[37432]],[[195048,195048],\"mapped\",[37591]],[[195049,195049],\"mapped\",[37592]],[[195050,195050],\"mapped\",[37500]],[[195051,195051],\"mapped\",[37881]],[[195052,195052],\"mapped\",[37909]],[[195053,195053],\"mapped\",[166906]],[[195054,195054],\"mapped\",[38283]],[[195055,195055],\"mapped\",[18837]],[[195056,195056],\"mapped\",[38327]],[[195057,195057],\"mapped\",[167287]],[[195058,195058],\"mapped\",[18918]],[[195059,195059],\"mapped\",[38595]],[[195060,195060],\"mapped\",[23986]],[[195061,195061],\"mapped\",[38691]],[[195062,195062],\"mapped\",[168261]],[[195063,195063],\"mapped\",[168474]],[[195064,195064],\"mapped\",[19054]],[[195065,195065],\"mapped\",[19062]],[[195066,195066],\"mapped\",[38880]],[[195067,195067],\"mapped\",[168970]],[[195068,195068],\"mapped\",[19122]],[[195069,195069],\"mapped\",[169110]],[[195070,195071],\"mapped\",[38923]],[[195072,195072],\"mapped\",[38953]],[[195073,195073],\"mapped\",[169398]],[[195074,195074],\"mapped\",[39138]],[[195075,195075],\"mapped\",[19251]],[[195076,195076],\"mapped\",[39209]],[[195077,195077],\"mapped\",[39335]],[[195078,195078],\"mapped\",[39362]],[[195079,195079],\"mapped\",[39422]],[[195080,195080],\"mapped\",[19406]],[[195081,195081],\"mapped\",[170800]],[[195082,195082],\"mapped\",[39698]],[[195083,195083],\"mapped\",[40000]],[[195084,195084],\"mapped\",[40189]],[[195085,195085],\"mapped\",[19662]],[[195086,195086],\"mapped\",[19693]],[[195087,195087],\"mapped\",[40295]],[[195088,195088],\"mapped\",[172238]],[[195089,195089],\"mapped\",[19704]],[[195090,195090],\"mapped\",[172293]],[[195091,195091],\"mapped\",[172558]],[[195092,195092],\"mapped\",[172689]],[[195093,195093],\"mapped\",[40635]],[[195094,195094],\"mapped\",[19798]],[[195095,195095],\"mapped\",[40697]],[[195096,195096],\"mapped\",[40702]],[[195097,195097],\"mapped\",[40709]],[[195098,195098],\"mapped\",[40719]],[[195099,195099],\"mapped\",[40726]],[[195100,195100],\"mapped\",[40763]],[[195101,195101],\"mapped\",[173568]],[[195102,196605],\"disallowed\"],[[196606,196607],\"disallowed\"],[[196608,262141],\"disallowed\"],[[262142,262143],\"disallowed\"],[[262144,327677],\"disallowed\"],[[327678,327679],\"disallowed\"],[[327680,393213],\"disallowed\"],[[393214,393215],\"disallowed\"],[[393216,458749],\"disallowed\"],[[458750,458751],\"disallowed\"],[[458752,524285],\"disallowed\"],[[524286,524287],\"disallowed\"],[[524288,589821],\"disallowed\"],[[589822,589823],\"disallowed\"],[[589824,655357],\"disallowed\"],[[655358,655359],\"disallowed\"],[[655360,720893],\"disallowed\"],[[720894,720895],\"disallowed\"],[[720896,786429],\"disallowed\"],[[786430,786431],\"disallowed\"],[[786432,851965],\"disallowed\"],[[851966,851967],\"disallowed\"],[[851968,917501],\"disallowed\"],[[917502,917503],\"disallowed\"],[[917504,917504],\"disallowed\"],[[917505,917505],\"disallowed\"],[[917506,917535],\"disallowed\"],[[917536,917631],\"disallowed\"],[[917632,917759],\"disallowed\"],[[917760,917999],\"ignored\"],[[918000,983037],\"disallowed\"],[[983038,983039],\"disallowed\"],[[983040,1048573],\"disallowed\"],[[1048574,1048575],\"disallowed\"],[[1048576,1114109],\"disallowed\"],[[1114110,1114111],\"disallowed\"]]');\n\n//# sourceURL=webpack://ai-lovly-guu/./node_modules/tr46/lib/mappingTable.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;