const {Composer, Markup, Scenes} = require("telegraf");
const {UserManager} = require("../ManagerServices");
const {UserRepository} = require("../DatabaseRepository");

class CreateProfileScene {
    createScene() {
        const start = new Composer();
        const faculty = new Composer();
        const course = new Composer();
        const gender = new Composer();
        const name = new Composer();
        const age = new Composer();
        const photo = new Composer();
        const description = new Composer();
        const userManager = new UserManager();
        const userRepository = new UserRepository();
        const startMenu = Markup.keyboard([
            ['–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'],
            ['–ü–æ–∏—Å–∫', '–í–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏']
        ]).oneTime().resize();

        start.on('text', async (ctx) => {
            try {
                ctx.wizard.state.data = {};
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });

        name.on('text', async (ctx) => {
            try {
                const name = ctx.message.text;
                const isValidName = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+$/.test(name);
                console.log(name)
                if (name.length > 30) {
                    await ctx.reply('–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    return;
                }
                if (!isValidName) {
                    await ctx.reply('–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    return;
                }
                ctx.wizard.state.data.name = name;
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:');
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });

        age.on('text', async (ctx) => {
            try {
                const age = ctx.message.text;

                if (isNaN(age) || age <= 0 || age > 65) {
                    await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65.');
                    return;
                }

                ctx.wizard.state.data.age = age;
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', Markup.keyboard([['–ú—É–∂—Å–∫–æ–π'], ['–ñ–µ–Ω—Å–∫–∏–π']]).oneTime().resize());
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });

        gender.hears(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], async (ctx) => {
            try {
                ctx.wizard.state.data.gender = ctx.message.text;
                const keyboardOptions = {
                    columns: 2, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∫–Ω–æ–ø–æ–∫
                };

                const facultyKeyboard = Markup.keyboard(['üíª–ò–ò–°', 'üíπ–ò–≠–§', 'ü§ù–ò–£–ü–°–∏–ë–ö', 'üìà–ò–ú', 'üè≠–ò–û–ú', '‚öñ–ò–ì–£–∏–ü'], keyboardOptions)

                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', facultyKeyboard.oneTime().resize());
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });

        faculty.hears(['üíª–ò–ò–°', 'üíπ–ò–≠–§', 'ü§ù–ò–£–ü–°–∏–ë–ö', 'üìà–ò–ú', 'üè≠–ò–û–ú', '‚öñ–ò–ì–£–∏–ü'], async (ctx) => {
            try {
                ctx.wizard.state.data.faculty = ctx.message.text;
                const keyboardOptions = {
                    columns: 2, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∫–Ω–æ–ø–æ–∫
                };
                const courseKeyboard = Markup.keyboard(['1', '2', '3', '4', '1–ú', '2–ú'], keyboardOptions).oneTime().resize();
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', courseKeyboard);
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });

        course.hears(['1', '2', '3', '4', '1–ú', '2–ú'], async (ctx) => {
            try {
                ctx.wizard.state.data.course = ctx.message.text;
                await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:');
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });
        photo.on('text', async (ctx) => {
            try {
                await ctx.reply('–Ø –∂–¥—É —Ñ–æ—Ç–æ!!!!');
            } catch (e) {
                console.log(e);
            }
        })
        photo.on('photo', async (ctx) => {
            try {
                ctx.wizard.state.data.photo = ctx.message.photo[0].file_id;
                await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:');
                return ctx.wizard.next();
            } catch (e) {
                console.log(e);
            }
        });

        description.on('text', async (ctx) => {
            try {
                const description = ctx.message.text;
                const sanitizedDescription = description
                    .replace(/<.*?>/g, '')  // –£–¥–∞–ª–∏—Ç—å HTML-—Ç–µ–≥–∏
                    .replace(/\/\w+/g, '')
                    .replace(/@/g, '')
                    .replace(/https ?:\/\/\S+/g, '')
                if (description.length > 250) {
                    await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 250 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    return;
                }
                ctx.wizard.state.data.description = sanitizedDescription;
                const user = await userRepository.findByTelegramId(ctx.from.id);
                if (user !== null) {
                    await userManager.delete(user.id);
                }

                await userManager.create({
                    name: ctx.wizard.state.data.name,
                    age: ctx.wizard.state.data.age,
                    gender: ctx.wizard.state.data.gender,
                    faculty: ctx.wizard.state.data.faculty,
                    course: ctx.wizard.state.data.course,
                    photo: ctx.wizard.state.data.photo,
                    description: ctx.wizard.state.data.description,
                    telegram_id: ctx.from.id,
                    username: ctx.from.username
                });

                const formattedDescription = `
‚ïë *–ò–º—è:* ${ctx.wizard.state.data.name}
‚ïë *–í–æ–∑—Ä–∞—Å—Ç:* ${ctx.wizard.state.data.age}
‚ïë *–ü–æ–ª:* ${ctx.wizard.state.data.gender}
‚ïë *–§–∞–∫—É–ª—å—Ç–µ—Ç:* ${ctx.wizard.state.data.faculty}
‚ïë *–ö—É—Ä—Å:* ${ctx.wizard.state.data.course}
‚ïë *–û–ø–∏—Å–∞–Ω–∏–µ:* ${ctx.wizard.state.data.description}
‚ïë *–ü–æ–ª:* ${ctx.wizard.state.data.gender}
‚ïë *–§–∞–∫—É–ª—å—Ç–µ—Ç:* ${ctx.wizard.state.data.faculty}
‚ïë *–ö—É—Ä—Å:* ${ctx.wizard.state.data.course}
‚ïë *–û–ø–∏—Å–∞–Ω–∏–µ:* ${ctx.wizard.state.data.description}
`;
                await ctx.replyWithPhoto(ctx.wizard.state.data.photo, {
                    caption: formattedDescription,
                    parse_mode: 'Markdown'
                });

                await ctx.reply('–°—É–ø–µ—Ä! –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ :)', startMenu)
                return ctx.scene.leave();
            } catch (e) {
                console.log(e);
            }
        });

        return new Scenes.WizardScene('createProfileWizard', start, name, age, gender, faculty, course, photo, description);
    }
}

module.exports = CreateProfileScene
